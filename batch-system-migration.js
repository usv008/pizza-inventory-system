const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'pizza_inventory.db');
const db = new sqlite3.Database(dbPath);

console.log('üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –ø–∞—Ä—Ç—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏...');

db.serialize(() => {
    // 1. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–∞—Ä—Ç—ñ–π
    db.run(`CREATE TABLE IF NOT EXISTS production_batches (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER NOT NULL,
        batch_date DATE NOT NULL,
        production_date DATE NOT NULL,
        total_quantity INTEGER NOT NULL,
        available_quantity INTEGER NOT NULL,
        reserved_quantity INTEGER DEFAULT 0,
        expiry_date DATE NOT NULL,
        production_id INTEGER,
        status TEXT DEFAULT 'ACTIVE',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products (id),
        FOREIGN KEY (production_id) REFERENCES production (id),
        UNIQUE(product_id, batch_date)
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_batches:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è production_batches —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        }
    });

    // 2. –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å
    db.run(`ALTER TABLE stock_movements ADD COLUMN batch_id INTEGER`, (err) => {
        if (err && !err.message.includes('duplicate column name')) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è batch_id:', err.message);
        } else {
            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ batch_id –¥–æ–¥–∞–Ω–∞ –¥–æ stock_movements');
        }
    });

    db.run(`ALTER TABLE stock_movements ADD COLUMN batch_date DATE`, (err) => {
        if (err && !err.message.includes('duplicate column name')) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è batch_date:', err.message);
        } else {
            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ batch_date –¥–æ–¥–∞–Ω–∞ –¥–æ stock_movements');
        }
    });

    db.run(`ALTER TABLE order_items ADD COLUMN allocated_batches TEXT`, (err) => {
        if (err && !err.message.includes('duplicate column name')) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è allocated_batches:', err.message);
        } else {
            console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ allocated_batches –¥–æ–¥–∞–Ω–∞ –¥–æ order_items');
        }
    });

    // 3. –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä—Ç—ñ—ó –∑ —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
    db.all(`SELECT * FROM production ORDER BY production_date, id`, (err, productions) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞:', err.message);
            return;
        }

        console.log(`üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä—Ç—ñ—ó –∑ ${productions.length} –∑–∞–ø–∏—Å—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞...`);
        
        let processedCount = 0;
        
        if (productions.length === 0) {
            console.log('‚ÑπÔ∏è –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó');
            db.close();
            return;
        }
        
        productions.forEach(prod => {
            const batchData = {
                product_id: prod.product_id,
                batch_date: prod.production_date,
                production_date: prod.production_date,
                total_quantity: prod.total_quantity,
                available_quantity: prod.total_quantity, // –ü–æ—á–∞—Ç–∫–æ–≤–æ –≤—Å—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞
                expiry_date: prod.expiry_date,
                production_id: prod.id
            };

            db.run(`INSERT OR IGNORE INTO production_batches 
                (product_id, batch_date, production_date, total_quantity, available_quantity, expiry_date, production_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)`,
                [batchData.product_id, batchData.batch_date, batchData.production_date, 
                 batchData.total_quantity, batchData.available_quantity, batchData.expiry_date, batchData.production_id],
                function(err) {
                    if (err) {
                        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ ${prod.id}:`, err.message);
                    } else {
                        console.log(`‚úÖ –ü–∞—Ä—Ç—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: ${batchData.batch_date} (${batchData.total_quantity} —à—Ç)`);
                    }
                    
                    processedCount++;
                    if (processedCount === productions.length) {
                        console.log('üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
                        console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ npm start –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏');
                        db.close();
                    }
                }
            );
        });
    });

    // 4. –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    db.run(`CREATE INDEX IF NOT EXISTS idx_batches_product_date ON production_batches(product_id, batch_date)`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É:', err.message);
        } else {
            console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞—Ä—Ç—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_batches_expiry ON production_batches(expiry_date, status)`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É —Ç–µ—Ä–º—ñ–Ω—ñ–≤:', err.message);
        } else {
            console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å —Ç–µ—Ä–º—ñ–Ω—ñ–≤ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }
    });
});

module.exports = { 
    runMigration: () => {
        console.log('–ú—ñ–≥—Ä–∞—Ü—ñ—è –ø–∞—Ä—Ç—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∑–∞–ø—É—â–µ–Ω–∞...');
        // –õ–æ–≥—ñ–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ require —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É
    }
};