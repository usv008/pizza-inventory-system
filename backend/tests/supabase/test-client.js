#!/usr/bin/env node

/**
 * –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ç–µ—Å—Ç Supabase –∫–ª—ñ—î–Ω—Ç–∞
 * 
 * –¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ –±–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º @supabase/supabase-js
 * –ó–∞–ø—É—Å–∫: node test-supabase-client.js
 */

const { createClient } = require('@supabase/supabase-js');

// –î–∞–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –ø–ª–∞–Ω—É –º—ñ–≥—Ä–∞—Ü—ñ—ó
const SUPABASE_URL = 'https://wncukuajzygzyasofyoe.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InduY3VrdWFqenlnenlhc29meW9lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1MTQxOTEsImV4cCI6MjA2NDA5MDE5MX0.KG6dnuxlnnX_haXI7LEvJNc8wTXX2GT_cd07DlYALJ4';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InduY3VrdWFqenlnenlhc29meW9lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODUxNDE5MSwiZXhwIjoyMDY0MDkwMTkxfQ.arten1xRuJicEJEY7mHuet7eQqjuTb24VLwTtcB91yM';

console.log('üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Supabase JS –∫–ª—ñ—î–Ω—Ç–∞...\n');

/**
 * –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ anon –∫–ª—é—á–µ–º
 */
async function testAnonClient() {
    console.log('üë§ –¢–µ—Å—Ç 1: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è anon –∫–ª—ñ—î–Ω—Ç–∞');
    
    try {
        const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–æ–≤–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π
        if (supabase && supabase.rest) {
            console.log('‚úÖ Anon –∫–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            console.log(`   URL: ${supabase.supabaseUrl}`);
            console.log(`   Anon Key: ${SUPABASE_ANON_KEY.substring(0, 20)}...`);
            return supabase;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è anon –∫–ª—ñ—î–Ω—Ç–∞');
            return null;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ anon –∫–ª—ñ—î–Ω—Ç–∞:');
        console.log(`   ${error.message}`);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ service role –∫–ª—é—á–µ–º
 */
async function testServiceClient() {
    console.log('\nüîë –¢–µ—Å—Ç 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è service role –∫–ª—ñ—î–Ω—Ç–∞');
    
    try {
        const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
            auth: {
                autoRefreshToken: false,
                persistSession: false
            }
        });
        
        if (supabase && supabase.rest) {
            console.log('‚úÖ Service role –∫–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            console.log(`   URL: ${supabase.supabaseUrl}`);
            console.log(`   Service Key: ${SUPABASE_SERVICE_KEY.substring(0, 20)}...`);
            return supabase;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è service role –∫–ª—ñ—î–Ω—Ç–∞');
            return null;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ service role –∫–ª—ñ—î–Ω—Ç–∞:');
        console.log(`   ${error.message}`);
        return null;
    }
}

/**
 * –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
async function testDatabaseConnection(supabase) {
    console.log('\nüîó –¢–µ—Å—Ç 3: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
    
    try {
        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        const { data, error } = await supabase
            .from('_realtime_schema_changes')
            .select('*')
            .limit(1);
        
        if (!error) {
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
            console.log(`   –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ (${data ? data.length : 0} –∑–∞–ø–∏—Å—ñ–≤)`);
            return true;
        } else if (error.code === 'PGRST116') {
            // –¢–∞–±–ª–∏—Ü—è –Ω–µ —ñ—Å–Ω—É—î - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó –±–∞–∑–∏
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–æ—Ä–æ–∂–Ω—è –±–∞–∑–∞)');
            console.log('   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å');
            return true;
        } else {
            console.log('‚ö†Ô∏è  –û–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–∏:');
            console.log(`   –ö–æ–¥: ${error.code}`);
            console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            return true; // –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ—ó –±–∞–∑–∏
        }
    } catch (error) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç RPC —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
 */
async function testRPCFunctionality(supabase) {
    console.log('\n‚ö° –¢–µ—Å—Ç 4: RPC —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª');
    
    try {
        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        const { data, error } = await supabase.rpc('version');
        
        if (!error && data) {
            console.log('‚úÖ RPC —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å');
            console.log(`   PostgreSQL –≤–µ—Ä—Å—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞`);
            return true;
        } else if (error && error.code === 'PGRST202') {
            console.log('‚ö†Ô∏è  RPC —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ (–æ—á—ñ–∫—É–≤–∞–Ω–æ)');
            console.log('   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π');
            return true;
        } else {
            console.log('‚ö†Ô∏è  RPC —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:');
            console.log(`   –ö–æ–¥: ${error?.code || '–ù–µ–≤—ñ–¥–æ–º–æ'}`);
            console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
            return true;
        }
    } catch (error) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ RPC:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableCreation(supabase) {
    console.log('\nüèóÔ∏è  –¢–µ—Å—Ç 5: –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ');
    
    try {
        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ö–µ–º—É (—Ü–µ –ø–æ–∫–∞–∂–µ, —á–∏ –º–æ–∂–µ–º–æ –º–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é)
        const { data, error } = await supabase
            .schema('information_schema')
            .from('tables')
            .select('table_name')
            .eq('table_schema', 'public')
            .limit(5);
        
        if (!error) {
            console.log('‚úÖ –î–æ—Å—Ç—É–ø –¥–æ —Å—Ö–µ–º–∏ –ë–î —î');
            console.log(`   –ó–Ω–∞–π–¥–µ–Ω–æ ${data ? data.length : 0} –ø—É–±–ª—ñ—á–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å`);
            if (data && data.length > 0) {
                console.log(`   –ü—Ä–∏–∫–ª–∞–¥ —Ç–∞–±–ª–∏—Ü—å: ${data.map(t => t.table_name).join(', ')}`);
            }
            return true;
        } else {
            console.log('‚ö†Ô∏è  –û–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Å—Ö–µ–º–∏ (–º–æ–∂–µ –±—É—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ):');
            console.log(`   –ö–æ–¥: ${error.code}`);
            console.log(`   –ú–æ–∂–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —á–µ—Ä–µ–∑ SQL Editor`);
            return true;
        }
    } catch (error) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ö–µ–º–∏:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
async function runClientTests() {
    console.log('üéØ –¢–ï–°–¢–£–í–ê–ù–ù–Ø SUPABASE JS –ö–õ–Ü–Ñ–ù–¢–ê');
    console.log('===================================');
    console.log(`üìç –ü—Ä–æ–µ–∫—Ç: wncukuajzygzyasofyoe`);
    console.log(`üåê URL: ${SUPABASE_URL}`);
    console.log(`üì¶ –í–µ—Ä—Å—ñ—è –∫–ª—ñ—î–Ω—Ç–∞: @supabase/supabase-js v2.x`);
    console.log('===================================\n');

    const results = [];
    
    // –¢–µ—Å—Ç 1: Anon –∫–ª—ñ—î–Ω—Ç
    const anonClient = await testAnonClient();
    results.push(anonClient !== null);
    
    // –¢–µ—Å—Ç 2: Service role –∫–ª—ñ—î–Ω—Ç
    const serviceClient = await testServiceClient();
    results.push(serviceClient !== null);
    
    if (serviceClient) {
        // –¢–µ—Å—Ç 3: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
        results.push(await testDatabaseConnection(serviceClient));
        
        // –¢–µ—Å—Ç 4: RPC —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª
        results.push(await testRPCFunctionality(serviceClient));
        
        // –¢–µ—Å—Ç 5: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
        results.push(await testTableCreation(serviceClient));
    } else {
        results.push(false, false, false);
    }
    
    // –ü—ñ–¥—Å—É–º–∫–∏
    console.log('\nüìä –ü–Ü–î–°–£–ú–ö–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ö–õ–Ü–Ñ–ù–¢–ê');
    console.log('================================');
    
    const successCount = results.filter(r => r).length;
    const totalCount = results.length;
    
    if (successCount === totalCount) {
        console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('‚úÖ –ì–æ—Ç–æ–≤—ñ –¥–æ –ø–æ—á–∞—Ç–∫—É –º—ñ–≥—Ä–∞—Ü—ñ—ó —Ç–∞–±–ª–∏—Ü—å');
    } else if (successCount >= 3) {
        console.log('‚ö†Ô∏è  –ß–∞—Å—Ç–∫–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ - –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å');
        console.log('‚úÖ –ú–æ–∂–Ω–∞ —Ä–æ–∑–ø–æ—á–∏–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é');
    } else {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞');
        console.log('üõë –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –ø–µ—Ä–µ–¥ –º—ñ–≥—Ä–∞—Ü—ñ—î—é');
    }
    
    console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π—à–ª–∏`);
    console.log('\nüîÑ –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–æ—ó —Ç–∞–±–ª–∏—Ü—ñ products');
    console.log('   –ú–µ—Ç–æ–¥: Supabase Dashboard > SQL Editor');
    
    return successCount >= 3;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
    runClientTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { runClientTests };