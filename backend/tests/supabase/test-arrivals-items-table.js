#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ arrivals_items –≤ Supabase
 * 
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–±–æ—Ç—É –∑ —Ç–∞–±–ª–∏—Ü–µ—é arrivals_items
 * –ó–∞–ø—É—Å–∫: node tests/supabase/test-arrivals-items-table.js
 */

const { createClient } = require('@supabase/supabase-js');

// –î–∞–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
const SUPABASE_URL = 'https://wncukuajzygzyasofyoe.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InduY3VrdWFqenlnenlhc29meW9lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODUxNDE5MSwiZXhwIjoyMDY0MDkwMTkxfQ.arten1xRuJicEJEY7mHuet7eQqjuTb24VLwTtcB91yM';

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ arrivals_items –≤ Supabase...\n');

/**
 * –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableExists() {
    console.log('üìã –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ arrivals_items');
    
    try {
        const { data, error } = await supabase
            .from('arrivals_items')
            .select('*')
            .limit(1);
        
        if (!error) {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è arrivals_items —ñ—Å–Ω—É—î');
            return true;
        } else if (error.code === 'PGRST116') {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü—è arrivals_items –Ω–µ —ñ—Å–Ω—É—î');
            console.log('   –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é 018_create_arrivals_items_table.sql');
            return false;
        } else {
            console.log('‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableStructure() {
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ arrivals_items');
    
    try {
        const { data, error } = await supabase
            .from('arrivals_items')
            .select('*')
            .limit(0);
        
        if (!error) {
            console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–µ–∫—Ç–Ω–∞');
            console.log('   –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è: id, arrival_id, product_id, quantity, unit_price, batch_date');
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 */
async function testSampleData() {
    console.log('\nüìã –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
    
    try {
        const { data, error } = await supabase
            .from('arrivals_items')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (!error) {
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –ø–æ–∑–∏—Ü—ñ–π –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å`);
            
            if (data.length > 0) {
                console.log('   –ü—Ä–∏–∫–ª–∞–¥ –ø–æ–∑–∏—Ü—ñ–π:');
                data.slice(0, 3).forEach((item, index) => {
                    const price = item.unit_price ? `${item.unit_price}/${item.total_price}` : 'N/A';
                    console.log(`   ${index + 1}. Arrival ${item.arrival_id}, Product ${item.product_id}: ${item.quantity} —à—Ç, ${price} –≥—Ä–Ω, grade ${item.quality_grade}`);
                });
            }
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CHECK constraints
 */
async function testConstraints() {
    console.log('\nüìã –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CHECK constraints');
    
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫–æ—Å—Ç—ñ
        const { data: grades, error: error1 } = await supabase
            .from('arrivals_items')
            .select('quality_grade')
            .limit(100);
        
        if (!error1) {
            const uniqueGrades = [...new Set(grades.map(item => item.quality_grade))];
            const validGrades = ['A', 'B', 'C', 'REJECT'];
            
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫–æ—Å—Ç—ñ: ${uniqueGrades.join(', ')}`);
            
            const invalidGrades = uniqueGrades.filter(g => !validGrades.includes(g));
            if (invalidGrades.length === 0) {
                console.log('‚úÖ –í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å CHECK constraint');
            } else {
                console.log(`‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${invalidGrades.join(', ')}`);
            }
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ quantity > 0
        const { data: quantities, error: error2 } = await supabase
            .from('arrivals_items')
            .select('quantity')
            .lte('quantity', 0);
        
        if (!error2) {
            if (quantities.length === 0) {
                console.log('‚úÖ –í—Å—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±—ñ–ª—å—à–µ 0 (quantity > 0 constraint –ø—Ä–∞—Ü—é—î)');
            } else {
                console.log(`‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ ${quantities.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ quantity <= 0`);
            }
        }
        
        return !error1 && !error2;
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è constraints:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –∑–≤'—è–∑–∫—ñ–≤
 */
async function testForeignKeys() {
    console.log('\nüìã –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –∑–≤\'—è–∑–∫—ñ–≤');
    
    try {
        const { data, error } = await supabase
            .from('arrivals_items')
            .select(`
                id,
                arrival_id,
                product_id,
                quantity,
                quality_grade,
                storage_location,
                arrivals:arrival_id (
                    id,
                    arrival_number,
                    reason
                ),
                products:product_id (
                    id,
                    name,
                    code
                )
            `)
            .limit(5);
        
        if (!error) {
            console.log('‚úÖ Foreign key –∑–≤\'—è–∑–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å');
            console.log(`   –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –ø–æ–∑–∏—Ü—ñ–π –∑ –ø–æ–≤\'—è–∑–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏`);
            
            if (data.length > 0) {
                console.log('   –ü—Ä–∏–∫–ª–∞–¥ –∑–≤\'—è–∑–∫—ñ–≤:');
                data.forEach((item, index) => {
                    const arrival = item.arrivals;
                    const product = item.products;
                    
                    console.log(`   ${index + 1}. Arrival: ${arrival ? arrival.arrival_number : 'NULL'} (${arrival ? arrival.reason : 'N/A'})`);
                    console.log(`      Product: ${product ? product.name : 'NULL'} (${product ? product.code : 'N/A'})`);
                    console.log(`      Quantity: ${item.quantity}, Grade: ${item.quality_grade}, Location: ${item.storage_location || 'N/A'}`);
                });
            }
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ foreign key –∑–≤\'—è–∑–∫—ñ–≤:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è FK:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É total_price
 */
async function testPriceCalculation() {
    console.log('\nüìã –¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É total_price');
    
    try {
        const { data, error } = await supabase
            .from('arrivals_items')
            .select('id, quantity, unit_price, total_price')
            .not('unit_price', 'is', null)
            .limit(10);
        
        if (!error) {
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ —Ü—ñ–Ω–æ—é –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏`);
            
            let correctCalculations = 0;
            let incorrectCalculations = 0;
            
            data.forEach((item, index) => {
                const expectedTotal = parseFloat((item.unit_price * item.quantity).toFixed(2));
                const actualTotal = parseFloat(item.total_price);
                
                if (Math.abs(expectedTotal - actualTotal) < 0.01) { // –¥–æ–ø—É—Å–∫ –Ω–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è
                    correctCalculations++;
                    if (index < 3) {
                        console.log(`   ‚úÖ ID ${item.id}: ${item.quantity} √ó ${item.unit_price} = ${item.total_price} (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)`);
                    }
                } else {
                    incorrectCalculations++;
                    console.log(`   ‚ùå ID ${item.id}: ${item.quantity} √ó ${item.unit_price} = ${item.total_price} (–æ—á—ñ–∫—É–≤–∞–ª–æ—Å—å ${expectedTotal})`);
                }
            });
            
            if (incorrectCalculations === 0) {
                console.log(`‚úÖ –í—Å—ñ ${correctCalculations} —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ —Ü—ñ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ñ`);
            } else {
                console.log(`‚ö†Ô∏è  ${incorrectCalculations} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑ ${data.length}`);
            }
            
            return incorrectCalculations === 0;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü—ñ–π –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å
 */
async function testItemsStatistics() {
    console.log('\nüìã –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ü—ñ–π –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å');
    
    try {
        // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const { data: allItems, error } = await supabase
            .from('arrivals_items')
            .select('quality_grade, quantity, unit_price, total_price, storage_location')
            .limit(1000);
        
        if (!error) {
            console.log(`‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∑–∏—Ü—ñ–π: ${allItems.length}`);
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —è–∫–æ—Å—Ç—ñ
            const gradeStats = {};
            const locationStats = {};
            let totalQuantity = 0;
            let totalValue = 0;
            let itemsWithPrice = 0;
            
            allItems.forEach(item => {
                // –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —è–∫–æ—Å—Ç—ñ
                if (!gradeStats[item.quality_grade]) {
                    gradeStats[item.quality_grade] = { count: 0, quantity: 0 };
                }
                gradeStats[item.quality_grade].count++;
                gradeStats[item.quality_grade].quantity += item.quantity || 0;
                
                // –ú—ñ—Å—Ü—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è
                if (item.storage_location) {
                    locationStats[item.storage_location] = (locationStats[item.storage_location] || 0) + 1;
                }
                
                // –ó–∞–≥–∞–ª—å–Ω—ñ —Å—É–º–∏
                totalQuantity += item.quantity || 0;
                if (item.total_price) {
                    totalValue += parseFloat(item.total_price);
                    itemsWithPrice++;
                }
            });
            
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —è–∫–æ—Å—Ç—ñ:');
            Object.entries(gradeStats).forEach(([grade, stats]) => {
                console.log(`   - ${grade}: ${stats.count} –ø–æ–∑–∏—Ü—ñ–π, ${stats.quantity} –æ–¥–∏–Ω–∏—Ü—å`);
            });
            
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º—ñ—Å—Ü—è—Ö –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è:');
            Object.entries(locationStats).slice(0, 5).forEach(([location, count]) => {
                console.log(`   - ${location}: ${count} –ø–æ–∑–∏—Ü—ñ–π`);
            });
            
            console.log(`‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${totalQuantity} –æ–¥–∏–Ω–∏—Ü—å`);
            console.log(`‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: ${totalValue.toFixed(2)} –≥—Ä–Ω (${itemsWithPrice} –ø–æ–∑–∏—Ü—ñ–π –∑ —Ü—ñ–Ω–æ—é)`);
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 8: –ê–Ω–∞–ª—ñ–∑ —Ç–µ—Ä–º—ñ–Ω—ñ–≤ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ
 */
async function testExpiryAnalysis() {
    console.log('\nüìã –¢–µ—Å—Ç 8: –ê–Ω–∞–ª—ñ–∑ —Ç–µ—Ä–º—ñ–Ω—ñ–≤ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ');
    
    try {
        const { data, error } = await supabase
            .from('arrivals_items')
            .select('id, quantity, batch_date, expiry_date')
            .not('expiry_date', 'is', null)
            .limit(100);
        
        if (!error) {
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –ø–æ–∑–∏—Ü—ñ–π –∑ —Ç–µ—Ä–º—ñ–Ω–∞–º–∏ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ`);
            
            const now = new Date();
            const twoDaysFromNow = new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000);
            const sevenDaysFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
            
            let expired = 0;
            let expiringSoon = 0;
            let expiringWeek = 0;
            let fresh = 0;
            
            data.forEach(item => {
                const expiryDate = new Date(item.expiry_date);
                
                if (expiryDate < now) {
                    expired++;
                } else if (expiryDate <= twoDaysFromNow) {
                    expiringSoon++;
                } else if (expiryDate <= sevenDaysFromNow) {
                    expiringWeek++;
                } else {
                    fresh++;
                }
            });
            
            console.log('‚úÖ –ê–Ω–∞–ª—ñ–∑ —Ç–µ—Ä–º—ñ–Ω—ñ–≤ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ:');
            console.log(`   - –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ: ${expired} –ø–æ–∑–∏—Ü—ñ–π`);
            console.log(`   - –ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (‚â§2 –¥–Ω—ñ): ${expiringSoon} –ø–æ–∑–∏—Ü—ñ–π`);
            console.log(`   - –°–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (‚â§7 –¥–Ω—ñ–≤): ${expiringWeek} –ø–æ–∑–∏—Ü—ñ–π`);
            console.log(`   - –°–≤—ñ–∂–∏–π (>7 –¥–Ω—ñ–≤): ${fresh} –ø–æ–∑–∏—Ü—ñ–π`);
            
            if (expired > 0) {
                console.log('‚ö†Ô∏è  –£–≤–∞–≥–∞: —î –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó!');
            }
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç–µ—Ä–º—ñ–Ω—ñ–≤:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—ñ–≤:', err.message);
        return false;
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
 */
async function runAllTests() {
    let totalTests = 0;
    let passedTests = 0;
    
    const tests = [
        testTableExists,
        testTableStructure,
        testSampleData,
        testConstraints,
        testForeignKeys,
        testPriceCalculation,
        testItemsStatistics,
        testExpiryAnalysis
    ];
    
    for (const test of tests) {
        totalTests++;
        const result = await test();
        if (result) passedTests++;
    }
    
    console.log('\n' + '='.repeat(50));
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${passedTests}/${totalTests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedTests === totalTests) {
        console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è arrivals_items –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
    } else {
        console.log('‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ');
        console.log('‚ùå –¢–∞–±–ª–∏—Ü—è arrivals_items –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
    }
    
    return passedTests === totalTests;
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
if (require.main === module) {
    runAllTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { runAllTests };