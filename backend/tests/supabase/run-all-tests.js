#!/usr/bin/env node

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤ Supabase –º—ñ–≥—Ä–∞—Ü—ñ—ó
 * 
 * –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –≤–∏–∫–æ–Ω—É—î –≤—Å—ñ —Ç–µ—Å—Ç–∏ —Ç–∞ –ø–æ–∫–∞–∑—É—î –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * –ó–∞–ø—É—Å–∫: node tests/supabase/run-all-tests.js
 */

const { spawn } = require('child_process');
const path = require('path');

console.log('üß™ –ó–ê–ü–£–°–ö –í–°–Ü–• –¢–ï–°–¢–Ü–í SUPABASE –ú–Ü–ì–†–ê–¶–Ü–á');
console.log('=====================================\n');

// –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤ —É –ø–æ—Ä—è–¥–∫—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
const tests = [
    {
        name: '–¢–µ—Å—Ç –∑\'—î–¥–Ω–∞–Ω–Ω—è',
        file: 'test-connection.js',
        description: '–ë–∞–∑–æ–≤–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase'
    },
    {
        name: '–¢–µ—Å—Ç –∫–ª—ñ—î–Ω—Ç–∞',
        file: 'test-client.js', 
        description: 'Supabase JS –∫–ª—ñ—î–Ω—Ç'
    },
    {
        name: '–¢–∞–±–ª–∏—Ü—è products',
        file: 'test-products-table.js',
        description: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤'
    },
    {
        name: '–¢–∞–±–ª–∏—Ü—è clients',
        file: 'test-clients-table.js',
        description: '–ö–∞—Ç–∞–ª–æ–≥ –∫–ª—ñ—î–Ω—Ç—ñ–≤'
    },
    {
        name: '–¢–∞–±–ª–∏—Ü—è stock_movements',
        file: 'test-stock-movements-table.js',
        description: '–ñ—É—Ä–Ω–∞–ª —Ä—É—Ö—ñ–≤ –∑–∞–ø–∞—Å—ñ–≤'
    }
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–µ—Å—Ç–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –ø–æ –º—ñ—Ä—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
];

/**
 * –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
 */
function runTest(test) {
    return new Promise((resolve) => {
        console.log(`üîÑ –ó–∞–ø—É—Å–∫: ${test.name}`);
        console.log(`   ${test.description}`);
        
        const testPath = path.join(__dirname, test.file);
        const testProcess = spawn('node', [testPath], {
            stdio: 'pipe'
        });
        
        let output = '';
        let hasError = false;
        
        testProcess.stdout.on('data', (data) => {
            output += data.toString();
        });
        
        testProcess.stderr.on('data', (data) => {
            output += data.toString();
            hasError = true;
        });
        
        testProcess.on('close', (code) => {
            const success = code === 0 && !hasError;
            
            if (success) {
                console.log(`‚úÖ ${test.name}: –ü–†–û–ô–î–ï–ù–û\n`);
            } else {
                console.log(`‚ùå ${test.name}: –ü–û–ú–ò–õ–ö–ê`);
                console.log(`   –ö–æ–¥ –≤–∏—Ö–æ–¥—É: ${code}`);
                if (output.length > 0) {
                    // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Ä—è–¥–∫–∏ –¥–ª—è —Å—Ç–∏—Å–ª–æ—Å—Ç—ñ
                    const lines = output.trim().split('\n');
                    const lastLines = lines.slice(-3);
                    console.log(`   –í–∏–≤—ñ–¥: ${lastLines.join(', ')}`);
                }
                console.log('');
            }
            
            resolve({
                name: test.name,
                success,
                code,
                output: success ? '' : output
            });
        });
    });
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
 */
async function runAllTests() {
    const results = [];
    
    console.log(`üìã –í—Å—å–æ–≥–æ —Ç–µ—Å—Ç—ñ–≤ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${tests.length}\n`);
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
    for (const test of tests) {
        const result = await runTest(test);
        results.push(result);
        
        // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    // –ü—ñ–¥—Å—É–º–∫–∏
    console.log('üìä –ü–Ü–î–°–£–ú–ö–ò –í–°–Ü–• –¢–ï–°–¢–Ü–í');
    console.log('=======================');
    
    const successCount = results.filter(r => r.success).length;
    const totalCount = results.length;
    
    console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π—à–ª–∏`);
    
    if (successCount === totalCount) {
        console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('‚úÖ Supabase –º—ñ–≥—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ');
    } else {
        console.log('\n‚ùå –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:');
        results.filter(r => !r.success).forEach(result => {
            console.log(`   - ${result.name} (–∫–æ–¥: ${result.code})`);
        });
        console.log('\nüîß –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º');
    }
    
    console.log(`\nüìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫—É: ${new Date().toLocaleString('uk-UA')}`);
    
    return successCount === totalCount;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
    runAllTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤:', error);
            process.exit(1);
        });
}

module.exports = { runAllTests };