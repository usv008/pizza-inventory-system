#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ api_audit_log –≤ Supabase
 * 
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–±–æ—Ç—É –∑ —Ç–∞–±–ª–∏—Ü–µ—é api_audit_log
 * –ó–∞–ø—É—Å–∫: node tests/supabase/test-api-audit-log-table.js
 */

const { createClient } = require('@supabase/supabase-js');

// –î–∞–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
const SUPABASE_URL = 'https://wncukuajzygzyasofyoe.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InduY3VrdWFqenlnenlhc29meW9lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODUxNDE5MSwiZXhwIjoyMDY0MDkwMTkxfQ.arten1xRuJicEJEY7mHuet7eQqjuTb24VLwTtcB91yM';

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ api_audit_log –≤ Supabase...\n');

/**
 * –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableExists() {
    console.log('üìã –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ api_audit_log');
    
    try {
        const { data, error } = await supabase
            .from('api_audit_log')
            .select('*')
            .limit(1);
        
        if (!error) {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è api_audit_log —ñ—Å–Ω—É—î');
            return true;
        } else if (error.code === 'PGRST116') {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü—è api_audit_log –Ω–µ —ñ—Å–Ω—É—î');
            console.log('   –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é 014_create_api_audit_log_table.sql');
            return false;
        } else {
            console.log('‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableStructure() {
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ api_audit_log');
    
    try {
        const { data, error } = await supabase
            .from('api_audit_log')
            .select('*')
            .limit(0);
        
        if (!error) {
            console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–µ–∫—Ç–Ω–∞');
            console.log('   –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è: id, user_id, method, path, status_code, duration, success');
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 */
async function testSampleData() {
    console.log('\nüìã –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
    
    try {
        const { data, error } = await supabase
            .from('api_audit_log')
            .select('*')
            .order('created_at', { ascending: false });
        
        if (!error) {
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å—ñ–≤ API –ª–æ–≥—É`);
            
            if (data.length > 0) {
                console.log('   –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Å—ñ–≤:');
                data.slice(0, 3).forEach((log, index) => {
                    console.log(`   ${index + 1}. ${log.method} ${log.path} (${log.status_code}, ${log.duration}ms)`);
                });
            }
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JSONB –ø–æ–ª—ñ–≤
 */
async function testJsonbFields() {
    console.log('\nüìã –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JSONB –ø–æ–ª—ñ–≤ request_body —Ç–∞ response_body');
    
    try {
        const { data, error } = await supabase
            .from('api_audit_log')
            .select('id, method, path, request_body, response_body')
            .not('request_body', 'is', null)
            .limit(3);
        
        if (!error) {
            console.log(`‚úÖ JSONB –ø–æ–ª—è –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ`);
            console.log(`   –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ JSONB –¥–∞–Ω–∏–º–∏`);
            
            if (data.length > 0) {
                console.log('   –ü—Ä–∏–∫–ª–∞–¥ JSONB –¥–∞–Ω–∏—Ö:');
                data.forEach((log, index) => {
                    const reqBody = log.request_body ? '—î –¥–∞–Ω—ñ' : 'NULL';
                    const resBody = log.response_body ? '—î –¥–∞–Ω—ñ' : 'NULL';
                    console.log(`   ${index + 1}. ${log.method} ${log.path}: request(${reqBody}), response(${resBody})`);
                });
            }
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ JSONB –ø–æ–ª—ñ–≤:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è JSONB:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –∑–≤'—è–∑–∫—ñ–≤
 */
async function testForeignKeys() {
    console.log('\nüìã –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –∑–≤\'—è–∑–∫—ñ–≤ –∑ users');
    
    try {
        const { data, error } = await supabase
            .from('api_audit_log')
            .select(`
                id,
                method,
                path,
                user_id,
                users:user_id (
                    id,
                    username,
                    role
                )
            `)
            .not('user_id', 'is', null)
            .limit(3);
        
        if (!error) {
            console.log('‚úÖ Foreign key –∑–≤\'—è–∑–∫–∏ –∑ users –ø—Ä–∞—Ü—é—é—Ç—å');
            console.log(`   –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏`);
            
            if (data.length > 0) {
                console.log('   –ü—Ä–∏–∫–ª–∞–¥ –∑–≤\'—è–∑–∫—ñ–≤:');
                data.forEach((log, index) => {
                    const user = log.users;
                    console.log(`   ${index + 1}. ${log.method} ${log.path} ‚Üí user: ${user ? user.username : 'NULL'} (${user ? user.role : 'N/A'})`);
                });
            }
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ foreign key –∑–≤\'—è–∑–∫—ñ–≤:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è FK:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –∑–∞–ø–∏—Ç—ñ–≤
 */
async function testApiStatistics() {
    console.log('\nüìã –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API –∑–∞–ø–∏—Ç—ñ–≤');
    
    try {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞—Ö
        const { data: allLogs, error } = await supabase
            .from('api_audit_log')
            .select('method, success, duration, status_code')
            .limit(1000);
        
        if (!error) {
            console.log(`‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: ${allLogs.length}`);
            
            // –ì—Ä—É–ø—É—î–º–æ –ø–æ –º–µ—Ç–æ–¥–∞—Ö
            const methodStats = {};
            const statusStats = {};
            let totalDuration = 0;
            let durationCount = 0;
            
            allLogs.forEach(log => {
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞—Ö
                if (!methodStats[log.method]) {
                    methodStats[log.method] = { total: 0, success: 0, failed: 0 };
                }
                methodStats[log.method].total++;
                if (log.success) {
                    methodStats[log.method].success++;
                } else {
                    methodStats[log.method].failed++;
                }
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞—Ö
                statusStats[log.status_code] = (statusStats[log.status_code] || 0) + 1;
                
                // –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
                if (log.duration) {
                    totalDuration += log.duration;
                    durationCount++;
                }
            });
            
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ HTTP –º–µ—Ç–æ–¥–∞—Ö:');
            Object.entries(methodStats).forEach(([method, stats]) => {
                console.log(`   - ${method}: ${stats.total} (success: ${stats.success}, failed: ${stats.failed})`);
            });
            
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞—Ö:');
            Object.entries(statusStats).forEach(([code, count]) => {
                console.log(`   - ${code}: ${count} –∑–∞–ø–∏—Ç—ñ–≤`);
            });
            
            if (durationCount > 0) {
                const avgDuration = Math.round(totalDuration / durationCount);
                console.log(`‚úÖ –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—É: ${avgDuration}ms`);
            }
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err.message);
        return false;
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
 */
async function runAllTests() {
    let totalTests = 0;
    let passedTests = 0;
    
    const tests = [
        testTableExists,
        testTableStructure,
        testSampleData,
        testJsonbFields,
        testForeignKeys,
        testApiStatistics
    ];
    
    for (const test of tests) {
        totalTests++;
        const result = await test();
        if (result) passedTests++;
    }
    
    console.log('\n' + '='.repeat(50));
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${passedTests}/${totalTests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedTests === totalTests) {
        console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è api_audit_log –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
    } else {
        console.log('‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ');
        console.log('‚ùå –¢–∞–±–ª–∏—Ü—è api_audit_log –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
    }
    
    return passedTests === totalTests;
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
if (require.main === module) {
    runAllTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { runAllTests };