#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ user_sessions –≤ Supabase
 * 
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–±–æ—Ç—É –∑ —Ç–∞–±–ª–∏—Ü–µ—é user_sessions
 * –ó–∞–ø—É—Å–∫: node tests/supabase/test-user-sessions-table.js
 */

const { createClient } = require('@supabase/supabase-js');

// –î–∞–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
const SUPABASE_URL = 'https://wncukuajzygzyasofyoe.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InduY3VrdWFqenlnenlhc29meW9lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODUxNDE5MSwiZXhwIjoyMDY0MDkwMTkxfQ.arten1xRuJicEJEY7mHuet7eQqjuTb24VLwTtcB91yM';

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ user_sessions –≤ Supabase...\n');

/**
 * –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableExists() {
    console.log('üìã –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ user_sessions');
    
    try {
        const { data, error } = await supabase
            .from('user_sessions')
            .select('*')
            .limit(1);
        
        if (!error) {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è user_sessions —ñ—Å–Ω—É—î');
            console.log(`   –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π`);
            return true;
        } else if (error.code === 'PGRST116') {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü—è user_sessions –Ω–µ —ñ—Å–Ω—É—î');
            console.log('   –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é 011_create_user_sessions_table.sql');
            return false;
        } else {
            console.log('‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ:');
            console.log(`   –ö–æ–¥: ${error.code}`);
            console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableStructure() {
    console.log('\nüèóÔ∏è  –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ');
    
    try {
        const { data, error } = await supabase
            .from('user_sessions')
            .select('id, session_id, user_id, created_at, expires_at, ip_address, user_agent, active, last_accessed_at, created_by_user_id')
            .limit(1);
        
        if (!error) {
            console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–∞');
            console.log('   –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ');
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ:');
            console.log(`   –ö–æ–¥: ${error.code}`);
            console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 */
async function testSampleData() {
    console.log('\nüìä –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
    
    try {
        const { data, error } = await supabase
            .from('user_sessions')
            .select('*');
        
        if (!error && data) {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ');
            console.log(`   –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Å—ñ–π: ${data.length}`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Å–µ—Å—ñ–π
            const activeSessions = data.filter(s => s.active);
            const expiredSessions = data.filter(s => new Date(s.expires_at) <= new Date());
            
            console.log(`   –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: ${activeSessions.length}`);
            console.log(`   –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö —Å–µ—Å—ñ–π: ${expiredSessions.length}`);
            
            if (data.length >= 3) {
                console.log('   ‚úÖ –î–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
                return true;
            } else {
                console.log('   ‚ö†Ô∏è  –ú–∞–ª–æ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
                return data.length > 0;
            }
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:');
            if (error) {
                console.log(`   –ö–æ–¥: ${error.code}`);
                console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            }
            return false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –Ω–∞ users
 */
async function testForeignKeyConstraint() {
    console.log('\nüîó –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –∑–≤\'—è–∑–∫—É –∑ users');
    
    try {
        const { data, error } = await supabase
            .from('user_sessions')
            .select(`
                id,
                session_id,
                user_id,
                active,
                expires_at,
                users!user_sessions_user_id_fkey (
                    id,
                    username,
                    role
                )
            `);
        
        if (!error && data) {
            console.log('‚úÖ Foreign key –∑–≤\'—è–∑–æ–∫ –ø—Ä–∞—Ü—é—î');
            console.log(`   –°–µ—Å—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏: ${data.length}`);
            
            data.forEach(session => {
                if (session.users) {
                    console.log(`   –°–µ—Å—ñ—è ${session.session_id.substr(0, 12)}... ‚Üí ${session.users.username} (${session.users.role})`);
                } else {
                    console.log(`   ‚ö†Ô∏è  –°–µ—Å—ñ—è ${session.session_id} –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`);
                }
            });
            
            return true;
        } else {
            console.log('‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –∑ foreign key:');
            if (error) {
                console.log(`   –ö–æ–¥: ${error.code}`);
                console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            }
            return data ? data.length > 0 : false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ foreign key:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ INET —Ç–∏–ø—É –¥–ª—è IP –∞–¥—Ä–µ—Å
 */
async function testInetType() {
    console.log('\nüåê –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ INET —Ç–∏–ø—É –¥–ª—è IP –∞–¥—Ä–µ—Å');
    
    try {
        const { data, error } = await supabase
            .from('user_sessions')
            .select('session_id, ip_address')
            .not('ip_address', 'is', null);
        
        if (!error && data) {
            console.log('‚úÖ INET —Ç–∏–ø –ø—Ä–∞—Ü—é—î');
            console.log(`   –°–µ—Å—ñ–π –∑ IP –∞–¥—Ä–µ—Å–∞–º–∏: ${data.length}`);
            
            data.forEach(session => {
                console.log(`   ${session.session_id.substr(0, 12)}... ‚Üí IP: ${session.ip_address}`);
            });
            
            return true;
        } else {
            console.log('‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –∑ INET —Ç–∏–ø–æ–º:');
            if (error) {
                console.log(`   –ö–æ–¥: ${error.code}`);
                console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            }
            return data ? data.length === 0 : false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ INET:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ session_id
 */
async function testUniqueConstraint() {
    console.log('\nüÜî –¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ session_id');
    
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ session_id
        const { data, error } = await supabase
            .from('user_sessions')
            .select('session_id');
        
        if (!error && data) {
            const sessionIds = data.map(s => s.session_id);
            const uniqueSessionIds = [...new Set(sessionIds)];
            
            if (sessionIds.length === uniqueSessionIds.length) {
                console.log('‚úÖ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å session_id –ø—Ä–∞—Ü—é—î');
                console.log(`   –í—Å—ñ ${sessionIds.length} session_id —É–Ω—ñ–∫–∞–ª—å–Ω—ñ`);
                return true;
            } else {
                console.log('‚ùå –î—É–±–ª—ñ–∫–∞—Ç–∏ session_id –∑–Ω–∞–π–¥–µ–Ω—ñ');
                console.log(`   –ó–∞–≥–∞–ª—å–Ω–∏—Ö: ${sessionIds.length}, —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö: ${uniqueSessionIds.length}`);
                return false;
            }
        } else {
            console.log('‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ:');
            if (error) {
                console.log(`   –ö–æ–¥: ${error.code}`);
                console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            }
            return false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
async function runUserSessionsTests() {
    console.log('üéØ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü USER_SESSIONS');
    console.log('====================================');
    console.log(`üìç –ü—Ä–æ–µ–∫—Ç: wncukuajzygzyasofyoe`);
    console.log(`üóÑÔ∏è  –¢–∞–±–ª–∏—Ü—è: public.user_sessions`);
    console.log(`üîó –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: users —Ç–∞–±–ª–∏—Ü—è`);
    console.log('====================================\n');

    const results = [];
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
    results.push(await testTableExists());
    
    if (results[0]) {
        results.push(await testTableStructure());
        results.push(await testSampleData());
        results.push(await testForeignKeyConstraint());
        results.push(await testInetType());
        results.push(await testUniqueConstraint());
    } else {
        // –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—è –Ω–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—à—ñ —Ç–µ—Å—Ç–∏
        results.push(false, false, false, false, false);
    }
    
    // –ü—ñ–¥—Å—É–º–∫–∏
    console.log('\nüìä –ü–Ü–î–°–£–ú–ö–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø USER_SESSIONS');
    console.log('====================================');
    
    const successCount = results.filter(r => r).length;
    const totalCount = results.length;
    
    if (successCount === totalCount) {
        console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ user_sessions –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
        console.log('üîÑ –°–∏—Å—Ç–µ–º–∞ —Å–µ—Å—ñ–π –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ');
    } else if (results[0] === false) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü—è user_sessions –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        console.log('üìã –ü–æ—Ç—Ä—ñ–±–Ω–æ:');
        console.log('   1. –í—ñ–¥–∫—Ä–∏—Ç–∏ Supabase Dashboard');
        console.log('   2. –ü–µ—Ä–µ–π—Ç–∏ –≤ SQL Editor');
        console.log('   3. –í–∏–∫–æ–Ω–∞—Ç–∏ SQL –∑ —Ñ–∞–π–ª—É migrations/supabase/011_create_user_sessions_table.sql');
    } else if (successCount >= 4) {
        console.log('‚ö†Ô∏è  –ß–∞—Å—Ç–∫–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ - –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å');
        console.log('‚úÖ –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é');
    } else {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ user_sessions');
        console.log('üõë –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏');
    }
    
    console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π—à–ª–∏`);
    
    return successCount >= 4;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
    runUserSessionsTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { runUserSessionsTests };