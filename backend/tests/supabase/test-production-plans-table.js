#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ production_plans –≤ Supabase
 * 
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–±–æ—Ç—É –∑ —Ç–∞–±–ª–∏—Ü–µ—é production_plans
 * –ó–∞–ø—É—Å–∫: node tests/supabase/test-production-plans-table.js
 */

const { createClient } = require('@supabase/supabase-js');

// –î–∞–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
const SUPABASE_URL = 'https://wncukuajzygzyasofyoe.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InduY3VrdWFqenlnenlhc29meW9lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODUxNDE5MSwiZXhwIjoyMDY0MDkwMTkxfQ.arten1xRuJicEJEY7mHuet7eQqjuTb24VLwTtcB91yM';

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_plans –≤ Supabase...\n');

/**
 * –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableExists() {
    console.log('üìã –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_plans');
    
    try {
        const { data, error } = await supabase
            .from('production_plans')
            .select('*')
            .limit(1);
        
        if (!error) {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è production_plans —ñ—Å–Ω—É—î');
            return true;
        } else if (error.code === 'PGRST116') {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü—è production_plans –Ω–µ —ñ—Å–Ω—É—î');
            console.log('   –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é 015_create_production_plans_table.sql');
            return false;
        } else {
            console.log('‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableStructure() {
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ production_plans');
    
    try {
        const { data, error } = await supabase
            .from('production_plans')
            .select('*')
            .limit(0);
        
        if (!error) {
            console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–µ–∫—Ç–Ω–∞');
            console.log('   –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è: id, plan_date, status, total_planned, total_produced');
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 */
async function testSampleData() {
    console.log('\nüìã –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
    
    try {
        const { data, error } = await supabase
            .from('production_plans')
            .select('*')
            .order('plan_date', { ascending: false });
        
        if (!error) {
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –ø–ª–∞–Ω—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞`);
            
            if (data.length > 0) {
                console.log('   –ü—Ä–∏–∫–ª–∞–¥ –ø–ª–∞–Ω—ñ–≤:');
                data.slice(0, 3).forEach((plan, index) => {
                    const completion = plan.total_planned > 0 
                        ? Math.round((plan.total_produced / plan.total_planned) * 100) 
                        : 0;
                    
                    console.log(`   ${index + 1}. ${plan.plan_date} (${plan.status}): ${plan.total_produced}/${plan.total_planned} (${completion}%)`);
                });
            }
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤ —Ç–∞ CHECK constraints
 */
async function testStatusConstraints() {
    console.log('\nüìã –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—ñ–≤ —Ç–∞ –æ–±–º–µ–∂–µ–Ω—å');
    
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏
        const { data, error } = await supabase
            .from('production_plans')
            .select('status')
            .limit(100);
        
        if (!error) {
            const statuses = [...new Set(data.map(plan => plan.status))];
            const validStatuses = ['DRAFT', 'APPROVED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED'];
            
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–∏: ${statuses.join(', ')}`);
            
            const invalidStatuses = statuses.filter(status => !validStatuses.includes(status));
            if (invalidStatuses.length === 0) {
                console.log('‚úÖ –í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å CHECK constraint');
            } else {
                console.log(`‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Å—Ç–∞—Ç—É—Å–∏: ${invalidStatuses.join(', ')}`);
            }
            
            return invalidStatuses.length === 0;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—ñ–≤:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –∑–≤'—è–∑–∫—ñ–≤
 */
async function testForeignKeys() {
    console.log('\nüìã –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –∑–≤\'—è–∑–∫—ñ–≤ –∑ users');
    
    try {
        const { data, error } = await supabase
            .from('production_plans')
            .select(`
                id,
                plan_date,
                status,
                created_by_user_id,
                approved_by_user_id,
                creator:created_by_user_id (
                    id,
                    username,
                    role
                ),
                approver:approved_by_user_id (
                    id,
                    username,
                    role
                )
            `)
            .limit(5);
        
        if (!error) {
            console.log('‚úÖ Foreign key –∑–≤\'—è–∑–∫–∏ –∑ users –ø—Ä–∞—Ü—é—é—Ç—å');
            console.log(`   –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –ø–ª–∞–Ω—ñ–≤ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏`);
            
            if (data.length > 0) {
                console.log('   –ü—Ä–∏–∫–ª–∞–¥ –∑–≤\'—è–∑–∫—ñ–≤:');
                data.forEach((plan, index) => {
                    const creator = plan.creator;
                    const approver = plan.approver;
                    console.log(`   ${index + 1}. ${plan.plan_date} (${plan.status})`);
                    console.log(`      Created by: ${creator ? creator.username : 'NULL'} (${creator ? creator.role : 'N/A'})`);
                    console.log(`      Approved by: ${approver ? approver.username : 'NULL'} (${approver ? approver.role : 'N/A'})`);
                });
            }
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ foreign key –∑–≤\'—è–∑–∫—ñ–≤:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è FK:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
 */
async function testProductionStatistics() {
    console.log('\nüìã –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞');
    
    try {
        // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const { data: allPlans, error } = await supabase
            .from('production_plans')
            .select('status, total_planned, total_produced')
            .limit(1000);
        
        if (!error) {
            console.log(`‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–ª–∞–Ω—ñ–≤: ${allPlans.length}`);
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
            const statusStats = {};
            let totalPlanned = 0;
            let totalProduced = 0;
            
            allPlans.forEach(plan => {
                if (!statusStats[plan.status]) {
                    statusStats[plan.status] = { count: 0, planned: 0, produced: 0 };
                }
                statusStats[plan.status].count++;
                statusStats[plan.status].planned += plan.total_planned || 0;
                statusStats[plan.status].produced += plan.total_produced || 0;
                
                totalPlanned += plan.total_planned || 0;
                totalProduced += plan.total_produced || 0;
            });
            
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö:');
            Object.entries(statusStats).forEach(([status, stats]) => {
                const completion = stats.planned > 0 
                    ? Math.round((stats.produced / stats.planned) * 100) 
                    : 0;
                console.log(`   - ${status}: ${stats.count} –ø–ª–∞–Ω—ñ–≤, ${stats.produced}/${stats.planned} (${completion}%)`);
            });
            
            const overallCompletion = totalPlanned > 0 
                ? Math.round((totalProduced / totalPlanned) * 100) 
                : 0;
            console.log(`‚úÖ –ó–∞–≥–∞–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${totalProduced}/${totalPlanned} (${overallCompletion}%)`);
            
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err.message);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 7: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É –Ω–∞ –¥–∞—Ç—É
 */
async function testUniqueConstraint() {
    console.log('\nüìã –¢–µ—Å—Ç 7: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É –Ω–∞ –¥–∞—Ç—É');
    
    try {
        // –ì—Ä—É–ø—É—î–º–æ –ø–æ –¥–∞—Ç–∞—Ö (–≤–∏–∫–ª—é—á–∞—é—á–∏ CANCELLED)
        const { data, error } = await supabase
            .from('production_plans')
            .select('plan_date, status')
            .neq('status', 'CANCELLED')
            .limit(1000);
        
        if (!error) {
            const dateGroups = {};
            
            data.forEach(plan => {
                if (!dateGroups[plan.plan_date]) {
                    dateGroups[plan.plan_date] = [];
                }
                dateGroups[plan.plan_date].push(plan.status);
            });
            
            const duplicateDates = Object.entries(dateGroups)
                .filter(([date, statuses]) => statuses.length > 1);
            
            if (duplicateDates.length === 0) {
                console.log('‚úÖ –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ –¥–∞—Ç—É –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ');
                console.log('   –ù–µ–º–∞—î –¥—É–±–ª—é—é—á–∏—Ö –ø–ª–∞–Ω—ñ–≤ –Ω–∞ –æ–¥–Ω—É –¥–∞—Ç—É (–æ–∫—Ä—ñ–º CANCELLED)');
            } else {
                console.log('‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—é—é—á—ñ –¥–∞—Ç–∏:');
                duplicateDates.forEach(([date, statuses]) => {
                    console.log(`   - ${date}: —Å—Ç–∞—Ç—É—Å–∏ ${statuses.join(', ')}`);
                });
            }
            
            return duplicateDates.length === 0;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ:', error.message);
            return false;
        }
    } catch (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ:', err.message);
        return false;
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
 */
async function runAllTests() {
    let totalTests = 0;
    let passedTests = 0;
    
    const tests = [
        testTableExists,
        testTableStructure,
        testSampleData,
        testStatusConstraints,
        testForeignKeys,
        testProductionStatistics,
        testUniqueConstraint
    ];
    
    for (const test of tests) {
        totalTests++;
        const result = await test();
        if (result) passedTests++;
    }
    
    console.log('\n' + '='.repeat(50));
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${passedTests}/${totalTests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedTests === totalTests) {
        console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è production_plans –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
    } else {
        console.log('‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ');
        console.log('‚ùå –¢–∞–±–ª–∏—Ü—è production_plans –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
    }
    
    return passedTests === totalTests;
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
if (require.main === module) {
    runAllTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { runAllTests };