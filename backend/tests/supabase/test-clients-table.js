#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ñ clients –≤ Supabase
 * 
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–±–æ—Ç—É –∑ —Ç–∞–±–ª–∏—Ü–µ—é clients
 * –ó–∞–ø—É—Å–∫: node tests/supabase/test-clients-table.js
 */

const { createClient } = require('@supabase/supabase-js');

// –î–∞–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
const SUPABASE_URL = 'https://wncukuajzygzyasofyoe.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InduY3VrdWFqenlnenlhc29meW9lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODUxNDE5MSwiZXhwIjoyMDY0MDkwMTkxfQ.arten1xRuJicEJEY7mHuet7eQqjuTb24VLwTtcB91yM';

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª—ñ—î–Ω—Ç
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
});

console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ clients –≤ Supabase...\n');

/**
 * –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableExists() {
    console.log('üìã –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ clients');
    
    try {
        const { data, error } = await supabase
            .from('clients')
            .select('*')
            .limit(1);
        
        if (!error) {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è clients —ñ—Å–Ω—É—î');
            console.log(`   –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π`);
            return true;
        } else if (error.code === 'PGRST116') {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü—è clients –Ω–µ —ñ—Å–Ω—É—î');
            console.log('   –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –≤ Supabase Dashboard');
            return false;
        } else {
            console.log('‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ:');
            console.log(`   –ö–æ–¥: ${error.code}`);
            console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ
 */
async function testTableStructure() {
    console.log('\nüèóÔ∏è  –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ');
    
    try {
        const { data, error } = await supabase
            .from('clients')
            .select('id, name, contact_person, phone, email, address, notes, is_active, created_at, updated_at')
            .limit(1);
        
        if (!error) {
            console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–∞');
            console.log('   –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ');
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ:');
            console.log(`   –ö–æ–¥: ${error.code}`);
            console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 */
async function testTestData() {
    console.log('\nüìä –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
    
    try {
        const { data, error } = await supabase
            .from('clients')
            .select('*')
            .order('created_at');
        
        if (!error && data) {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ');
            console.log(`   –ó–Ω–∞–π–¥–µ–Ω–æ ${data.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö
            const activeClients = data.filter(c => c.is_active).length;
            const inactiveClients = data.filter(c => !c.is_active).length;
            
            console.log(`   –ê–∫—Ç–∏–≤–Ω–∏—Ö: ${activeClients}, –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: ${inactiveClients}`);
            
            if (data.length > 0) {
                console.log('   –ü—Ä–∏–∫–ª–∞–¥–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤:');
                data.slice(0, 3).forEach((client, index) => {
                    const status = client.is_active ? '‚úÖ' : '‚ùå';
                    console.log(`   ${index + 1}. ${client.name} (${client.contact_person}) ${status}`);
                });
            }
            
            return true;
        } else {
            console.log('‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:');
            if (error) {
                console.log(`   –ö–æ–¥: ${error.code}`);
                console.log(`   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${error.message}`);
            }
            return data ? data.length === 0 : false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ soft delete —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
 */
async function testSoftDelete() {
    console.log('\nüóëÔ∏è  –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ soft delete (is_active)');
    
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
        const { data: activeData, error: activeError } = await supabase
            .from('clients')
            .select('*')
            .eq('is_active', true);
        
        const { data: inactiveData, error: inactiveError } = await supabase
            .from('clients')
            .select('*')
            .eq('is_active', false);
        
        if (!activeError && !inactiveError) {
            console.log('‚úÖ Soft delete —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–∞—Ü—é—î');
            console.log(`   –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${activeData.length}`);
            console.log(`   –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${inactiveData.length}`);
            return true;
        } else {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ soft delete:');
            console.log(`   Active error: ${activeError?.message}`);
            console.log(`   Inactive error: ${inactiveError?.message}`);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ soft delete:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π CRUD
 */
async function testCRUDOperations() {
    console.log('\n‚öôÔ∏è  –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π CRUD');
    
    try {
        // CREATE - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        const { data: insertData, error: insertError } = await supabase
            .from('clients')
            .insert({
                name: 'CRUD –¢–µ—Å—Ç –ö–ª—ñ—î–Ω—Ç',
                contact_person: '–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á',
                phone: '+380999999999',
                email: 'crud-test@example.com',
                address: '–¢–µ—Å—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞, 123',
                notes: '–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π',
                is_active: true
            })
            .select();
        
        if (insertError) {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (CREATE):');
            console.log(`   ${insertError.message}`);
            return false;
        }
        
        const testId = insertData[0].id;
        console.log('‚úÖ CREATE: –ö–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        
        // READ - –ß–∏—Ç–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
        const { data: readData, error: readError } = await supabase
            .from('clients')
            .select('*')
            .eq('id', testId)
            .single();
        
        if (readError || !readData) {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è (READ):');
            console.log(`   ${readError?.message || '–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
            return false;
        }
        
        console.log('‚úÖ READ: –ö–ª—ñ—î–Ω—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        
        // UPDATE - –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
        const { error: updateError } = await supabase
            .from('clients')
            .update({
                phone: '+380888888888',
                notes: '–û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞'
            })
            .eq('id', testId);
        
        if (updateError) {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (UPDATE):');
            console.log(`   ${updateError.message}`);
            return false;
        }
        
        console.log('‚úÖ UPDATE: –ö–ª—ñ—î–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        
        // Soft DELETE - –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
        const { error: softDeleteError } = await supabase
            .from('clients')
            .update({ is_active: false })
            .eq('id', testId);
        
        if (softDeleteError) {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ soft delete:');
            console.log(`   ${softDeleteError.message}`);
            return false;
        }
        
        console.log('‚úÖ SOFT DELETE: –ö–ª—ñ—î–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        
        // DELETE - –ü–æ–≤–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        const { error: deleteError } = await supabase
            .from('clients')
            .delete()
            .eq('id', testId);
        
        if (deleteError) {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è (DELETE):');
            console.log(`   ${deleteError.message}`);
            return false;
        }
        
        console.log('‚úÖ DELETE: –ö–ª—ñ—î–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        console.log('‚úÖ –í—Å—ñ CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å');
        
        return true;
    } catch (error) {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ CRUD —Ç–µ—Å—Ç—ñ–≤:');
        console.log(`   ${error.message}`);
        return false;
    }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
 */
async function runClientsTests() {
    console.log('üéØ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –¢–ê–ë–õ–ò–¶–Ü CLIENTS');
    console.log('==============================');
    console.log(`üìç –ü—Ä–æ–µ–∫—Ç: wncukuajzygzyasofyoe`);
    console.log(`üóÑÔ∏è  –¢–∞–±–ª–∏—Ü—è: public.clients`);
    console.log('==============================\n');

    const results = [];
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ
    results.push(await testTableExists());
    
    if (results[0]) {
        results.push(await testTableStructure());
        results.push(await testTestData());
        results.push(await testSoftDelete());
        results.push(await testCRUDOperations());
    } else {
        // –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—è –Ω–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—à—ñ —Ç–µ—Å—Ç–∏
        results.push(false, false, false, false);
    }
    
    // –ü—ñ–¥—Å—É–º–∫–∏
    console.log('\nüìä –ü–Ü–î–°–£–ú–ö–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø CLIENTS');
    console.log('================================');
    
    const successCount = results.filter(r => r).length;
    const totalCount = results.length;
    
    if (successCount === totalCount) {
        console.log('üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ clients –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
        console.log('üîÑ –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
    } else if (results[0] === false) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü—è clients –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        console.log('üìã –ü–æ—Ç—Ä—ñ–±–Ω–æ:');
        console.log('   1. –í—ñ–¥–∫—Ä–∏—Ç–∏ Supabase Dashboard');
        console.log('   2. –ü–µ—Ä–µ–π—Ç–∏ –≤ SQL Editor');
        console.log('   3. –í–∏–∫–æ–Ω–∞—Ç–∏ SQL –∑ —Ñ–∞–π–ª—É migrations/supabase/002_create_clients_table.sql');
    } else if (successCount >= 3) {
        console.log('‚ö†Ô∏è  –ß–∞—Å—Ç–∫–æ–≤–æ —É—Å–ø—ñ—à–Ω–æ - –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å');
        console.log('‚úÖ –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é');
    } else {
        console.log('‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ clients');
        console.log('üõë –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏');
    }
    
    console.log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π—à–ª–∏`);
    
    return successCount >= 3;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
    runClientsTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { runClientsTests };