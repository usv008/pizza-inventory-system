const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'pizza_pizza_inventory.db');
const db = new sqlite3.Database(dbPath);

db.serialize(() => {
    console.log('üîê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');

    // –û—Å–Ω–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        email TEXT UNIQUE,
        phone TEXT,
        password_hash TEXT NULL,
        role TEXT NOT NULL DEFAULT '–ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö',
        permissions TEXT NOT NULL DEFAULT '{}',
        first_login INTEGER DEFAULT 1,
        active INTEGER DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        created_by INTEGER,
        FOREIGN KEY (created_by) REFERENCES users (id)
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ users:', err);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è users —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        }
    });

    // –¢–∞–±–ª–∏—Ü—è —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    db.run(`CREATE TABLE IF NOT EXISTS user_sessions (
        session_id TEXT PRIMARY KEY,
        user_id INTEGER NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        expires_at DATETIME NOT NULL,
        ip_address TEXT,
        user_agent TEXT,
        active INTEGER DEFAULT 1,
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ user_sessions:', err);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è user_sessions —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        }
    });

    // –¢–∞–±–ª–∏—Ü—è –∞—É–¥–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    db.run(`CREATE TABLE IF NOT EXISTS user_audit (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        action TEXT NOT NULL,
        details TEXT,
        ip_address TEXT,
        user_agent TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ user_audit:', err);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è user_audit —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        }
    });

    // –¢–∞–±–ª–∏—Ü—è –∞—É–¥–∏—Ç—É API –≤–∏–∫–ª–∏–∫—ñ–≤
    db.run(`CREATE TABLE IF NOT EXISTS api_audit_log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        method TEXT NOT NULL,
        path TEXT NOT NULL,
        ip_address TEXT,
        user_agent TEXT,
        status_code INTEGER,
        duration INTEGER,
        success INTEGER DEFAULT 0,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ api_audit_log:', err);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è api_audit_log —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        }
    });

    // –¢–∞–±–ª–∏—Ü—è –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏
    db.run(`CREATE TABLE IF NOT EXISTS security_events (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        event_type TEXT NOT NULL,
        user_id INTEGER,
        ip_address TEXT,
        details TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id)
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ security_events:', err);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è security_events —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        }
    });

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    db.run(`CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_users_username:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_users_username —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_users_email:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_users_email —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_users_role ON users(role)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_users_role:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_users_role —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_users_active ON users(active)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_users_active:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_users_active —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_user_sessions_user_id:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_user_sessions_user_id —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_user_sessions_expires ON user_sessions(expires_at)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_user_sessions_expires:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_user_sessions_expires —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_api_audit_user_id ON api_audit_log(user_id)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_api_audit_user_id:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_api_audit_user_id —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_api_audit_timestamp ON api_audit_log(timestamp)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_api_audit_timestamp:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_api_audit_timestamp —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_security_events_type ON security_events(event_type)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_security_events_type:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_security_events_type —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_security_events_timestamp ON security_events(timestamp)`, (err) => {
        if (err) console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É idx_security_events_timestamp:', err);
        else console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å idx_security_events_timestamp —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    });

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db.run(`INSERT OR IGNORE INTO users 
        (username, email, role, permissions, first_login, active, password_hash) 
        VALUES 
        ('admin', 'admin@pizza.com', '–î–ò–†–ï–ö–¢–û–†', '{"admin": {"all_rights": true}}', 1, 1, NULL)`, 
    (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err);
        } else {
            console.log('‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á admin —Å—Ç–≤–æ—Ä–µ–Ω–∏–π (–ø–∞—Ä–æ–ª—å –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤—Ö–æ–¥—ñ)');
        }
    });

    console.log('üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    db.close();
}); 