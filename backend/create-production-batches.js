// –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª create-production-batches.js –≤ –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'pizza_inventory.db');
console.log('üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ø–∞—Ä—Ç—ñ–π...');

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', err.message);
        process.exit(1);
    }
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –ë–î');
});

db.serialize(() => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–∞—Ä—Ç—ñ–π
    db.run(`CREATE TABLE IF NOT EXISTS production_batches (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER NOT NULL,
        batch_date DATE NOT NULL,
        production_date DATE NOT NULL,
        total_quantity INTEGER NOT NULL,
        available_quantity INTEGER NOT NULL DEFAULT 0,
        reserved_quantity INTEGER NOT NULL DEFAULT 0,
        used_quantity INTEGER NOT NULL DEFAULT 0,
        expiry_date DATE NOT NULL,
        production_id INTEGER,
        status TEXT DEFAULT 'ACTIVE',
        notes TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products (id),
        FOREIGN KEY (production_id) REFERENCES production (id)
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_batches:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è production_batches —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
        }
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
    db.run(`CREATE INDEX IF NOT EXISTS idx_production_batches_product_date 
            ON production_batches (product_id, batch_date)`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É product_date:', err.message);
        } else {
            console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å product_date —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }
    });
        
    db.run(`CREATE INDEX IF NOT EXISTS idx_production_batches_expiry 
            ON production_batches (expiry_date, status)`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É expiry:', err.message);
        } else {
            console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å expiry —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }
    });
        
    db.run(`CREATE INDEX IF NOT EXISTS idx_production_batches_available 
            ON production_batches (product_id, available_quantity, status)`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É available:', err.message);
        } else {
            console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å available —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }
    });

    // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ allocated_batches –¥–æ order_items —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    db.run(`ALTER TABLE order_items ADD COLUMN allocated_batches TEXT DEFAULT '[]'`, (err) => {
        if (err && !err.message.includes('duplicate column')) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–ª—è allocated_batches:', err.message);
        } else {
            console.log('‚úÖ –ü–æ–ª–µ allocated_batches –¥–æ–¥–∞–Ω–æ –¥–æ order_items');
        }
    });

    // –î–æ–¥–∞—î–º–æ –ø–æ–ª—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –≤ stock_movements
    db.run(`ALTER TABLE stock_movements ADD COLUMN batch_id INTEGER`, (err) => {
        if (err && !err.message.includes('duplicate column')) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–ª—è batch_id:', err.message);
        } else {
            console.log('‚úÖ –ü–æ–ª–µ batch_id –¥–æ–¥–∞–Ω–æ –¥–æ stock_movements');
        }
    });

    db.run(`ALTER TABLE stock_movements ADD COLUMN batch_date DATE`, (err) => {
        if (err && !err.message.includes('duplicate column')) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–ª—è batch_date:', err.message);
        } else {
            console.log('‚úÖ –ü–æ–ª–µ batch_date –¥–æ–¥–∞–Ω–æ –¥–æ stock_movements');
        }
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑—ñ stock_pieces > 0
    db.run(`INSERT INTO production_batches 
            (product_id, batch_date, production_date, total_quantity, available_quantity, expiry_date, status, notes)
            SELECT 
                id as product_id,
                date('now', '-30 days') as batch_date,
                date('now', '-30 days') as production_date,
                stock_pieces as total_quantity,
                stock_pieces as available_quantity,
                date('now', '+300 days') as expiry_date,
                'ACTIVE' as status,
                '–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–∞–ª–∏—à–æ–∫ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ)' as notes
            FROM products 
            WHERE stock_pieces > 0
            AND id NOT IN (SELECT DISTINCT product_id FROM production_batches WHERE batch_date = date('now', '-30 days'))`, 
            function(err) {
                if (err) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∞—Ä—Ç—ñ–π:', err.message);
                } else {
                    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${this.changes} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∞—Ä—Ç—ñ–π –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤`);
                }
            });

    console.log('üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('');
    console.log('üìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
    console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: npm start');
    console.log('2. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —Ä–æ–∑–¥—ñ–ª "–ü–∞—Ä—Ç—ñ—ó" –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
    console.log('3. –°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–µ—Å—Ç–æ–≤–µ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ');
    
    db.close((err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ë–î:', err.message);
        } else {
            console.log('‚úÖ –ë–î –∑–∞–∫—Ä–∏—Ç–∞');
        }
    });
});