/**
 * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç—ñ—ó (batch_id) –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä—É—Ö—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤
 */

class BatchSelector {
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–±–∏—Ä–∞—î –Ω–∞–π–∫—Ä–∞—â—É –ø–∞—Ä—Ç—ñ—é –¥–ª—è —Ä—É—Ö—É —Ç–æ–≤–∞—Ä—É
     * @param {number} productId - ID —Ç–æ–≤–∞—Ä—É
     * @param {string} movementType - –¢–∏–ø —Ä—É—Ö—É (IN, OUT, PRODUCTION, WRITEOFF, etc)
     * @param {number} quantity - –ö—ñ–ª—å–∫—ñ—Å—Ç—å
     * @param {Object} batchQueries - Queries –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–∞—Ä—Ç—ñ—è–º–∏
     * @param {string} specificDate - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è PRODUCTION —Ä—É—Ö—ñ–≤
     * @returns {Object} {batch_id, batch_date} –∞–±–æ {batch_id: null, batch_date: null}
     */
    static async selectBatchForMovement(productId, movementType, quantity, batchQueries, specificDate = null) {
        try {
            console.log(`üîç –í–∏–±–∏—Ä–∞—é –ø–∞—Ä—Ç—ñ—é –¥–ª—è —Ç–æ–≤–∞—Ä—É ${productId}, —Ç–∏–ø: ${movementType}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity}`);
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É
            const batches = await batchQueries.getByProductId(productId);
            
            if (!batches || batches.length === 0) {
                console.log(`‚ö†Ô∏è –ü–∞—Ä—Ç—ñ–π –¥–ª—è —Ç–æ–≤–∞—Ä—É ${productId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                return { batch_id: null, batch_date: null };
            }
            
            let selectedBatch = null;
            
            switch (movementType) {
                case 'PRODUCTION':
                    selectedBatch = this._selectBatchForProduction(batches, quantity, specificDate);
                    break;
                    
                case 'OUT':
                case 'WRITEOFF':
                    selectedBatch = this._selectBatchForOutput(batches, quantity);
                    break;
                    
                case 'IN':
                case 'TRANSFER':
                case 'CORRECTION':
                    selectedBatch = this._selectBatchForInput(batches);
                    break;
                    
                default:
                    selectedBatch = this._selectBatchFIFO(batches);
                    break;
            }
            
            if (selectedBatch) {
                console.log(`‚úÖ –í–∏–±—Ä–∞–Ω–æ –ø–∞—Ä—Ç—ñ—é ${selectedBatch.id} (${selectedBatch.batch_date})`);
                return {
                    batch_id: selectedBatch.id,
                    batch_date: selectedBatch.batch_date
                };
            } else {
                console.log(`‚ö†Ô∏è –ü—ñ–¥—Ö–æ–¥—è—â—É –ø–∞—Ä—Ç—ñ—é –¥–ª—è —Ç–æ–≤–∞—Ä—É ${productId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                return { batch_id: null, batch_date: null };
            }
            
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø–∞—Ä—Ç—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É ${productId}:`, error);
            return { batch_id: null, batch_date: null };
        }
    }
    
    /**
     * –í–∏–±—ñ—Ä –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
     * –®—É–∫–∞—î –ø–∞—Ä—Ç—ñ—é –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—é –¥–∞—Ç–æ—é —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é, –∞–±–æ –Ω–∞–π–±–ª–∏–∂—á—É
     */
    static _selectBatchForProduction(batches, quantity, specificDate) {
        if (!specificDate) {
            return this._selectBatchNewest(batches);
        }
        
        // –¢–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ –¥–∞—Ç—ñ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
        let exactMatch = batches.find(batch => 
            batch.batch_date === specificDate && 
            batch.total_quantity === quantity
        );
        if (exactMatch) return exactMatch;
        
        // –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø–æ –¥–∞—Ç—ñ
        let dateMatch = batches.find(batch => batch.batch_date === specificDate);
        if (dateMatch) return dateMatch;
        
        // –ù–∞–π–±–ª–∏–∂—á–∞ –∑–∞ —á–∞—Å–æ–º
        return this._selectBatchNewest(batches);
    }
    
    /**
     * –í–∏–±—ñ—Ä –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –≤–∏–¥–∞—á—ñ/—Å–ø–∏—Å–∞–Ω–Ω—è
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î FIFO - –Ω–∞–π—Å—Ç–∞—Ä—à—ñ –ø–∞—Ä—Ç—ñ—ó —Å–ø–æ—á–∞—Ç–∫—É
     */
    static _selectBatchForOutput(batches, quantity) {
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø–∞—Ä—Ç—ñ—ó –∑ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é
        const availableBatches = batches.filter(batch => 
            batch.status === 'ACTIVE' && 
            batch.available_quantity >= quantity
        );
        
        if (availableBatches.length === 0) {
            // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–∞—Ä—Ç—ñ–π –∑ –ø–æ–≤–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é, –±–µ—Ä–µ–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—É –∑ –Ω–∞—è–≤–Ω–æ—é
            return this._selectBatchFIFO(batches.filter(batch => 
                batch.status === 'ACTIVE' && batch.available_quantity > 0
            ));
        }
        
        return this._selectBatchFIFO(availableBatches);
    }
    
    /**
     * –í–∏–±—ñ—Ä –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –ø—Ä–∏—Ö–æ–¥—É/–∫–æ—Ä–µ–∫—Ü—ñ—ó
     * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–∞–π–Ω–æ–≤—ñ—à—É –∞–∫—Ç–∏–≤–Ω—É –ø–∞—Ä—Ç—ñ—é
     */
    static _selectBatchForInput(batches) {
        const activeBatches = batches.filter(batch => batch.status === 'ACTIVE');
        return this._selectBatchNewest(activeBatches);
    }
    
    /**
     * FIFO - First In, First Out (–Ω–∞–π—Å—Ç–∞—Ä—à–∞ –ø–∞—Ä—Ç—ñ—è)
     */
    static _selectBatchFIFO(batches) {
        if (batches.length === 0) return null;
        
        return batches
            .filter(batch => batch.status === 'ACTIVE')
            .sort((a, b) => new Date(a.batch_date) - new Date(b.batch_date))[0];
    }
    
    /**
     * LIFO - Last In, First Out (–Ω–∞–π–Ω–æ–≤—ñ—à–∞ –ø–∞—Ä—Ç—ñ—è)
     */
    static _selectBatchNewest(batches) {
        if (batches.length === 0) return null;
        
        return batches
            .filter(batch => batch.status === 'ACTIVE')
            .sort((a, b) => new Date(b.batch_date) - new Date(a.batch_date))[0];
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ batch_id
     * @param {Object} movementData - –î–∞–Ω—ñ —Ä—É—Ö—É —Ç–æ–≤–∞—Ä—É
     * @param {Object} batchQueries - Queries –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–∞—Ä—Ç—ñ—è–º–∏
     * @returns {Object} movementData –∑ –¥–æ–¥–∞–Ω–∏–º batch_id —Ç–∞ batch_date
     */
    static async enhanceMovementWithBatch(movementData, batchQueries) {
        // –Ø–∫—â–æ batch_id –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        if (movementData.batch_id) {
            return movementData;
        }
        
        const { product_id, movement_type, pieces, batch_date } = movementData;
        
        const batchInfo = await this.selectBatchForMovement(
            product_id,
            movement_type,
            pieces,
            batchQueries,
            batch_date
        );
        
        return {
            ...movementData,
            batch_id: batchInfo.batch_id,
            batch_date: batchInfo.batch_date || movementData.batch_date
        };
    }
}

module.exports = BatchSelector; 