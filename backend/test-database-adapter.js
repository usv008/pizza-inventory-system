#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç DatabaseAdapter - –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–±–æ—Ç—É –∑ SQLite —Ç–∞ Supabase
 */

require('dotenv').config();
const DatabaseAdapter = require('./adapters/DatabaseAdapter');

async function testDatabaseAdapter() {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è DatabaseAdapter...\n');
    
    // –¢–µ—Å—Ç 1: SQLite —Ä–µ–∂–∏–º
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç SQLite —Ä–µ–∂–∏–º—É...');
    await testAdapter(false, 'SQLite');
    
    // –¢–µ—Å—Ç 2: Supabase —Ä–µ–∂–∏–º  
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç Supabase —Ä–µ–∂–∏–º—É...');
    await testAdapter(true, 'Supabase');
    
    console.log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ DatabaseAdapter –∑–∞–≤–µ—Ä—à–µ–Ω—ñ!');
}

async function testAdapter(useSupabase, modeName) {
    const adapter = new DatabaseAdapter(useSupabase);
    
    try {
        // –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
        console.log(`   üîó –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è ${modeName}...`);
        const connected = await adapter.testConnection();
        if (!connected) {
            console.error(`   ‚ùå ${modeName}: –∑'—î–¥–Ω–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è`);
            return;
        }
        console.log(`   ‚úÖ ${modeName}: –∑'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ`);
        
        // –¢–µ—Å—Ç SELECT
        console.log(`   üìñ –¢–µ—Å—Ç SELECT ${modeName}...`);
        const users = await adapter
            .table('users')
            .select(['id', 'username', 'role'], { 
                limit: 2,
                orderBy: { column: 'created_at', direction: 'desc' }
            });
            
        if (users && users.length > 0) {
            console.log(`   ‚úÖ ${modeName}: –æ—Ç—Ä–∏–º–∞–Ω–æ ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
            users.forEach((user, index) => {
                console.log(`      ${index + 1}. ${user.username} (${user.role})`);
            });
        } else {
            console.log(`   ‚ö†Ô∏è  ${modeName}: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ`);
        }
        
        // –¢–µ—Å—Ç SELECT –∑ WHERE
        console.log(`   üîç –¢–µ—Å—Ç SELECT –∑ WHERE ${modeName}...`);
        const products = await adapter
            .table('products')
            .select('*', {
                where: { stock_pieces: [144, 96] },
                limit: 2
            });
            
        if (products && products.length > 0) {
            console.log(`   ‚úÖ ${modeName}: –∑–Ω–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º`);
            products.forEach((product, index) => {
                console.log(`      ${index + 1}. ${product.name} - ${product.stock_pieces} —à—Ç`);
            });
        } else {
            console.log(`   ‚ö†Ô∏è  ${modeName}: –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ`);
        }
        
        // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        console.log(`   üìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${modeName}...`);
        const tables = ['users', 'products', 'clients'];
        
        for (const tableName of tables) {
            try {
                const records = await adapter.table(tableName).select('COUNT(*) as count');
                
                let count;
                if (useSupabase) {
                    count = records.length; // –í Supabase –ø—Ä–æ—Å—Ç–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
                } else {
                    count = records[0]?.count || 0; // –í SQLite —Ä–µ–∑—É–ª—å—Ç–∞—Ç COUNT(*)
                }
                
                console.log(`      ${tableName}: ${count} –∑–∞–ø–∏—Å—ñ–≤`);
            } catch (error) {
                console.log(`      ${tableName}: –ø–æ–º–∏–ª–∫–∞ - ${error.message}`);
            }
        }
        
    } catch (error) {
        console.error(`   ‚ùå ${modeName} –ø–æ–º–∏–ª–∫–∞:`, error.message);
    } finally {
        // –ó–∞–∫—Ä–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è SQLite
        if (!useSupabase) {
            adapter.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
    testDatabaseAdapter()
        .then(() => {
            console.log('\nüìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è DatabaseAdapter –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { testDatabaseAdapter };