/**
 * –¢–µ—Å—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó Order Service v2
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–±–æ—Ç—É –∑ –æ–±–æ–º–∞ –±–∞–∑–∞–º–∏ –¥–∞–Ω–∏—Ö: SQLite —ñ Supabase
 */

require('dotenv').config();
const OrderServiceV2 = require('./services/orderService-v2');
const ProductServiceV2 = require('./services/productService-v2');
const ClientServiceV2 = require('./services/clientService-v2');

// –ú–æ–∫–∞—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
const mockOperationsLogController = {
    OPERATION_TYPES: {
        ORDER_CREATE: 'ORDER_CREATE',
        ORDER_UPDATE: 'ORDER_UPDATE',
        ORDER_DELETE: 'ORDER_DELETE'
    },
    logOperation: async (data) => {
        console.log('üìù [MOCK] –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó:', data.operation_type);
        return true;
    }
};

const mockBatchController = {
    reserveForOrder: async (productId, quantity, orderId, auditInfo) => {
        console.log(`üìù [MOCK] –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: –ø—Ä–æ–¥—É–∫—Ç ${productId}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å ${quantity}, –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}`);
        return {
            success: true,
            batches: [{ batch_id: 1, quantity: quantity, batch_date: '2025-07-25' }]
        };
    },
    unreserveForOrder: async (productId, quantity, orderId, auditInfo) => {
        console.log(`üìù [MOCK] –í—ñ–¥–º—ñ–Ω–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: –ø—Ä–æ–¥—É–∫—Ç ${productId}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å ${quantity}`);
        return { success: true };
    }
};

async function testOrderServiceMigration() {
    console.log('üß™ ===== –¢–ï–°–¢ –ú–Ü–ì–†–ê–¶–Ü–á ORDER SERVICE =====\n');
    
    try {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏
        OrderServiceV2.initialize({ 
            OperationsLogController: mockOperationsLogController,
            batchController: mockBatchController
        });
        ProductServiceV2.initialize({ OperationsLogController: mockOperationsLogController });
        ClientServiceV2.initialize({ OperationsLogController: mockOperationsLogController });
        
        const useSupabase = process.env.USE_SUPABASE === 'true';
        console.log(`üîß –†–µ–∂–∏–º –ë–î: ${useSupabase ? 'Supabase PostgreSQL' : 'SQLite'}\n`);
        
        // 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
        console.log('üì¶ 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...');
        const products = await ProductServiceV2.getAllProducts();
        const clients = await ClientServiceV2.getAllClients();
        
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ ${clients.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
        
        if (products.length === 0) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å');
        }
        
        // –î–ª—è SQLite —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —è–∫—â–æ –Ω–µ–º–∞—î
        let testClient;
        if (clients.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ–º–∞—î –∫–ª—ñ—î–Ω—Ç—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ...');
            testClient = await ClientServiceV2.createClient({
                name: '–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç',
                contact_person: '–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç',
                phone: '+380123456789',
                email: 'test@example.com',
                address: '–¢–µ—Å—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞'
            });
            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: ID ${testClient.id}`);
        } else {
            testClient = clients[0];
        }
        
        const testProduct = products[0];
        console.log(`üìã –¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä: "${testProduct.name}" (ID: ${testProduct.id})`);
        console.log(`üè¢ –¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç: "${testClient.name}" (ID: ${testClient.id})\n`);
        
        // 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
        console.log('üìã 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å...');
        const orders = await OrderServiceV2.getAllOrders({ limit: 10 });
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${orders.length} –∑–∞–º–æ–≤–ª–µ–Ω—å`);
        
        orders.forEach((order, index) => {
            const itemsCount = order.order_items ? order.order_items.length : 0;
            console.log(`   ${index + 1}. ${order.order_number} - ${order.client_name} (${order.status}, ${itemsCount} –ø–æ–∑–∏—Ü—ñ–π)`);
        });
        console.log('');
        
        // 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        console.log('‚ûï 3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
        const newOrderData = {
            client_id: testClient.id,
            client_name: testClient.name,
            client_contact: testClient.contact_person || '–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç',
            order_date: new Date().toISOString().slice(0, 10),
            delivery_date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString().slice(0, 10), // +2 –¥–Ω—ñ
            notes: '–¢–µ—Å—Ç–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó',
            items: [
                {
                    product_id: testProduct.id,
                    quantity: 24,
                    boxes: 2,
                    pieces: 0,
                    notes: '–¢–µ—Å—Ç–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è'
                }
            ]
        };
        
        const createdOrder = await OrderServiceV2.createOrder(newOrderData, {
            user: 'test-user',
            userId: 1
        });
        
        console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID: ${createdOrder.id}`);
        console.log(`üìä –î–µ—Ç–∞–ª—ñ: ${createdOrder.order_number}, —Å—Ç–∞—Ç—É—Å: ${createdOrder.status}`);
        console.log(`üì¶ –ü–æ–∑–∏—Ü—ñ–π: ${createdOrder.order_items?.length || 0}\n`);
        
        // 4. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID
        console.log('üîç 4. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID...');
        const fetchedOrder = await OrderServiceV2.getOrderById(createdOrder.id);
        console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${fetchedOrder.order_number}`);
        console.log(`üìã –ö–ª—ñ—î–Ω—Ç: ${fetchedOrder.client_name}`);
        console.log(`üì¶ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${fetchedOrder.total_quantity} —à—Ç`);
        
        if (fetchedOrder.order_items && fetchedOrder.order_items.length > 0) {
            fetchedOrder.order_items.forEach((item, index) => {
                console.log(`   ${index + 1}. ${item.products?.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä'}: ${item.quantity} —à—Ç`);
            });
        }
        console.log('');
        
        // 5. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        console.log('‚úèÔ∏è 5. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
        const updateData = {
            notes: '–û–Ω–æ–≤–ª–µ–Ω—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
            status: 'IN_PROGRESS'
        };
        
        const updatedOrder = await OrderServiceV2.updateOrder(createdOrder.id, updateData, {
            user: 'updated-user'
        });
        
        console.log(`‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ: —Å—Ç–∞—Ç—É—Å ${updatedOrder.status}`);
        console.log(`üìù –ü—Ä–∏–º—ñ—Ç–∫–∏: "${updatedOrder.notes}"\n`);
        
        // 6. –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        console.log('üîÑ 6. –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
        const statusChangedOrder = await OrderServiceV2.updateOrderStatus(createdOrder.id, 'COMPLETED', {
            user: 'status-user'
        });
        
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ: ${statusChangedOrder.status}\n`);
        
        // 7. –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π (mock)
        console.log('üì¶ 7. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π...');
        const reservationResult = await OrderServiceV2.reserveBatchesForOrder(createdOrder.id, {
            user: 'batch-user'
        });
        
        console.log(`‚úÖ –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: ${reservationResult.success ? '—É—Å–ø—ñ—à–Ω–æ' : '–ø–æ–º–∏–ª–∫–∞'}`);
        if (reservationResult.reservations) {
            console.log(`üìä –ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ: ${reservationResult.reservations.length} –ø–∞—Ä—Ç—ñ–π`);
        }
        console.log('');
        
        // 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
        console.log('üìä 8. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å...');
        const stats = await OrderServiceV2.getOrderStats('month');
        
        console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞:`);
        console.log(`   –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: ${stats.total_orders}`);
        console.log(`   –ù–æ–≤–∏—Ö: ${stats.new_orders}`);
        console.log(`   –í —Ä–æ–±–æ—Ç—ñ: ${stats.in_progress_orders}`);
        console.log(`   –í–∏–∫–æ–Ω–∞–Ω–∏—Ö: ${stats.completed_orders}`);
        console.log(`   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${stats.total_quantity} —à—Ç\n`);
        
        // 9. –í—ñ–¥–º—ñ–Ω–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è (mock)
        console.log('‚Ü©Ô∏è 9. –í—ñ–¥–º—ñ–Ω–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π...');
        const unreserveResult = await OrderServiceV2.unreserveBatchesForOrder(createdOrder.id, {
            user: 'unreserve-user'
        });
        
        console.log(`‚úÖ –í—ñ–¥–º—ñ–Ω–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: ${unreserveResult.success ? '—É—Å–ø—ñ—à–Ω–æ' : '–ø–æ–º–∏–ª–∫–∞'}\n`);
        
        // 10. –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        console.log('‚ùå 10. –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
        const cancelledOrder = await OrderServiceV2.cancelOrder(createdOrder.id, {
            user: 'cancel-user'
        });
        
        console.log(`‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ: —Å—Ç–∞—Ç—É—Å ${cancelledOrder.status}\n`);
        
        // 11. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        console.log('üóëÔ∏è 11. –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...');
        const deleteResult = await OrderServiceV2.deleteOrder(createdOrder.id, {
            user: 'delete-user'
        });
        
        console.log(`‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ: ${deleteResult.success}\n`);
        
        // 12. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        console.log('üîç 12. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è...');
        try {
            await OrderServiceV2.getOrderById(createdOrder.id);
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
        } catch (error) {
            if (error.message.includes('–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
                console.log('‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ë–î');
            } else {
                throw error;
            }
        }
        
        console.log('\nüéâ ===== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û =====');
        console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${useSupabase ? 'Supabase' : 'SQLite'}`);
        console.log('‚úÖ –í—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ');
        console.log('‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        console.log('‚úÖ –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π (mock) –ø—Ä–∞—Ü—é—î');
        console.log('‚úÖ OrderService v2 –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è\n');
        
    } catch (error) {
        console.error('‚ùå –ü–û–ú–ò–õ–ö–ê –í –¢–ï–°–¢–Ü:', error);
        console.error('üìç Stack trace:', error.stack);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É
if (require.main === module) {
    testOrderServiceMigration()
        .then(() => {
            console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { testOrderServiceMigration };