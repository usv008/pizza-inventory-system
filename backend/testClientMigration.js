#!/usr/bin/env node

/**
 * Client Service Migration Test
 * –¢–µ—Å—Ç—É—î –º—ñ–≥—Ä–∞—Ü—ñ—é Client Service –∑ SQLite –Ω–∞ Supabase
 */

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });

// Import services
const ClientService = require('./services/clientService');
const SupabaseClientService = require('./services/supabaseClientService');  
const HybridClientService = require('./services/hybridClientService');

// Import dependencies
const database = require('./database');
const OperationsLogController = require('./controllers/operations-log-controller');

let testResults = {
    legacy: { success: 0, failed: 0, errors: [] },
    supabase: { success: 0, failed: 0, errors: [] },
    hybrid: { success: 0, failed: 0, errors: [] }
};

// Test client data
const testClient = {
    name: `Test Client ${Date.now()}`,
    contact_person: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ–Ω—Ç–∞–∫—Ç',
    phone: '+380123456789',
    email: 'test@example.com',
    address: '–¢–µ—Å—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ 123',
    notes: '–°—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó'
};

/**
 * Utility functions
 */
function logTest(service, test, success, message, error = null) {
    const status = success ? '‚úÖ' : '‚ùå';
    console.log(`${status} [${service.toUpperCase()}] ${test}: ${message}`);
    
    if (success) {
        testResults[service].success++;
    } else {
        testResults[service].failed++;
        if (error) {
            testResults[service].errors.push({ test, error: error.message });
        }
    }
}

function printResults() {
    console.log('\n' + '='.repeat(70));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø CLIENT SERVICE –ú–Ü–ì–†–ê–¶–Ü–á');
    console.log('='.repeat(70));
    
    Object.keys(testResults).forEach(service => {
        const result = testResults[service];
        const total = result.success + result.failed;
        const percentage = total > 0 ? Math.round((result.success / total) * 100) : 0;
        
        console.log(`\nüîß ${service.toUpperCase()} SERVICE:`);
        console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${result.success}`);
        console.log(`   ‚ùå –ü–æ–º–∏–ª–æ–∫: ${result.failed}`);
        console.log(`   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${percentage}%`);
        
        if (result.errors.length > 0) {
            console.log(`   üö® –ü–æ–º–∏–ª–∫–∏:`);
            result.errors.forEach((err, index) => {
                console.log(`      ${index + 1}. ${err.test}: ${err.error}`);
            });
        }
    });
    
    console.log('\n' + '='.repeat(70));
}

/**
 * Test Legacy Client Service (SQLite)
 */
async function testLegacyClientService() {
    console.log('\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø LEGACY CLIENT SERVICE (SQLite)');
    console.log('-'.repeat(50));
    
    const clientService = new ClientService();
    let createdClientId = null;
    
    try {
        // Initialize service
        await database.initDatabase();
        const dependencies = {
            clientQueries: database.clientQueries,
            OperationsLogController: OperationsLogController
        };
        clientService.initialize(dependencies);
        logTest('legacy', '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', true, 'ClientService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        
        // Test getAllClients
        const allClients = await clientService.getAllClients();
        logTest('legacy', '–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤', true, `–û—Ç—Ä–∏–º–∞–Ω–æ ${allClients.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
        
        // Test createClient
        const createResult = await clientService.createClient(testClient);
        createdClientId = createResult.id;
        logTest('legacy', '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞', true, `–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ ID: ${createdClientId}`);
        
        // Test getClientById
        const retrievedClient = await clientService.getClientById(createdClientId);
        const isCorrect = retrievedClient && retrievedClient.name === testClient.name;
        logTest('legacy', '–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID', isCorrect, 
                isCorrect ? `–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: ${retrievedClient.name}` : '–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ');
        
        // Test updateClient
        const updateData = { ...testClient, name: testClient.name + ' (–û–Ω–æ–≤–ª–µ–Ω–æ)' };
        const updateResult = await clientService.updateClient(createdClientId, updateData);
        logTest('legacy', '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞', updateResult.changes > 0, 
                `–û–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.changes} –∑–∞–ø–∏—Å—ñ–≤`);
        
        // Test searchClients
        const searchResults = await clientService.searchClients({ name: 'Test Client' });
        logTest('legacy', '–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤', Array.isArray(searchResults), 
                `–ó–Ω–∞–π–¥–µ–Ω–æ ${searchResults.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
        
        // Test getClientStats
        const stats = await clientService.getClientStats();
        logTest('legacy', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤', 
                stats && typeof stats.total === 'number', 
                `–ó–∞–≥–∞–ª–æ–º –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${stats.total}, –∞–∫—Ç–∏–≤–Ω–∏—Ö: ${stats.active}`);
        
    } catch (error) {
        logTest('legacy', '–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞', false, error.message, error);
    }
    
    return createdClientId;
}

/**
 * Test Supabase Client Service
 */
async function testSupabaseClientService() {
    console.log('\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø SUPABASE CLIENT SERVICE');
    console.log('-'.repeat(50));
    
    const supabaseClientService = new SupabaseClientService();
    let createdClientId = null;
    
    try {
        // Initialize service
        const dependencies = {
            OperationsLogController: OperationsLogController
        };
        supabaseClientService.initialize(dependencies);
        logTest('supabase', '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', true, 'SupabaseClientService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        
        // Test getAllClients
        const allClients = await supabaseClientService.getAllClients();
        logTest('supabase', '–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤', true, `–û—Ç—Ä–∏–º–∞–Ω–æ ${allClients.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
        
        // Test createClient
        const testClientSupabase = { ...testClient, name: testClient.name + ' (Supabase)' };
        const createResult = await supabaseClientService.createClient(testClientSupabase);
        createdClientId = createResult.id;
        logTest('supabase', '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞', true, `–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ ID: ${createdClientId}`);
        
        // Test getClientById
        const retrievedClient = await supabaseClientService.getClientById(createdClientId);
        const isCorrect = retrievedClient && retrievedClient.name === testClientSupabase.name;
        logTest('supabase', '–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID', isCorrect,
                isCorrect ? `–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: ${retrievedClient.name}` : '–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ');
        
        // Test updateClient
        const updateData = { ...testClientSupabase, name: testClientSupabase.name + ' (–û–Ω–æ–≤–ª–µ–Ω–æ)' };
        const updateResult = await supabaseClientService.updateClient(createdClientId, updateData);
        logTest('supabase', '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞', updateResult.changes > 0,
                `–û–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.changes} –∑–∞–ø–∏—Å—ñ–≤`);
        
        // Test searchClients
        const searchResults = await supabaseClientService.searchClients({ name: 'Test Client' });
        logTest('supabase', '–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤', Array.isArray(searchResults),
                `–ó–Ω–∞–π–¥–µ–Ω–æ ${searchResults.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
        
        // Test getClientStats
        const stats = await supabaseClientService.getClientStats();
        logTest('supabase', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤',
                stats && typeof stats.total === 'number',
                `–ó–∞–≥–∞–ª–æ–º –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${stats.total}, –∞–∫—Ç–∏–≤–Ω–∏—Ö: ${stats.active}`);
        
    } catch (error) {
        logTest('supabase', '–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞', false, error.message, error);
    }
    
    return createdClientId;
}

/**
 * Test Hybrid Client Service
 */
async function testHybridClientService() {
    console.log('\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø HYBRID CLIENT SERVICE');
    console.log('-'.repeat(50));
    
    const hybridClientService = new HybridClientService();
    
    try {
        // Initialize services
        const legacyClientService = new ClientService();
        const supabaseClientService = new SupabaseClientService();
        
        const dependencies = {
            legacyClientService: legacyClientService,
            supabaseClientService: supabaseClientService,
            clientQueries: database.clientQueries,
            OperationsLogController: OperationsLogController
        };
        
        hybridClientService.initialize(dependencies);
        logTest('hybrid', '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', true, 'HybridClientService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        
        // Test migration status
        const status = hybridClientService.getMigrationStatus();
        logTest('hybrid', '–°—Ç–∞—Ç—É—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó', status && status.services,
                `Legacy: ${status.services.legacy}, Supabase: ${status.services.supabase}`);
        
        // Test connectivity
        const connectivity = await hybridClientService.testConnectivity();
        logTest('hybrid', '–¢–µ—Å—Ç –∑\'—î–¥–Ω–∞–Ω–Ω—è', 
                connectivity.legacy || connectivity.supabase,
                `Legacy: ${connectivity.legacy}, Supabase: ${connectivity.supabase}`);
        
        // Test Phase 1: SQLite only
        console.log('\n   üìç –§–ê–ó–ê 1: –¢—ñ–ª—å–∫–∏ SQLite');
        hybridClientService.updateMigrationConfig({
            USE_SUPABASE_READ: false,
            USE_SUPABASE_WRITE: false
        });
        
        const allClientsPhase1 = await hybridClientService.getAllClients();
        logTest('hybrid', '–§–∞–∑–∞ 1 - —á–∏—Ç–∞–Ω–Ω—è', true, `SQLite: ${allClientsPhase1.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
        
        // Test Phase 2: Read from Supabase, write to SQLite
        console.log('\n   üìç –§–ê–ó–ê 2: –ß–∏—Ç–∞–Ω–Ω—è Supabase, –∑–∞–ø–∏—Å SQLite');
        hybridClientService.updateMigrationConfig({
            USE_SUPABASE_READ: true,
            USE_SUPABASE_WRITE: false
        });
        
        const allClientsPhase2 = await hybridClientService.getAllClients();
        logTest('hybrid', '–§–∞–∑–∞ 2 - —á–∏—Ç–∞–Ω–Ω—è', true, `Supabase —á–∏—Ç–∞–Ω–Ω—è: ${allClientsPhase2.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
        
        // Test Phase 3: Full Supabase with fallback
        console.log('\n   üìç –§–ê–ó–ê 3: –ü–æ–≤–Ω–∏–π Supabase –∑ fallback');
        hybridClientService.updateMigrationConfig({
            USE_SUPABASE_READ: true,
            USE_SUPABASE_WRITE: true,
            FALLBACK_TO_LEGACY: true
        });
        
        const testClientHybrid = { ...testClient, name: testClient.name + ' (Hybrid)' };
        const createResult = await hybridClientService.createClient(testClientHybrid);
        logTest('hybrid', '–§–∞–∑–∞ 3 - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è', !!createResult.id, `ID: ${createResult.id}`);
        
        // Test Phase 4: Supabase only
        console.log('\n   üìç –§–ê–ó–ê 4: –¢—ñ–ª—å–∫–∏ Supabase');
        hybridClientService.enableFullSupabaseMode();
        
        const allClientsPhase4 = await hybridClientService.getAllClients();
        logTest('hybrid', '–§–∞–∑–∞ 4 - —á–∏—Ç–∞–Ω–Ω—è', true, `Supabase —Ç—ñ–ª—å–∫–∏: ${allClientsPhase4.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
        
    } catch (error) {
        logTest('hybrid', '–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞', false, error.message, error);
    }
}

/**
 * Main test execution
 */
async function runAllTests() {
    console.log('üöÄ –ü–û–ß–ê–¢–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø CLIENT SERVICE –ú–Ü–ì–†–ê–¶–Ü–á');
    console.log('='.repeat(70));
    
    try {
        // Run all tests
        await testLegacyClientService();
        await testSupabaseClientService(); 
        await testHybridClientService();
        
        // Print final results
        printResults();
        
        console.log('\nüéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û');
        
    } catch (error) {
        console.error('üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', error);
    } finally {
        // Cleanup
        if (database && database.db) {
            database.db.close();
        }
        process.exit(0);
    }
}

// Run tests if called directly
if (require.main === module) {
    runAllTests();
}

module.exports = { runAllTests }; 