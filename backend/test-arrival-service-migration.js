// test-arrival-service-migration.js - –¢–µ—Å—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó ArrivalService

const arrivalService = require('./services/arrivalService-v2');

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è ArrivalService-v2
 * –¢–µ—Å—Ç—É—î —Ä–æ–±–æ—Ç—É –∑ –ø—Ä–∏—Ö–æ–¥–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –æ–±–æ—Ö –ë–î (SQLite —Ç–∞ Supabase)
 */
class ArrivalServiceMigrationTest {
    constructor() {
        this.testResults = [];
        this.testArrivalId = null;
    }

    log(message, type = 'info') {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
        console.log(logMessage);
        
        if (type === 'error') {
            this.testResults.push({ message, success: false, timestamp });
        } else if (type === 'success') {
            this.testResults.push({ message, success: true, timestamp });
        }
    }

    async runAllTests() {
        this.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ArrivalService-v2', 'info');
        this.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${arrivalService.useSupabase ? 'Supabase' : 'SQLite'}`, 'info');

        try {
            // –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
            await this.testGetAllArrivals();
            await this.testCreateArrival();
            
            if (this.testArrivalId) {
                await this.testGetArrivalById();
                await this.testArrivalStatistics();
            }
            
            await this.testValidation();

            // –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            this.generateTestReport();
            
        } catch (error) {
            this.log(`‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${error.message}`, 'error');
        }
    }

    async testGetAllArrivals() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getAllArrivals()...', 'info');
            
            const result = await arrivalService.getAllArrivals();
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (!result.success) {
                throw new Error('–ù–µ–≤—É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å');
            }
            
            if (!Array.isArray(result.arrivals)) {
                throw new Error('arrivals –Ω–µ —î –º–∞—Å–∏–≤–æ–º');
            }
            
            if (!result.stats || typeof result.stats !== 'object') {
                throw new Error('–í—ñ–¥—Å—É—Ç–Ω—è –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
            }
            
            this.log(`‚úÖ getAllArrivals: ${result.arrivals.length} –ø—Ä–∏—Ö–æ–¥—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ`, 'success');
            this.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∑–∞–≥–∞–ª–æ–º ${result.stats.total_quantity} —à—Ç`, 'success');
            
        } catch (error) {
            this.log(`‚ùå getAllArrivals: ${error.message}`, 'error');
        }
    }

    async testCreateArrival() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è createArrival()...', 'info');
            
            // –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É
            const arrivalData = {
                arrival_date: new Date().toISOString().split('T')[0], // –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –¥–∞—Ç–∞
                reason: '–¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–∏—Ö—ñ–¥ —Ç–æ–≤–∞—Ä—ñ–≤',
                created_by: 'test-user'
            };
            
            const items = [
                {
                    product_id: 1, // –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ —â–æ —Ç–æ–≤–∞—Ä –∑ ID=1 —ñ—Å–Ω—É—î
                    quantity: 50,
                    batch_date: new Date().toISOString().split('T')[0],
                    notes: '–¢–µ—Å—Ç–æ–≤–∞ –ø–∞—Ä—Ç—ñ—è —Ç–æ–≤–∞—Ä—É'
                }
            ];

            const context = { user: 'test-user', log_operation: true };
            
            const result = await arrivalService.createArrival(arrivalData, items, context);
            
            if (!result.success) {
                throw new Error('–ù–µ–≤—É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É');
            }
            
            if (!result.arrival || !result.arrival_number) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ –ø—Ä–∏—Ö–æ–¥—É');
            }
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö —Ç–µ—Å—Ç—ñ–≤
            this.testArrivalId = result.arrival.id;
            
            this.log(`‚úÖ createArrival: –ø—Ä–∏—Ö—ñ–¥ ${result.arrival_number} —Å—Ç–≤–æ—Ä–µ–Ω–æ`, 'success');
            this.log(`‚úÖ ID –ø—Ä–∏—Ö–æ–¥—É: ${this.testArrivalId}, –ø–æ–∑–∏—Ü—ñ–π: ${result.total_items}`, 'success');
            
        } catch (error) {
            this.log(`‚ùå createArrival: ${error.message}`, 'error');
            
            // –ú–æ–∂–ª–∏–≤–æ —Ç–æ–≤–∞—Ä –∑ ID=1 –Ω–µ —ñ—Å–Ω—É—î, —Å–ø—Ä–æ–±—É—î–º–æ –∑ —ñ–Ω—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if (error.message.includes('—Ç–æ–≤–∞—Ä') || error.message.includes('product')) {
                this.log('‚ö†Ô∏è –ú–æ–∂–ª–∏–≤–æ —Ç–æ–≤–∞—Ä –∑ ID=1 –Ω–µ —ñ—Å–Ω—É—î –≤ –ë–î', 'info');
            }
        }
    }

    async testGetArrivalById() {
        try {
            this.log(`üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getArrivalById(${this.testArrivalId})...`, 'info');
            
            const result = await arrivalService.getArrivalById(this.testArrivalId);
            
            if (!result.success) {
                throw new Error('–ù–µ–≤—É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å');
            }
            
            if (!result.arrival || result.arrival.id !== this.testArrivalId) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø—Ä–∏—Ö—ñ–¥ –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏–π');
            }
            
            const requiredFields = ['id', 'arrival_number', 'arrival_date', 'reason', 'items'];
            for (const field of requiredFields) {
                if (!(field in result.arrival)) {
                    throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ ${field} –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –ø—Ä–∏—Ö–æ–¥—É`);
                }
            }
            
            this.log(`‚úÖ getArrivalById: –ø—Ä–∏—Ö—ñ–¥ ${result.arrival.arrival_number} –æ—Ç—Ä–∏–º–∞–Ω–æ`, 'success');
            this.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${result.arrival.total_items} –ø–æ–∑–∏—Ü—ñ–π, ${result.arrival.total_quantity} —à—Ç`, 'success');
            
        } catch (error) {
            this.log(`‚ùå getArrivalById: ${error.message}`, 'error');
        }
    }

    async testArrivalStatistics() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getArrivalStatistics()...', 'info');
            
            const today = new Date().toISOString().split('T')[0];
            const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
            
            const result = await arrivalService.getArrivalStatistics(weekAgo, today);
            
            if (!result.success) {
                throw new Error('–ù–µ–≤—É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å');
            }
            
            if (!result.statistics || typeof result.statistics !== 'object') {
                throw new Error('–í—ñ–¥—Å—É—Ç–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
            }
            
            const requiredStatsFields = ['total_arrivals', 'total_quantity', 'average_quantity_per_arrival'];
            for (const field of requiredStatsFields) {
                if (!(field in result.statistics)) {
                    throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ ${field} –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ`);
                }
            }
            
            this.log(`‚úÖ getArrivalStatistics: ${result.statistics.total_arrivals} –ø—Ä–∏—Ö–æ–¥—ñ–≤ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å`, 'success');
            this.log(`‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${result.statistics.total_quantity} —à—Ç`, 'success');
            
        } catch (error) {
            this.log(`‚ùå getArrivalStatistics: ${error.message}`, 'error');
        }
    }

    async testValidation() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è validateArrivalData()...', 'info');
            
            // –¢–µ—Å—Ç 1: –í–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
            const validArrivalData = {
                arrival_date: new Date().toISOString().split('T')[0],
                reason: '–í–∞–ª—ñ–¥–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –ø—Ä–∏—Ö—ñ–¥'
            };
            
            const validItems = [
                {
                    product_id: 1,
                    quantity: 10,
                    batch_date: new Date().toISOString().split('T')[0]
                }
            ];
            
            const validResult = await arrivalService.validateArrivalData(validArrivalData, validItems);
            
            if (!validResult.isValid) {
                throw new Error(`–í–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –ø—Ä–æ–π—à–ª–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é: ${validResult.errors.join(', ')}`);
            }
            
            this.log('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É', 'success');
            
            // –¢–µ—Å—Ç 2: –ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
            const invalidArrivalData = {
                arrival_date: '', // –ü–æ—Ä–æ–∂–Ω—è –¥–∞—Ç–∞
                reason: 'xx' // –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π reason
            };
            
            const invalidItems = [
                {
                    product_id: null, // –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–æ–≤–∞—Ä
                    quantity: -5, // –í—ñ–¥'—î–º–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                    batch_date: '2030-01-01' // –ú–∞–π–±—É—Ç–Ω—è –¥–∞—Ç–∞
                }
            ];
            
            const invalidResult = await arrivalService.validateArrivalData(invalidArrivalData, invalidItems);
            
            if (invalidResult.isValid) {
                throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ–π—à–ª–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é');
            }
            
            if (!Array.isArray(invalidResult.errors) || invalidResult.errors.length === 0) {
                throw new Error('–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω—ñ');
            }
            
            this.log(`‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω—ñ (${invalidResult.errors.length} –ø–æ–º–∏–ª–æ–∫)`, 'success');
            
        } catch (error) {
            this.log(`‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ${error.message}`, 'error');
        }
    }

    generateTestReport() {
        this.log('\nüìã –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø ARRIVALSERVICE-V2', 'info');
        this.log('=' * 50, 'info');
        
        const successCount = this.testResults.filter(r => r.success).length;
        const totalCount = this.testResults.length;
        const successRate = totalCount > 0 ? (successCount / totalCount * 100).toFixed(1) : 0;
        
        this.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: ${successCount}/${totalCount} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${successRate}%)`, 'info');
        this.log(`üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${arrivalService.useSupabase ? 'Supabase PostgreSQL' : 'SQLite'}`, 'info');
        
        if (this.testArrivalId) {
            this.log(`üß™ –¢–µ—Å—Ç–æ–≤–∏–π –ø—Ä–∏—Ö—ñ–¥: ID ${this.testArrivalId}`, 'info');
        }
        
        // –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        this.log('\nüìù –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:', 'info');
        this.testResults.forEach((result, index) => {
            const status = result.success ? '‚úÖ' : '‚ùå';
            this.log(`${index + 1}. ${status} ${result.message}`, 'info');
        });
        
        // –ü—ñ–¥—Å—É–º–æ–∫
        if (successRate >= 80) {
            this.log('\nüéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!', 'success');
            this.log('ArrivalService-v2 –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–æ—é –ë–î', 'info');
        } else if (successRate >= 60) {
            this.log('\n‚ö†Ô∏è –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –ó –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø–ú–ò', 'info');
            this.log('–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–∞—Ü—é—î, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏', 'info');
        } else {
            this.log('\n‚ùå –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–û–í–ê–õ–ï–ù–û!', 'error');
            this.log('–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ ArrivalService-v2, –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è', 'error');
        }
        
        this.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:', 'info');
        this.log('1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é USE_SUPABASE –≤ .env', 'info');
        this.log('2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —î —Ç–µ—Å—Ç–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –≤ –æ–±—Ä–∞–Ω—ñ–π –ë–î', 'info');
        this.log('3. –Ø–∫—â–æ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ connection —Ç–∞ —Å—Ö–µ–º—É –ë–î', 'info');
        
        return {
            success_rate: successRate,
            total_tests: totalCount,
            successful_tests: successCount,
            database_type: arrivalService.useSupabase ? 'Supabase' : 'SQLite'
        };
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
async function runArrivalServiceTests() {
    const tester = new ArrivalServiceMigrationTest();
    const results = await tester.runAllTests();
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ CI/CD
    return results;
}

// –Ø–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
    runArrivalServiceTests()
        .then(results => {
            console.log('\nüèÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            process.exit(results.success_rate >= 80 ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
            process.exit(1);
        });
}

module.exports = { runArrivalServiceTests, ArrivalServiceMigrationTest };