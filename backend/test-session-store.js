const SupabaseSessionStoreDev = require('./middleware/supabase-session-store-dev');
const { supabase } = require('./supabase-client');

/**
 * –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è SupabaseSessionStoreDev
 */
async function testSessionStore() {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è SupabaseSessionStoreDev...');
    
    try {
        // –°—Ç–≤–æ—Ä—é—î–º–æ session store
        const sessionStore = new SupabaseSessionStoreDev({
            supabase: supabase,
            cleanupInterval: 60000 // 1 —Ö–≤–∏–ª–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        });
        
        const testSid = 'test-session-' + Date.now();
        const testSession = {
            cookie: {
                maxAge: 3600000, // 1 –≥–æ–¥–∏–Ω–∞
                httpOnly: true,
                secure: false
            },
            user: { id: 43, username: 'test-user' },
            ip: '127.0.0.1',
            userAgent: 'Test Agent',
            testData: 'This is test session data'
        };
        
        console.log('\nüìã –¢–µ—Å—Ç 1: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó');
        await new Promise((resolve, reject) => {
            sessionStore.set(testSid, testSession, (err) => {
                if (err) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', err.message);
                    reject(err);
                } else {
                    console.log('‚úÖ –°–µ—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞');
                    resolve();
                }
            });
        });
        
        console.log('\nüìã –¢–µ—Å—Ç 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó');
        const retrievedSession = await new Promise((resolve, reject) => {
            sessionStore.get(testSid, (err, session) => {
                if (err) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:', err.message);
                    reject(err);
                } else if (!session) {
                    console.error('‚ùå –°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
                    reject(new Error('Session not found'));
                } else {
                    console.log('‚úÖ –°–µ—Å—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞:', JSON.stringify(session, null, 2));
                    resolve(session);
                }
            });
        });
        
        console.log('\nüìã –¢–µ—Å—Ç 3: –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Å—ñ–π');
        await new Promise((resolve, reject) => {
            sessionStore.length((err, count) => {
                if (err) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É:', err.message);
                    reject(err);
                } else {
                    console.log(`‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: ${count}`);
                    resolve();
                }
            });
        });
        
        console.log('\nüìã –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
        const stats = await sessionStore.getStats();
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ–π:', stats);
        
        console.log('\nüìã –¢–µ—Å—Ç 5: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó');
        await new Promise((resolve, reject) => {
            sessionStore.destroy(testSid, (err) => {
                if (err) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', err.message);
                    reject(err);
                } else {
                    console.log('‚úÖ –°–µ—Å—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞');
                    resolve();
                }
            });
        });
        
        console.log('\nüìã –¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
        await new Promise((resolve, reject) => {
            sessionStore.get(testSid, (err, session) => {
                if (err) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', err.message);
                    reject(err);
                } else if (session) {
                    console.error('‚ùå –°–µ—Å—ñ—è –Ω–µ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞');
                    reject(new Error('Session still exists'));
                } else {
                    console.log('‚úÖ –°–µ—Å—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞');
                    resolve();
                }
            });
        });
        
        console.log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('üìã SupabaseSessionStoreDev –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
        
        return true;
        
    } catch (err) {
        console.error('\n‚ùå –¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ:', err.message);
        return false;
    }
}

if (require.main === module) {
    testSessionStore()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(err => {
            console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', err);
            process.exit(1);
        });
}

module.exports = { testSessionStore }; 