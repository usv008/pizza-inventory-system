const authRouter = require('../supabase/authRouter');

/**
 * Dual Authentication Middleware
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ Supabase Auth, —Ç–∞–∫ —ñ Legacy Express Sessions
 * –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è Gradual Migration approach –∑ Creative Phase
 */
class DualAuthMiddleware {
  /**
   * Primary authentication middleware
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ–±–∏–¥–≤—ñ —Å–∏—Å—Ç–µ–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
   */
  static async authenticate(req, res, next) {
    try {
      // –°–ø—Ä–æ–±—É—î–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Auth Router
      const user = await authRouter.authenticate(req);
      
      if (user) {
        req.user = user;
        req.authType = user.authType;
        req.authSystem = user.system;
        
        // –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        console.log(`üîê Authenticated: ${user.username} (${user.authType})`);
        
        return next();
      }

      // –Ø–∫—â–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è
      return res.status(401).json({
        error: 'Authentication required',
        message: 'Please log in to access this resource',
        authSystems: ['supabase', 'legacy']
      });
    } catch (error) {
      console.error('üö® Dual Auth Middleware error:', error.message);
      
      return res.status(500).json({
        error: 'Authentication error',
        message: 'Internal authentication error'
      });
    }
  }

  /**
   * Optional authentication middleware
   * –°–ø—Ä–æ–±—É—î –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏, –∞–ª–µ –Ω–µ –±–ª–æ–∫—É—î –¥–æ—Å—Ç—É–ø
   */
  static async optionalAuth(req, res, next) {
    try {
      const user = await authRouter.authenticate(req);
      
      if (user) {
        req.user = user;
        req.authType = user.authType;
        req.authSystem = user.system;
        req.isAuthenticated = true;
        
        console.log(`üîê Optional auth: ${user.username} (${user.authType})`);
      } else {
        req.user = null;
        req.authType = null;
        req.authSystem = null;
        req.isAuthenticated = false;
      }
      
      return next();
    } catch (error) {
      console.error('üö® Optional Auth error:', error.message);
      
      // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      req.user = null;
      req.authType = null;
      req.authSystem = null;
      req.isAuthenticated = false;
      
      return next();
    }
  }

  /**
   * Role-based authorization middleware
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  static requireRole(...allowedRoles) {
    return async (req, res, next) => {
      try {
        // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
        if (!req.user) {
          return res.status(401).json({
            error: 'Authentication required',
            message: 'Please log in first'
          });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–ª—å
        const userRole = req.user.role;
        
        if (!allowedRoles.includes(userRole)) {
          console.warn(`üö´ Access denied: ${req.user.username} (${userRole}) tried to access ${req.path}`);
          
          return res.status(403).json({
            error: 'Access denied',
            message: `Role '${userRole}' is not authorized for this resource`,
            requiredRoles: allowedRoles
          });
        }

        console.log(`‚úÖ Role check passed: ${req.user.username} (${userRole})`);
        return next();
      } catch (error) {
        console.error('üö® Role check error:', error.message);
        
        return res.status(500).json({
          error: 'Authorization error',
          message: 'Internal authorization error'
        });
      }
    };
  }

  /**
   * Permission-based authorization middleware
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–µ—Ç–∞–ª—å–Ω—ñ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
   */
  static requirePermission(permissionKey) {
    return async (req, res, next) => {
      try {
        if (!req.user) {
          return res.status(401).json({
            error: 'Authentication required',
            message: 'Please log in first'
          });
        }

        // –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—å–æ–≥–æ
        if (req.user.role === 'admin') {
          return next();
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–æ–∑–≤—ñ–ª
        const userPermissions = req.user.permissions || {};
        
        if (!userPermissions[permissionKey]) {
          console.warn(`üö´ Permission denied: ${req.user.username} missing '${permissionKey}'`);
          
          return res.status(403).json({
            error: 'Permission denied',
            message: `Missing required permission: '${permissionKey}'`,
            userRole: req.user.role
          });
        }

        console.log(`‚úÖ Permission check passed: ${req.user.username} has '${permissionKey}'`);
        return next();
      } catch (error) {
        console.error('üö® Permission check error:', error.message);
        
        return res.status(500).json({
          error: 'Authorization error',
          message: 'Internal authorization error'
        });
      }
    };
  }

  /**
   * Supabase-only authentication middleware
   * –í–∏–º–∞–≥–∞—î —Ç—ñ–ª—å–∫–∏ Supabase –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
   */
  static async requireSupabase(req, res, next) {
    try {
      const user = await authRouter.authenticate(req);
      
      if (!user || user.authType !== 'supabase') {
        return res.status(401).json({
          error: 'Supabase authentication required',
          message: 'This endpoint requires Supabase authentication',
          authType: user ? user.authType : 'none'
        });
      }

      req.user = user;
      req.authType = user.authType;
      req.authSystem = user.system;
      
      return next();
    } catch (error) {
      console.error('üö® Supabase auth error:', error.message);
      
      return res.status(500).json({
        error: 'Authentication error',
        message: 'Supabase authentication error'
      });
    }
  }

  /**
   * Legacy-only authentication middleware
   * –í–∏–º–∞–≥–∞—î —Ç—ñ–ª—å–∫–∏ Legacy –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
   */
  static async requireLegacy(req, res, next) {
    try {
      const user = await authRouter.authenticate(req);
      
      if (!user || user.authType !== 'legacy') {
        return res.status(401).json({
          error: 'Legacy authentication required',
          message: 'This endpoint requires legacy session authentication',
          authType: user ? user.authType : 'none'
        });
      }

      req.user = user;
      req.authType = user.authType;
      req.authSystem = user.system;
      
      return next();
    } catch (error) {
      console.error('üö® Legacy auth error:', error.message);
      
      return res.status(500).json({
        error: 'Authentication error',
        message: 'Legacy authentication error'
      });
    }
  }

  /**
   * Migration status middleware
   * –î–æ–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó
   */
  static async addMigrationInfo(req, res, next) {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
      const authStats = await authRouter.getAuthStats();
      
      req.migrationInfo = {
        authMode: authRouter.getAuthMode(req),
        stats: authStats,
        supabaseAvailable: authRouter.supabaseAuth.isAvailable(),
        legacyAvailable: authRouter.legacyAuth.isAvailable()
      };
      
      return next();
    } catch (error) {
      console.error('üö® Migration info error:', error.message);
      
      // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ migration info
      req.migrationInfo = {
        authMode: 'error',
        stats: { error: error.message },
        supabaseAvailable: false,
        legacyAvailable: false
      };
      
      return next();
    }
  }

  /**
   * Audit logging middleware
   * –õ–æ–≥—É—î –≤—Å—ñ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –∑–∞–ø–∏—Ç–∏
   */
  static auditRequest(req, res, next) {
    if (req.user) {
      console.log(`üìù API Request: ${req.user.username} (${req.authType}) ${req.method} ${req.path}`);
      
      // –î–æ–¥–∞—î–º–æ timestamp
      req.requestTimestamp = new Date().toISOString();
      
      // –õ–æ–≥—É—î–º–æ IP —Ç–∞ User-Agent
      req.clientInfo = {
        ip: req.ip || req.connection.remoteAddress,
        userAgent: req.get('User-Agent'),
        authType: req.authType
      };
    }
    
    return next();
  }
}

module.exports = DualAuthMiddleware; 