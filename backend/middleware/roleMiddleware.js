const permissionService = require('../services/permissionService');
const { ForbiddenError, UnauthorizedError } = require('./errors/AppError');

/**
 * Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
class RoleMiddleware {
    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∞
     * @param {string} permission - –ø—Ä–∞–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ "module.action"
     * @param {string} errorMessage - –∫–∞—Å—Ç–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @returns {Function} middleware —Ñ—É–Ω–∫—Ü—ñ—è
     */
    static requirePermission(permission, errorMessage = null) {
        return async (req, res, next) => {
            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º
                if (!req.user || !req.user.id) {
                    throw new UnauthorizedError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
                const hasPermission = await permissionService.hasPermission(req.user.id, permission);
                
                if (!hasPermission) {
                    const message = errorMessage || `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó: ${permission}`;
                    throw new ForbiddenError(message);
                }

                next();
            } catch (error) {
                next(error);
            }
        };
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–∞ –± –æ–¥–Ω–µ –∑ –ø—Ä–∞–≤
     * @param {Array<string>} permissions - –º–∞—Å–∏–≤ –ø—Ä–∞–≤
     * @param {string} errorMessage - –∫–∞—Å—Ç–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @returns {Function} middleware —Ñ—É–Ω–∫—Ü—ñ—è
     */
    static requireAnyPermission(permissions, errorMessage = null) {
        return async (req, res, next) => {
            try {
                if (!req.user || !req.user.id) {
                    throw new UnauthorizedError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
                }

                const hasAnyPermission = await permissionService.hasAnyPermission(req.user.id, permissions);
                
                if (!hasAnyPermission) {
                    const message = errorMessage || `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó. –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–¥–Ω–µ –∑: ${permissions.join(', ')}`;
                    throw new ForbiddenError(message);
                }

                next();
            } catch (error) {
                next(error);
            }
        };
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—Å—ñ –∑–∞–∑–Ω–∞—á–µ–Ω—ñ –ø—Ä–∞–≤–∞
     * @param {Array<string>} permissions - –º–∞—Å–∏–≤ –ø—Ä–∞–≤
     * @param {string} errorMessage - –∫–∞—Å—Ç–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @returns {Function} middleware —Ñ—É–Ω–∫—Ü—ñ—è
     */
    static requireAllPermissions(permissions, errorMessage = null) {
        return async (req, res, next) => {
            try {
                if (!req.user || !req.user.id) {
                    throw new UnauthorizedError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
                }

                const hasAllPermissions = await permissionService.hasAllPermissions(req.user.id, permissions);
                
                if (!hasAllPermissions) {
                    const message = errorMessage || `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó. –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—ñ: ${permissions.join(', ')}`;
                    throw new ForbiddenError(message);
                }

                next();
            } catch (error) {
                next(error);
            }
        };
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ä–æ–ª—å
     * @param {string|Array<string>} roles - —Ä–æ–ª—å –∞–±–æ –º–∞—Å–∏–≤ —Ä–æ–ª–µ–π
     * @param {string} errorMessage - –∫–∞—Å—Ç–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @returns {Function} middleware —Ñ—É–Ω–∫—Ü—ñ—è
     */
    static requireRole(roles, errorMessage = null) {
        const roleArray = Array.isArray(roles) ? roles : [roles];
        
        return async (req, res, next) => {
            try {
                if (!req.user || !req.user.id) {
                    throw new UnauthorizedError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
                }

                if (!req.user.role || !roleArray.includes(req.user.role)) {
                    const message = errorMessage || `–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–æ–ª—å: ${roleArray.join(' –∞–±–æ ')}`;
                    throw new ForbiddenError(message);
                }

                next();
            } catch (error) {
                next(error);
            }
        };
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     * @param {string} errorMessage - –∫–∞—Å—Ç–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @returns {Function} middleware —Ñ—É–Ω–∫—Ü—ñ—è
     */
    static requireAdmin(errorMessage = null) {
        return async (req, res, next) => {
            try {
                if (!req.user || !req.user.id) {
                    throw new UnauthorizedError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –ø—Ä–∞–≤
                const hasAdminRights = await permissionService.hasPermission(req.user.id, 'admin.all_rights');
                
                if (!hasAdminRights) {
                    const message = errorMessage || '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –ø—Ä–∞–≤–∞';
                    throw new ForbiddenError(message);
                }

                next();
            } catch (error) {
                next(error);
            }
        };
    }

    /**
     * Middleware –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ req.permissions
     * @returns {Function} middleware —Ñ—É–Ω–∫—Ü—ñ—è
     */
    static attachPermissions() {
        return async (req, res, next) => {
            try {
                if (req.user && req.user.id) {
                    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    const permissions = await permissionService.getUserPermissions(req.user.id);
                    
                    // –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ req –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
                    req.permissions = permissions;
                    
                    // –î–æ–¥–∞—î–º–æ helper —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑—Ä—É—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                    req.hasPermission = (permission) => {
                        return permissionService.hasPermission(req.user.id, permission);
                    };
                    
                    req.hasAnyPermission = (permissions) => {
                        return permissionService.hasAnyPermission(req.user.id, permissions);
                    };
                    
                    req.hasAllPermissions = (permissions) => {
                        return permissionService.hasAllPermissions(req.user.id, permissions);
                    };
                }

                next();
            } catch (error) {
                next(error);
            }
        };
    }

    /**
     * –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π middleware: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è + –ø—Ä–∞–≤–∞ + –ª–æ–≥—É–≤–∞–Ω–Ω—è
     * @param {string} permission - –ø—Ä–∞–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ "module.action"
     * @param {string} errorMessage - –∫–∞—Å—Ç–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @returns {Function} middleware —Ñ—É–Ω–∫—Ü—ñ—è
     */
    static secureEndpoint(permission, errorMessage = null) {
        return async (req, res, next) => {
            try {
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
                if (!req.user || !req.user.id) {
                    throw new UnauthorizedError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è');
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
                const hasPermission = await permissionService.hasPermission(req.user.id, permission);
                
                if (!hasPermission) {
                    const message = errorMessage || `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó: ${permission}`;
                    
                    // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø—Ä–æ–±—ñ –Ω–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
                    console.warn(`üö® –ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∞ —Å–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É: ${req.user.username} (ID: ${req.user.id}) -> ${permission}`);
                    
                    throw new ForbiddenError(message);
                }

                // –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
                console.log(`‚úÖ –î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ: ${req.user.username} (ID: ${req.user.id}) -> ${permission}`);
                
                next();
            } catch (error) {
                next(error);
            }
        };
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞—Å —ñ —Ç–∞–∫–æ–∂ –æ–∫—Ä–µ–º—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
module.exports = RoleMiddleware;

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ç–∞–∫–æ–∂ –æ–∫—Ä–µ–º—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
module.exports.requirePermission = RoleMiddleware.requirePermission;
module.exports.requireAnyPermission = RoleMiddleware.requireAnyPermission;
module.exports.requireAllPermissions = RoleMiddleware.requireAllPermissions;
module.exports.requireRole = RoleMiddleware.requireRole;
module.exports.requireAdmin = RoleMiddleware.requireAdmin;
module.exports.attachPermissions = RoleMiddleware.attachPermissions;
module.exports.secureEndpoint = RoleMiddleware.secureEndpoint; 