const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'pizza_inventory.db');
const db = new sqlite3.Database(dbPath);

console.log('–ü–æ—á–∏–Ω–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

db.serialize(() => {
    // –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å client_id –¥–æ —ñ—Å–Ω—É—é—á–æ—ó —Ç–∞–±–ª–∏—Ü—ñ orders
    db.run(`ALTER TABLE orders ADD COLUMN client_id INTEGER`, (err) => {
        if (err && !err.message.includes('duplicate column name')) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è client_id:', err.message);
        } else {
            console.log('‚úÖ –°—Ç–æ–≤–ø–µ—Ü—å client_id –¥–æ–¥–∞–Ω–æ');
        }
    });
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∫–ª—ñ—î–Ω—Ç—ñ–≤ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    db.run(`CREATE TABLE IF NOT EXISTS clients (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        contact_person TEXT,
        phone TEXT,
        email TEXT,
        address TEXT,
        notes TEXT,
        is_active INTEGER DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ clients:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è clients —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        }
    });
    
    // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
    db.run(`INSERT OR IGNORE INTO clients (id, name, contact_person, phone, email, address) VALUES 
        (1, '–¢–û–í –ü—ñ—Ü–∞ –ï–∫—Å–ø—Ä–µ—Å', '–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ', '+380 67 123 45 67', 'ivan@pizza.com', '–º. –ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1'),
        (2, '–†–µ—Å—Ç–æ—Ä–∞–Ω –ú–∞–º–º–∞ –ú—ñ–∞', '–ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–µ–Ω–∫–æ', '+380 50 987 65 43', 'maria@mamma.com', '–º. –õ—å–≤—ñ–≤, –ø–ª. –†–∏–Ω–æ–∫, 5'),
        (3, '–ö–∞—Ñ–µ –ß–∞–æ –ë–µ–ª–ª–∞', '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –°–∏–¥–æ—Ä–µ–Ω–∫–æ', '+380 93 456 78 90', 'alex@ciao.com', '–º. –û–¥–µ—Å–∞, –≤—É–ª. –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞, 10')
    `, (err) => {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:', err.message);
        } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏ –¥–æ–¥–∞–Ω—ñ');
        }
        
        db.close((err) => {
            if (err) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ë–î:', err.message);
            } else {
                console.log('üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
            }
        });
    });
});
