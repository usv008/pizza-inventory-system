// –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ–∞–π–ª fix-production-batches.js –≤ –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'pizza_inventory.db');
console.log('üîÑ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ production_batches...');

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', err.message);
        process.exit(1);
    }
    console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –ë–î');
});

db.serialize(() => {
    // –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ
    db.all("PRAGMA table_info(production_batches)", (err, columns) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ:', err.message);
            return;
        }
        
        console.log('üìã –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ production_batches:');
        columns.forEach(col => {
            console.log(`   ${col.name}: ${col.type}`);
        });
        
        const columnNames = columns.map(col => col.name);
        
        // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
        const columnsToAdd = [
            { name: 'notes', sql: 'ALTER TABLE production_batches ADD COLUMN notes TEXT' },
            { name: 'production_id', sql: 'ALTER TABLE production_batches ADD COLUMN production_id INTEGER' },
            { name: 'used_quantity', sql: 'ALTER TABLE production_batches ADD COLUMN used_quantity INTEGER NOT NULL DEFAULT 0' }
        ];
        
        let addedColumns = 0;
        
        columnsToAdd.forEach(column => {
            if (!columnNames.includes(column.name)) {
                db.run(column.sql, (err) => {
                    if (err) {
                        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ ${column.name}:`, err.message);
                    } else {
                        console.log(`‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${column.name} –¥–æ–¥–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ`);
                        addedColumns++;
                    }
                });
            } else {
                console.log(`‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ ${column.name} –≤–∂–µ —ñ—Å–Ω—É—î`);
            }
        });
    });

    // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ allocated_batches –¥–æ order_items —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    db.run(`ALTER TABLE order_items ADD COLUMN allocated_batches TEXT DEFAULT '[]'`, (err) => {
        if (err && !err.message.includes('duplicate column')) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–ª—è allocated_batches:', err.message);
        } else {
            console.log('‚úÖ –ü–æ–ª–µ allocated_batches –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤ order_items');
        }
    });

    // –î–æ–¥–∞—î–º–æ –ø–æ–ª—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –≤ stock_movements
    db.run(`ALTER TABLE stock_movements ADD COLUMN batch_id INTEGER`, (err) => {
        if (err && !err.message.includes('duplicate column')) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–ª—è batch_id:', err.message);
        } else {
            console.log('‚úÖ –ü–æ–ª–µ batch_id –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤ stock_movements');
        }
    });

    db.run(`ALTER TABLE stock_movements ADD COLUMN batch_date DATE`, (err) => {
        if (err && !err.message.includes('duplicate column')) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–ª—è batch_date:', err.message);
        } else {
            console.log('‚úÖ –ü–æ–ª–µ batch_date –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤ stock_movements');
        }
    });

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ —î –¥–∞–Ω—ñ –≤ production_batches
    db.get("SELECT COUNT(*) as count FROM production_batches", (err, result) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∑–∞–ø–∏—Å—ñ–≤:', err.message);
        } else {
            console.log(`üìä –í —Ç–∞–±–ª–∏—Ü—ñ production_batches: ${result.count} –∑–∞–ø–∏—Å—ñ–≤`);
            
            if (result.count === 0) {
                // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
                db.run(`INSERT INTO production_batches 
                        (product_id, batch_date, production_date, total_quantity, available_quantity, expiry_date, status)
                        SELECT 
                            id as product_id,
                            date('now', '-30 days') as batch_date,
                            date('now', '-30 days') as production_date,
                            stock_pieces as total_quantity,
                            stock_pieces as available_quantity,
                            date('now', '+300 days') as expiry_date,
                            'ACTIVE' as status
                        FROM products 
                        WHERE stock_pieces > 0`, 
                        function(err) {
                            if (err) {
                                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∞—Ä—Ç—ñ–π:', err.message);
                            } else {
                                console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${this.changes} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–∞—Ä—Ç—ñ–π`);
                            }
                        });
            }
        }
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
    const indexes = [
        'CREATE INDEX IF NOT EXISTS idx_production_batches_product_date ON production_batches (product_id, batch_date)',
        'CREATE INDEX IF NOT EXISTS idx_production_batches_expiry ON production_batches (expiry_date, status)',
        'CREATE INDEX IF NOT EXISTS idx_production_batches_available ON production_batches (product_id, available_quantity, status)'
    ];

    indexes.forEach((indexSql, i) => {
        db.run(indexSql, (err) => {
            if (err) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É ${i + 1}:`, err.message);
            } else {
                console.log(`‚úÖ –Ü–Ω–¥–µ–∫—Å ${i + 1} —Å—Ç–≤–æ—Ä–µ–Ω–æ/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ`);
            }
        });
    });

    setTimeout(() => {
        console.log('');
        console.log('üéâ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log('');
        console.log('üìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
        console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: npm start');
        console.log('2. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ —Ä–æ–∑–¥—ñ–ª "–ü–∞—Ä—Ç—ñ—ó" –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
        console.log('3. –°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–µ—Å—Ç–æ–≤–µ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ');
        
        db.close((err) => {
            if (err) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ë–î:', err.message);
            } else {
                console.log('‚úÖ –ë–î –∑–∞–∫—Ä–∏—Ç–∞');
            }
            process.exit(0);
        });
    }, 2000); // –î–∞—î–º–æ —á–∞—Å –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
});