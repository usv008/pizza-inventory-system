// controllers/batch-controller.js - –ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ø–∞—Ä—Ç—ñ–π –∑ Supabase

const { productQueries, productionQueries, batchQueries, writeoffQueries } = require('../supabase-database');
const { supabase } = require('../supabase-client');
const OperationsLogController = require('./operations-log-controller');

class BatchController {
    
    // –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è frontend - –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–∞—Ä—Ç—ñ–π –ø–æ –≥—Ä—É–ø–∞—Ö —Ç–æ–≤–∞—Ä—ñ–≤
    static async getAllBatchesGrouped(req, res) {
        try {
            console.log('üîÑ getAllBatchesGrouped called');
            
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π batchQueries –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π
            const result = await batchQueries.getAllGroupedByProduct();
            
            console.log(`‚úÖ –ü–æ–≤–µ—Ä–Ω—É—Ç–æ ${result.length} –≥—Ä—É–ø —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞—Ä—Ç—ñ—è–º–∏`);
            console.log(`üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä—Ç—ñ–π: ${result.reduce((sum, p) => sum + p.batches_count, 0)}`);
            
            res.json(result);
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ getAllBatchesGrouped:', error.message);
            res.status(500).json([]); // –ü–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ frontend
        }
    }
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
    static async getBatchesByProduct(req, res) {
        try {
            const { productId } = req.params;
            console.log(`üîÑ getBatchesByProduct called for product ${productId}`);
            
            const batches = await batchQueries.getByProductId(parseInt(productId));
            
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${batches.length} –ø–∞—Ä—Ç—ñ–π –¥–ª—è —Ç–æ–≤–∞—Ä—É ${productId}`);
            res.json(batches || []);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ getBatchesByProduct:', error.message);
            res.status(500).json([]);
        }
    }
    
    // –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π - –±–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
    static async reserveBatches(req, res) {
        try {
            const { product_id, quantity_needed } = req.body;
            
            if (!product_id || !quantity_needed || quantity_needed <= 0) {
                return res.status(400).json({ 
                    success: false, 
                    error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è' 
                });
            }
            
            console.log(`üîÑ –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è ${quantity_needed} —à—Ç —Ç–æ–≤–∞—Ä—É ${product_id}`);
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É (—Å–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ - FIFO)
            const batches = await productionQueries.getByProductId(product_id);
            const availableBatches = batches
                .filter(batch => batch.available_quantity > 0)
                .sort((a, b) => new Date(a.production_date) - new Date(b.production_date));
            
            if (availableBatches.length === 0) {
                return res.json({
                    success: false,
                    reserved_quantity: 0,
                    message: '–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø–∞—Ä—Ç—ñ–π'
                });
            }
            
            let remaining = quantity_needed;
            let totalReserved = 0;
            const reservations = [];
            
            // –†–µ–∑–µ—Ä–≤—É—î–º–æ –ø–æ FIFO –ø—Ä–∏–Ω—Ü–∏–ø—É
            for (const batch of availableBatches) {
                if (remaining <= 0) break;
                
                const canReserve = Math.min(remaining, batch.available_quantity);
                
                if (canReserve > 0) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä—Ç—ñ—é –≤ –ë–î
                    await productionQueries.updateQuantities(batch.id, {
                        available_quantity: batch.available_quantity - canReserve,
                        reserved_quantity: (batch.reserved_quantity || 0) + canReserve
                    });
                    
                    reservations.push({
                        batch_id: batch.id,
                        reserved_quantity: canReserve,
                        production_date: batch.production_date
                    });
                    
                    totalReserved += canReserve;
                    remaining -= canReserve;
                }
            }
            
            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await OperationsLogController.logProductOperation(
                product_id, 
                'RESERVE', 
                totalReserved, 
                { reservations }
            );
            
            res.json({
                success: true,
                reserved_quantity: totalReserved,
                shortage: remaining,
                reservations
            });
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è:', error);
            res.status(500).json({ 
                success: false, 
                error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—ñ' 
            });
        }
    }
    
    // –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤
    static async unreserveBatchesForOrder(req, res) {
        try {
            const { orderId } = req.params;
            console.log(`üîÑ –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}`);
            
            // –ë–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—Ö
            // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ order_items —Ç–∞ allocated_batches
            
            await OperationsLogController.logOrderOperation(
                orderId, 
                'UNRESERVE', 
                { message: '–†–µ–∑–µ—Ä–≤–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω–æ' }
            );
            
                                res.json({ 
                success: true, 
                message: '–†–µ–∑–µ—Ä–≤–∏ —É—Å–ø—ñ—à–Ω–æ –∑–≤—ñ–ª—å–Ω–µ–Ω–æ',
                order_id: parseInt(orderId),
                released_quantity: 0 // –ü–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞
            });
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤:', error);
            res.status(500).json({ 
                success: false, 
                error: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—ñ —Ä–µ–∑–µ—Ä–≤—ñ–≤' 
            });
        }
    }
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –ø–∞—Ä—Ç—ñ—ó
    static async createBatch(req, res) {
        try {
            const { product_id, production_date, total_quantity, expiry_date, responsible, notes } = req.body;
            
            if (!product_id || !total_quantity || total_quantity <= 0) {
                return res.status(400).json({ 
                    success: false, 
                    error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó' 
                });
            }
            
            const newBatch = await productionQueries.create({
                product_id,
                production_date: production_date || new Date().toISOString().split('T')[0],
                production_time: '00:00:00', // –î–æ–¥–∞—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                total_quantity,
                expiry_date,
                responsible,
                notes
            });
            
            // –õ–æ–≥—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó
            await OperationsLogController.logProductOperation(
                product_id, 
                'BATCH_CREATE', 
                total_quantity,
                { batch_id: newBatch.id, responsible }
            );
            
            res.json({ success: true, data: newBatch });
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó:', error);
            res.status(500).json({ 
                success: false, 
                error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó' 
            });
        }
    }
    
    // –Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    static async reserveBatchesForOrderItems(req, res) {
        res.json({ success: true, message: 'Order items reserve - –±–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è', total_reserved: 0 });
    }
    
    static async getExpiringBatches(req, res) {
        try {
            // –ü–∞—Ä—Ç—ñ—ó —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 30 –¥–Ω—ñ–≤
            const thirtyDaysFromNow = new Date();
            thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
            
            const allBatches = await productionQueries.getAll();
            const expiringBatches = allBatches.filter(batch => {
                if (!batch.expiry_date) return false;
                return new Date(batch.expiry_date) <= thirtyDaysFromNow;
            });
            
            res.json(expiringBatches);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ getExpiringBatches:', error);
            res.json([]);
        }
    }
    
    static async getProductAvailability(req, res) {
        try {
            const { productId } = req.params;
            const batches = await productionQueries.getByProductId(parseInt(productId));
            
            const totalAvailable = batches.reduce((sum, batch) => sum + (batch.available_quantity || 0), 0);
                
                res.json({
                product_id: parseInt(productId),
                available: totalAvailable 
            });
        } catch (error) {
            res.json({ available: 0 });
        }
    }
    
    static async writeoffBatch(req, res) {
        try {
            console.log('üöÄ WRITEOFF –ü–†–û–¶–ï–° - –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ!');
            console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:', { batchId: req.params.batchId, body: req.body });
            
            const { batchId } = req.params;
            const { quantity, reason, responsible } = req.body;
            
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            if (!quantity || quantity <= 0) {
                return res.status(400).json({ 
                    success: false, 
                    error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è' 
                });
            }
            
            if (!batchId || isNaN(parseInt(batchId))) {
                return res.status(400).json({ 
                    success: false, 
                    error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –ø–∞—Ä—Ç—ñ—ó' 
                });
            }
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä—Ç—ñ—é
            console.log('üîç –®—É–∫–∞—é –ø–∞—Ä—Ç—ñ—é –∑ ID:', parseInt(batchId));
            const allBatches = await batchQueries.getAll();
            const batch = allBatches.find(b => b.id === parseInt(batchId));
                
            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É –ø–∞—Ä—Ç—ñ—ó:', { 
                –∑–Ω–∞–π–¥–µ–Ω–æ: batch ? '—Ç–∞–∫' : '–Ω—ñ', 
                batchId: parseInt(batchId),
                –¥–æ—Å—Ç—É–ø–Ω–æ: batch?.available_quantity,
                —Ç–æ–≤–∞—Ä: batch?.product_id
            });
                
            if (!batch) {
                console.log('‚ùå –ü–∞—Ä—Ç—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return res.status(404).json({ 
                    success: false, 
                    error: '–ü–∞—Ä—Ç—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' 
                });
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            if (batch.available_quantity < quantity) {
                return res.status(400).json({ 
                    success: false, 
                    error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É –≤ –ø–∞—Ä—Ç—ñ—ó. –î–æ—Å—Ç—É–ø–Ω–æ: ${batch.available_quantity}, –∑–∞–ø–∏—Ç–∞–Ω–æ: ${quantity}` 
                });
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –ø–∞—Ä—Ç—ñ—ó
            const newQuantity = batch.available_quantity - quantity;
            console.log('üîÑ –û–Ω–æ–≤–ª—é—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –ø–∞—Ä—Ç—ñ—ó:', { 
                —Å—Ç–∞—Ä–µ: batch.available_quantity, 
                —Å–ø–∏—Å–∞–Ω–æ: quantity, 
                –Ω–æ–≤–µ: newQuantity 
            });
            
            try {
                await batchQueries.updateQuantities(parseInt(batchId), {
                    available_quantity: newQuantity
                });
                console.log('‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –ø–∞—Ä—Ç—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            } catch (updateError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó:', updateError);
                return res.status(500).json({ 
                    success: false, 
                    error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤ –ø–∞—Ä—Ç—ñ—ó: ' + updateError.message 
                });
            }
            
            // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–ø–∏—Å–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è
            const writeoffData = {
                product_id: batch.product_id,
                total_quantity: quantity,
                boxes_quantity: 0,
                pieces_quantity: quantity,
                reason: reason || '–°–ø–∏—Å–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó',
                writeoff_date: new Date().toISOString().split('T')[0],
                responsible: responsible || '–°–∏—Å—Ç–µ–º–∞',
                notes: `–°–ø–∏—Å–∞–Ω–Ω—è –∑ –ø–∞—Ä—Ç—ñ—ó ${batch.batch_date || batch.production_date}, ID –ø–∞—Ä—Ç—ñ—ó: ${batchId}`,
                created_by_user_id: null
            };
            
            console.log('üíæ –°—Ç–≤–æ—Ä—é—é –∑–∞–ø–∏—Å —Å–ø–∏—Å–∞–Ω–Ω—è –≤ writeoffs:', writeoffData);
            
            let writeoffResult;
            try {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ supabase –∫–ª—ñ—î–Ω—Ç
                const { supabase } = require('../supabase-client');
                
                const { data, error } = await supabase
                    .from('writeoffs')
                    .insert(writeoffData)
                    .select()
                    .single();
                
                console.log('üìä Supabase –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', { data, error });
                
                if (error) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ writeoffs:', error);
                    
                    // –í—ñ–¥–∫–∞—Ç—É—î–º–æ –∑–º—ñ–Ω—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                    await batchQueries.updateQuantities(parseInt(batchId), {
                        available_quantity: batch.available_quantity
                    });
                    console.log('‚úÖ –í—ñ–¥–∫–∞—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ');
                    
                    return res.status(500).json({ 
                        success: false, 
                        error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —Å–ø–∏—Å–∞–Ω–Ω—è –≤ –ë–î: ' + error.message 
                    });
                }
                
                writeoffResult = data;
                console.log('‚úÖ –ó–∞–ø–∏—Å —Å–ø–∏—Å–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ writeoffs:', writeoffResult);
                
                // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
                try {
                    console.log('üìù –õ–æ–≥—É—é –æ–ø–µ—Ä–∞—Ü—ñ—é WRITEOFF...');
                    const logResult = await OperationsLogController.logProductOperation(
                        batch.product_id, 
                        'WRITEOFF', 
                        quantity,
                        { 
                            batch_id: parseInt(batchId),
                            reason,
                            responsible,
                            writeoff_id: writeoffResult?.id || 'unknown'
                        }
                    );
                    console.log('‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞:', logResult);
                } catch (logError) {
                    console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', logError);
                }
                
            } catch (writeoffError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —Å–ø–∏—Å–∞–Ω–Ω—è:', writeoffError);
                
                // –í—ñ–¥–∫–∞—Ç—É—î–º–æ –∑–º—ñ–Ω—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                try {
                    await batchQueries.updateQuantities(parseInt(batchId), {
                        available_quantity: batch.available_quantity
                    });
                    console.log('‚úÖ –í—ñ–¥–∫–∞—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤–∏–∫–æ–Ω–∞–Ω–æ');
                } catch (rollbackError) {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–∞—Ç—É:', rollbackError);
                }
                
                return res.status(500).json({ 
                    success: false, 
                    error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —Å–ø–∏—Å–∞–Ω–Ω—è: ' + writeoffError.message 
                });
            }
            
            console.log('üéâ –°–ø–∏—Å–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
            
            res.json({ 
                success: true, 
                message: `–°–ø–∏—Å–∞–Ω–æ ${quantity} —à—Ç –∑ –ø–∞—Ä—Ç—ñ—ó ${batch.batch_date || batch.production_date}`,
                writeoff_id: writeoffResult.id,
                remaining_quantity: newQuantity,
                batch_id: parseInt(batchId),
                product_id: batch.product_id
            });
            
            console.log('üì® Response –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ñ—É–Ω–∫—Ü—ñ—è writeoffBatch –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–ø–∏—Å–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó:', error);
            console.error('‚ùå Stack:', error.stack);
            res.status(500).json({ 
                success: false, 
                error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–Ω—ñ: ' + error.message 
            });
        }
    }
}

module.exports = BatchController;
