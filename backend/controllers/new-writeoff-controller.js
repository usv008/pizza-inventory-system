// controllers/new-writeoff-controller.js - –ù–æ–≤–∏–π writeoff –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä

const { supabase } = require('../supabase-client');
const OperationsLogController = require('./operations-log-controller');

class NewWriteoffController {
    
    static async createWriteoff(req, res) {
        try {
            console.log('üÜï –ù–û–í–ò–ô WRITEOFF API - –∑–∞–ø–∏—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ!');
            console.log('üìã –î–∞–Ω—ñ:', req.body);
            
            const { batch_id, quantity, reason, responsible } = req.body;
            
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            if (!batch_id || !quantity || quantity <= 0) {
                return res.status(400).json({ 
                    success: false, 
                    error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: –ø–æ—Ç—Ä—ñ–±–µ–Ω batch_id —Ç–∞ quantity > 0' 
                });
            }
            
            // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ batchQueries –¥–∏–Ω–∞–º—ñ—á–Ω–æ
            const { batchQueries } = require('../supabase-database');
            
            // 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞—Ä—Ç—ñ—é
            console.log('üîç –®—É–∫–∞—é –ø–∞—Ä—Ç—ñ—é –∑ ID:', batch_id);
            const allBatches = await batchQueries.getAll();
            const batch = allBatches.find(b => b.id === parseInt(batch_id));
            
            if (!batch) {
                console.log('‚ùå –ü–∞—Ä—Ç—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return res.status(404).json({ 
                    success: false, 
                    error: '–ü–∞—Ä—Ç—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' 
                });
            }
            
            console.log('‚úÖ –ü–∞—Ä—Ç—ñ—é –∑–Ω–∞–π–¥–µ–Ω–æ:', { 
                id: batch.id, 
                product_id: batch.product_id,
                available: batch.available_quantity 
            });
            
            // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            if (batch.available_quantity < quantity) {
                return res.status(400).json({ 
                    success: false, 
                    error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É. –î–æ—Å—Ç—É–ø–Ω–æ: ${batch.available_quantity}, –∑–∞–ø–∏—Ç–∞–Ω–æ: ${quantity}` 
                });
            }
            
            // 3. –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä—Ç—ñ—é (–≤—ñ–¥–Ω—ñ–º–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å)
            const newQuantity = batch.available_quantity - quantity;
            console.log('üîÑ –û–Ω–æ–≤–ª—é—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –ø–∞—Ä—Ç—ñ—ó:', { —Å—Ç–∞—Ä–µ: batch.available_quantity, –Ω–æ–≤–µ: newQuantity });
            
            await batchQueries.updateQuantities(parseInt(batch_id), {
                available_quantity: newQuantity
            });
            console.log('‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –ø–∞—Ä—Ç—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ');
            
            // 4. –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ writeoffs
            const writeoffData = {
                product_id: batch.product_id,
                total_quantity: quantity,
                boxes_quantity: 0,
                pieces_quantity: quantity,
                reason: reason || '–°–ø–∏—Å–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π API',
                writeoff_date: new Date().toISOString().split('T')[0],
                responsible: responsible || '–°–∏—Å—Ç–µ–º–∞',
                notes: `–°–ø–∏—Å–∞–Ω–Ω—è –∑ –ø–∞—Ä—Ç—ñ—ó ${batch.batch_date || batch.production_date}, batch_id: ${batch_id}`,
                created_by_user_id: null
            };
            
            console.log('üíæ –°—Ç–≤–æ—Ä—é—é –∑–∞–ø–∏—Å –≤ writeoffs:', writeoffData);
            
            const { data: writeoffResult, error: writeoffError } = await supabase
                .from('writeoffs')
                .insert(writeoffData)
                .select()
                .single();
                
            if (writeoffError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è writeoff:', writeoffError);
                
                // Rollback - –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –ø–∞—Ä—Ç—ñ—ó
                await batchQueries.updateQuantities(parseInt(batch_id), {
                    available_quantity: batch.available_quantity
                });
                console.log('üîô Rollback –≤–∏–∫–æ–Ω–∞–Ω–æ');
                
                return res.status(500).json({ 
                    success: false, 
                    error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —Å–ø–∏—Å–∞–Ω–Ω—è: ' + writeoffError.message 
                });
            }
            
            console.log('‚úÖ Writeoff —Å—Ç–≤–æ—Ä–µ–Ω–æ:', writeoffResult);
            
            // 5. –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            try {
                console.log('üìù –õ–æ–≥—É—é –æ–ø–µ—Ä–∞—Ü—ñ—é...');
                const logResult = await OperationsLogController.logProductOperation(
                    batch.product_id, 
                    'NEW_WRITEOFF', 
                    quantity,
                    { 
                        batch_id: parseInt(batch_id),
                        reason,
                        responsible,
                        writeoff_id: writeoffResult.id,
                        api_version: 'NEW_API'
                    }
                );
                console.log('‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞:', logResult);
            } catch (logError) {
                console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', logError);
            }
            
            // 6. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.log('üéâ –°–ø–∏—Å–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
            res.json({ 
                success: true, 
                message: `–°–ø–∏—Å–∞–Ω–æ ${quantity} —à—Ç –∑ –ø–∞—Ä—Ç—ñ—ó ${batch.batch_date || batch.production_date}`,
                writeoff_id: writeoffResult.id,
                remaining_quantity: newQuantity,
                batch_id: parseInt(batch_id),
                product_id: batch.product_id,
                api_version: 'NEW_WRITEOFF_API'
            });
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –Ω–æ–≤–æ–º—É writeoff:', error);
            console.error('‚ùå Stack:', error.stack);
            res.status(500).json({ 
                success: false, 
                error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message 
            });
        }
    }
    
    static async getWriteoffStatus(req, res) {
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å writeoffs
            const { data: writeoffs, error } = await supabase
                .from('writeoffs')
                .select('*')
                .order('created_at', { ascending: false })
                .limit(10);
                
            if (error) throw error;
            
            res.json({
                success: true,
                total_writeoffs: writeoffs.length,
                recent_writeoffs: writeoffs,
                message: '–°—Ç–∞—Ç—É—Å writeoffs —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π API',
                timestamp: new Date().toISOString()
            });
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É writeoffs:', error);
            res.status(500).json({ 
                success: false, 
                error: error.message 
            });
        }
    }
}

module.exports = NewWriteoffController; 