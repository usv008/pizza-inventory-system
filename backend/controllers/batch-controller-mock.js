// Mock batch controller –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è writeoffs –±–µ–∑ Supabase

class MockBatchController {
    // Mock –¥–∞–Ω–Ω—ñ –ø–∞—Ä—Ç—ñ–π
    static mockBatches = [
        {
            id: 10,
            product_id: 39,
            batch_date: '2025-01-19',
            production_date: '2025-01-19',
            available_quantity: 100,
            total_quantity: 100,
            status: 'ACTIVE'
        }
    ];

    // Mock –¥–∞–Ω–Ω—ñ —Å–ø–∏—Å–∞–Ω—å
    static mockWriteoffs = [];

    static async writeoffBatch(req, res) {
        try {
            console.log('üîÑ MOCK writeoffBatch –≤–∏–∫–ª–∏–∫–∞–Ω–æ:', { batchId: req.params.batchId, body: req.body });
            const { batchId } = req.params;
            const { quantity, reason, responsible } = req.body;
            
            if (!quantity || quantity <= 0) {
                return res.status(400).json({ 
                    success: false, 
                    error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è' 
                });
            }
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞—Ä—Ç—ñ—é –≤ mock –¥–∞–Ω–∏—Ö
            const batch = MockBatchController.mockBatches.find(b => b.id === parseInt(batchId));
            
            if (!batch) {
                console.log('‚ùå –ü–∞—Ä—Ç—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                return res.status(404).json({ 
                    success: false, 
                    error: '–ü–∞—Ä—Ç—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' 
                });
            }
            
            if (batch.available_quantity < quantity) {
                return res.status(400).json({ 
                    success: false, 
                    error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–≤–∞—Ä—É –≤ –ø–∞—Ä—Ç—ñ—ó. –î–æ—Å—Ç—É–ø–Ω–æ: ${batch.available_quantity}` 
                });
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            const newQuantity = batch.available_quantity - quantity;
            batch.available_quantity = newQuantity;
            
            console.log('‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –ø–∞—Ä—Ç—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —Å–ø–∏—Å–∞–Ω–Ω—è
            const writeoffId = MockBatchController.mockWriteoffs.length + 1;
            const writeoff = {
                id: writeoffId,
                product_id: batch.product_id,
                batch_id: parseInt(batchId),
                quantity: quantity,
                reason: reason || '–°–ø–∏—Å–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó',
                responsible: responsible || 'system',
                writeoff_date: new Date().toISOString().split('T')[0],
                batch_date: batch.batch_date
            };
            
            MockBatchController.mockWriteoffs.push(writeoff);
            console.log('‚úÖ –ó–∞–ø–∏—Å —Å–ø–∏—Å–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ:', writeoff);
            
            res.json({ 
                success: true, 
                message: `–°–ø–∏—Å–∞–Ω–æ ${quantity} —à—Ç –∑ –ø–∞—Ä—Ç—ñ—ó ${batch.batch_date}`,
                writeoff_id: writeoffId,
                remaining_quantity: newQuantity
            });
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–∏—Å–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó:', error);
            res.status(500).json({ 
                success: false, 
                error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–Ω—ñ' 
            });
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
    static async getStatus(req, res) {
        res.json({
            batches: MockBatchController.mockBatches,
            writeoffs: MockBatchController.mockWriteoffs
        });
    }
}

module.exports = MockBatchController; 