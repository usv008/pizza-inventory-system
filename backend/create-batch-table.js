const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –≤ –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É
const dbPath = path.join(__dirname, '..', 'pizza_inventory.db');
const db = new sqlite3.Database(dbPath);

console.log('üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é production_batches...');

db.serialize(() => {
    // –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
    db.run(`CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        code TEXT UNIQUE,
        weight REAL,
        barcode TEXT,
        pieces_per_box INTEGER DEFAULT 1,
        stock_pieces INTEGER DEFAULT 0,
        stock_boxes INTEGER DEFAULT 0,
        min_stock_pieces INTEGER DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ products:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è products –≥–æ—Ç–æ–≤–∞');
        }
    });

    db.run(`CREATE TABLE IF NOT EXISTS production (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER NOT NULL,
        production_date DATE NOT NULL,
        production_time TIME,
        total_quantity INTEGER NOT NULL,
        boxes_quantity INTEGER DEFAULT 0,
        pieces_quantity INTEGER DEFAULT 0,
        expiry_date DATE,
        responsible TEXT,
        notes TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products (id)
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è production –≥–æ—Ç–æ–≤–∞');
        }
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø–∞—Ä—Ç—ñ–π
    db.run(`CREATE TABLE IF NOT EXISTS production_batches (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER NOT NULL,
        batch_date DATE NOT NULL,
        production_date DATE NOT NULL,
        total_quantity INTEGER NOT NULL,
        available_quantity INTEGER NOT NULL,
        reserved_quantity INTEGER DEFAULT 0,
        expiry_date DATE NOT NULL,
        production_id INTEGER,
        status TEXT DEFAULT 'ACTIVE',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products (id),
        FOREIGN KEY (production_id) REFERENCES production (id),
        UNIQUE(product_id, batch_date)
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_batches:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è production_batches —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        }
    });

    // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    db.run(`INSERT OR IGNORE INTO products (id, name, code, pieces_per_box) VALUES 
        (1, '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', 'MARG', 8),
        (2, '–ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ', 'PEPR', 8),
        (3, '–ü—ñ—Ü–∞ –ì–∞–≤–∞–π—Å—å–∫–∞', 'HAWA', 8)`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:', err.message);
        } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –¥–æ–¥–∞–Ω—ñ');
        }
    });

    // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ
    const today = new Date().toISOString().split('T')[0];
    const expiry = new Date();
    expiry.setDate(expiry.getDate() + 7);
    const expiryDate = expiry.toISOString().split('T')[0];

    db.run(`INSERT OR IGNORE INTO production (id, product_id, production_date, total_quantity, expiry_date, responsible) VALUES 
        (1, 1, ?, 50, ?, 'system'),
        (2, 2, ?, 30, ?, 'system')`, [today, expiryDate, today, expiryDate], (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞:', err.message);
        } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–µ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –¥–æ–¥–∞–Ω–æ');
        }
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    db.run(`CREATE INDEX IF NOT EXISTS idx_batches_product_date ON production_batches(product_id, batch_date)`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É:', err.message);
        } else {
            console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞—Ä—Ç—ñ–π —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_batches_expiry ON production_batches(expiry_date, status)`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É —Ç–µ—Ä–º—ñ–Ω—ñ–≤:', err.message);
        } else {
            console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å —Ç–µ—Ä–º—ñ–Ω—ñ–≤ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }
    });

    // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –±–∞–∑—É –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
    setTimeout(() => {
        db.close((err) => {
            if (err) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ë–î:', err.message);
            } else {
                console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!');
                console.log(`üìÇ –§–∞–π–ª –±–∞–∑–∏: ${dbPath}`);
            }
        });
    }, 1000);
}); 