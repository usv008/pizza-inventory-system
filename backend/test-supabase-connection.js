const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

console.log('üîç –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase...');
console.log('URL:', process.env.SUPABASE_URL);
console.log('Anon Key:', process.env.SUPABASE_ANON_KEY ? '‚úÖ –Ñ' : '‚ùå –ù–µ–º–∞—î');

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY
);

async function testConnection() {
    try {
        console.log('\nüîó –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
        
        // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é PostgreSQL
        const { data, error } = await supabase
            .from('information_schema.tables')
            .select('table_name')
            .limit(1);
        
        if (error) {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error.message);
            
            // –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç
            const { data: simpleData, error: simpleError } = await supabase
                .from('pg_tables')
                .select('tablename')
                .limit(1);
                
            if (simpleError) {
                console.log('‚ùå –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç —Ç–∞–∫–æ–∂ –Ω–µ –≤–¥–∞–≤—Å—è:', simpleError.message);
            } else {
                console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î! –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—ñ:', simpleData);
            }
        } else {
            console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î!');
            console.log('–î–∞–Ω—ñ:', data);
        }
        
    } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', err.message);
    }
}

testConnection();
