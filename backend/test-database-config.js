#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ SQLite —Ç–∞ Supabase
 */

const {
    USE_SUPABASE,
    MIGRATE_SESSIONS_TO_SUPABASE,
    createDatabaseAdapter,
    checkDatabaseConnection,
    getDatabaseStats,
    switchDatabaseMode
} = require('./config/database');

async function testDatabaseConfig() {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Database Configuration...\n');
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    console.log('1Ô∏è‚É£ –ü–æ—Ç–æ—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:');
    console.log(`   USE_SUPABASE: ${USE_SUPABASE}`);
    console.log(`   MIGRATE_SESSIONS_TO_SUPABASE: ${MIGRATE_SESSIONS_TO_SUPABASE}`);
    
    // –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –∑\'—î–¥–Ω–∞–Ω–Ω—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ:');
    const connected = await checkDatabaseConnection();
    
    if (!connected) {
        console.error('‚ùå –ó\'—î–¥–Ω–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è');
        return;
    }
    
    // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\n3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:');
    const stats = await getDatabaseStats();
    for (const [table, count] of Object.entries(stats)) {
        console.log(`   ${table}: ${count}`);
    }
    
    // –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–µ—Ä–∞
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç DatabaseAdapter:');
    const adapter = createDatabaseAdapter();
    
    try {
        const users = await adapter
            .table('users')
            .select(['username', 'role'], { limit: 2 });
            
        console.log(`   ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä:`);
        users.forEach((user, index) => {
            console.log(`      ${index + 1}. ${user.username} (${user.role})`);
        });
        
    } catch (error) {
        console.error(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞: ${error.message}`);
    } finally {
        adapter.close();
    }
    
    // –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É:');
    const originalMode = USE_SUPABASE;
    
    console.log(`   –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: ${originalMode ? 'Supabase' : 'SQLite'}`);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π —Ä–µ–∂–∏–º
    switchDatabaseMode(!originalMode);
    console.log(`   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: ${!originalMode ? 'Supabase' : 'SQLite'}`);
    
    // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞–∑–∞–¥
    switchDatabaseMode(originalMode);
    console.log(`   –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –¥–æ: ${originalMode ? 'Supabase' : 'SQLite'}`);
    
    console.log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ Database Configuration –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
    testDatabaseConfig()
        .then(() => {
            console.log('\nüìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Database Configuration –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { testDatabaseConfig };