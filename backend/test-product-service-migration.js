#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó productService
 * –ü–æ—Ä—ñ–≤–Ω—é—î —Ä–æ–±–æ—Ç—É SQLite —Ç–∞ Supabase –≤–µ—Ä—Å—ñ–π
 */

require('dotenv').config();
const productServiceV2 = require('./services/productService-v2');
const { switchDatabaseMode } = require('./config/database');

async function testProductServiceMigration() {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó productService...\n');
    
    try {
        // –¢–µ—Å—Ç 1: SQLite —Ä–µ–∂–∏–º
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç productService –≤ SQLite —Ä–µ–∂–∏–º—ñ...');
        switchDatabaseMode(false);
        await testProductOperations('SQLite');
        
        // –¢–µ—Å—Ç 2: Supabase —Ä–µ–∂–∏–º
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç productService –≤ Supabase —Ä–µ–∂–∏–º—ñ...');
        switchDatabaseMode(true);
        await testProductOperations('Supabase');
        
        // –¢–µ—Å—Ç 3: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        console.log('\n3Ô∏è‚É£ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...');
        await compareResults();
        
        console.log('\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó productService –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
        throw error;
    }
}

async function testProductOperations(modeName) {
    try {
        console.log(`   üìä ${modeName}: –¢–µ—Å—Ç getAllProducts...`);
        const allProducts = await productServiceV2.getAllProducts();
        console.log(`   ‚úÖ ${modeName}: –û—Ç—Ä–∏–º–∞–Ω–æ ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤`);
        
        if (allProducts.length > 0) {
            const firstProduct = allProducts[0];
            console.log(`      –ü–µ—Ä—à–∏–π –ø—Ä–æ–¥—É–∫—Ç: ${firstProduct.name} (${firstProduct.code})`);
            
            // –¢–µ—Å—Ç getProductById
            console.log(`   üîç ${modeName}: –¢–µ—Å—Ç getProductById...`);
            const productById = await productServiceV2.getProductById(firstProduct.id);
            console.log(`   ‚úÖ ${modeName}: –û—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç: ${productById.name}`);
            
            // –¢–µ—Å—Ç getProductByCode
            console.log(`   üîé ${modeName}: –¢–µ—Å—Ç getProductByCode...`);
            const productByCode = await productServiceV2.getProductByCode(firstProduct.code);
            console.log(`   ‚úÖ ${modeName}: –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç –∑–∞ –∫–æ–¥–æ–º: ${productByCode ? productByCode.name : '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
        }
        
        // –¢–µ—Å—Ç –ø–æ—à—É–∫—É
        console.log(`   üîç ${modeName}: –¢–µ—Å—Ç searchProducts...`);
        const searchResults = await productServiceV2.searchProducts('–ü—ñ—Ü–∞');
        console.log(`   ‚úÖ ${modeName}: –ó–Ω–∞–π–¥–µ–Ω–æ ${searchResults.length} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º "–ü—ñ—Ü–∞"`);
        
        return {
            mode: modeName,
            totalProducts: allProducts.length,
            searchResults: searchResults.length,
            firstProduct: allProducts[0] || null
        };
        
    } catch (error) {
        console.error(`   ‚ùå ${modeName}: –ü–æ–º–∏–ª–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π - ${error.message}`);
        throw error;
    }
}

async function compareResults() {
    try {
        // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ SQLite
        switchDatabaseMode(false);
        const sqliteProducts = await productServiceV2.getAllProducts();
        
        // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ Supabase
        switchDatabaseMode(true);
        const supabaseProducts = await productServiceV2.getAllProducts();
        
        console.log(`   SQLite: ${sqliteProducts.length} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤`);
        console.log(`   Supabase: ${supabaseProducts.length} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤`);
        
        // –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        if (sqliteProducts.length === supabaseProducts.length) {
            console.log('   ‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –æ–¥–Ω–∞–∫–æ–≤–∞');
        } else {
            console.log('   ‚ö†Ô∏è  –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è');
        }
        
        // –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä—à–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        if (sqliteProducts.length > 0 && supabaseProducts.length > 0) {
            const sqliteFirst = sqliteProducts[0];
            const supabaseFirst = supabaseProducts.find(p => p.code === sqliteFirst.code);
            
            if (supabaseFirst) {
                console.log('   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –≤ –æ–±–æ—Ö –ë–î');
                console.log(`      SQLite: ${sqliteFirst.name} - ${sqliteFirst.stock_pieces} —à—Ç`);
                console.log(`      Supabase: ${supabaseFirst.name} - ${supabaseFirst.stock_pieces} —à—Ç`);
                
                // –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è
                const fieldsToCompare = ['name', 'code', 'weight', 'pieces_per_box'];
                let fieldsMatch = true;
                
                for (const field of fieldsToCompare) {
                    if (sqliteFirst[field] !== supabaseFirst[field]) {
                        console.log(`      ‚ö†Ô∏è  –ü–æ–ª–µ ${field} –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è: "${sqliteFirst[field]}" vs "${supabaseFirst[field]}"`);
                        fieldsMatch = false;
                    }
                }
                
                if (fieldsMatch) {
                    console.log('   ‚úÖ –ö–ª—é—á–æ–≤—ñ –ø–æ–ª—è —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å');
                }
            } else {
                console.log('   ‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç –≤ Supabase');
            }
        }
        
    } catch (error) {
        console.error('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:', error.message);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
    testProductServiceMigration()
        .then(() => {
            console.log('\nüìã –ú—ñ–≥—Ä–∞—Ü—ñ—è productService –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–∞');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { testProductServiceMigration };