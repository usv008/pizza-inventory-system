const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

const dbPath = path.join(__dirname, 'pizza_inventory.db');
const db = new sqlite3.Database(dbPath);

// –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
const tables = [
    'products',
    'stock_movements', 
    'clients',
    'orders',
    'order_items',
    'writeoffs',
    'production',
    'production_plans',
    'production_plan_items', 
    'production_settings',
    'users',
    'user_sessions',
    'user_audit'
];

async function exportTable(tableName) {
    return new Promise((resolve, reject) => {
        db.all(`SELECT * FROM ${tableName}`, (err, rows) => {
            if (err) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É —Ç–∞–±–ª–∏—Ü—ñ ${tableName}:`, err);
                reject(err);
            } else {
                console.log(`‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${rows.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ ${tableName}`);
                resolve(rows);
            }
        });
    });
}

async function exportAllData() {
    console.log('üöÄ –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –µ–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑ SQLite...\n');
    
    const exportData = {};
    
    for (const table of tables) {
        try {
            exportData[table] = await exportTable(table);
        } catch (error) {
            console.error(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é ${table}`);
            exportData[table] = [];
        }
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —É JSON —Ñ–∞–π–ª
    const exportPath = path.join(__dirname, 'sqlite-export.json');
    fs.writeFileSync(exportPath, JSON.stringify(exportData, null, 2));
    
    console.log(`\nüì¶ –ï–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É: ${exportPath}`);
    
    // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:');
    for (const [table, data] of Object.entries(exportData)) {
        console.log(`   ${table}: ${data.length} –∑–∞–ø–∏—Å—ñ–≤`);
    }
    
    db.close();
}

exportAllData().catch(console.error);
