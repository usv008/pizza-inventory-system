#!/usr/bin/env node

/**
 * User Migration Script
 * –ú—ñ–≥—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ SQLite –¥–æ Supabase
 */

const authRouter = require('./authRouter');
const database = require('../database');

async function migrateUsers() {
  console.log('üöÄ Starting User Migration from SQLite to Supabase...\n');

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó
    const beforeStats = await authRouter.getAuthStats();
    console.log('üìä Before Migration:');
    console.log(`   Legacy users: ${beforeStats.legacy}`);
    console.log(`   Supabase users: ${beforeStats.supabase}`);
    console.log(`   Migration progress: ${beforeStats.migrationProgress}%\n`);

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ SQLite
    const legacyUsers = await database.userQueries.getAll();
    console.log(`üìã Found ${legacyUsers.length} users in SQLite database\n`);

    const results = {
      total: legacyUsers.length,
      migrated: 0,
      skipped: 0,
      errors: 0,
      details: []
    };

    for (const user of legacyUsers) {
      console.log(`üîÑ Migrating user: ${user.username} (ID: ${user.id})...`);

      try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –º—ñ–≥—Ä–æ–≤–∞–Ω–∏–π
        const existingUser = await checkUserExists(user);
        
        if (existingUser) {
          console.log(`   ‚è≠Ô∏è  User already exists in Supabase (${existingUser.supabase_id})`);
          results.skipped++;
          results.details.push({
            username: user.username,
            status: 'skipped',
            reason: 'Already exists in Supabase'
          });
          continue;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Supabase Auth
        const supabaseUser = await createSupabaseUser(user);
        
        if (!supabaseUser) {
          console.log(`   ‚ùå Failed to create user in Supabase Auth`);
          results.errors++;
          results.details.push({
            username: user.username,
            status: 'error',
            reason: 'Supabase Auth creation failed'
          });
          continue;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ SQLite –∑–∞–ø–∏—Å –∑ Supabase ID
        await updateLegacyUserWithSupabaseId(user.id, supabaseUser.id);

        console.log(`   ‚úÖ Successfully migrated to Supabase (${supabaseUser.id})`);
        results.migrated++;
        results.details.push({
          username: user.username,
          status: 'migrated',
          supabase_id: supabaseUser.id,
          email: supabaseUser.email
        });

      } catch (error) {
        console.error(`   ‚ùå Migration failed:`, error.message);
        results.errors++;
        results.details.push({
          username: user.username,
          status: 'error',
          reason: error.message
        });
      }

      // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó
    console.log('\nüéØ Migration Summary:');
    console.log(`   Total users: ${results.total}`);
    console.log(`   Migrated: ${results.migrated}`);
    console.log(`   Skipped: ${results.skipped}`);
    console.log(`   Errors: ${results.errors}`);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó
    const afterStats = await authRouter.getAuthStats();
    console.log('\nüìä After Migration:');
    console.log(`   Legacy users: ${afterStats.legacy}`);
    console.log(`   Supabase users: ${afterStats.supabase}`);
    console.log(`   Migration progress: ${afterStats.migrationProgress}%`);

    // –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
    if (results.details.length > 0) {
      console.log('\nüìù Detailed Report:');
      results.details.forEach(detail => {
        const status = detail.status === 'migrated' ? '‚úÖ' : 
                      detail.status === 'skipped' ? '‚è≠Ô∏è' : '‚ùå';
        console.log(`   ${status} ${detail.username}: ${detail.reason || detail.supabase_id || 'migrated'}`);
      });
    }

    console.log('\nüèÅ User migration completed!');
    return results;

  } catch (error) {
    console.error('üí• Migration failed:', error.message);
    console.error('üîç Error details:', error);
    throw error;
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î –≤ Supabase
 */
async function checkUserExists(user) {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ email –≤ Supabase
    if (user.email) {
      const supabaseClient = authRouter.supabaseAuth.getServiceClient();
      const { data: users, error } = await supabaseClient
        .from('users')
        .select('supabase_id, username, email')
        .eq('email', user.email)
        .limit(1);

      if (error) {
        console.log(`   üîç Supabase check error: ${error.message}`);
        return null;
      }

      if (users && users.length > 0) {
        return users[0];
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ username
    const supabaseClient = authRouter.supabaseAuth.getServiceClient();
    const { data: users, error } = await supabaseClient
      .from('users')
      .select('supabase_id, username, email')
      .eq('username', user.username)
      .limit(1);

    if (error) {
      console.log(`   üîç Supabase username check error: ${error.message}`);
      return null;
    }

    return users && users.length > 0 ? users[0] : null;

  } catch (error) {
    console.log(`   üîç User existence check failed: ${error.message}`);
    return null;
  }
}

/**
 * –°—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Supabase Auth —Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ users
 */
async function createSupabaseUser(user) {
  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ email —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î, –∑ –æ—á–∏—â–µ–Ω–Ω—è–º username –≤—ñ–¥ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ñ–≤
    const cleanUsername = user.username.replace(/[^a-zA-Z0-9_-]/g, '_').toLowerCase();
    const email = user.email || `${cleanUsername}@pizza-system.local`;
    
    // –¢–∏–º—á–∞—Å–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó
    const tempPassword = `temp_${cleanUsername}_${Date.now()}`;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Supabase Auth
    const supabaseAuth = authRouter.supabaseAuth.getServiceClient().auth.admin;
    const { data: authUser, error: authError } = await supabaseAuth.createUser({
      email: email,
      password: tempPassword,
      email_confirm: true,
      user_metadata: {
        username: user.username,
        migrated_from_legacy: true,
        legacy_id: user.id,
        migration_date: new Date().toISOString()
      }
    });

    if (authError) {
      throw new Error(`Supabase Auth error: ${authError.message}`);
    }

    console.log(`   üîê Supabase Auth user created: ${authUser.user.id}`);

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ —Ç–∞–±–ª–∏—Ü—ñ users
    const supabaseClient = authRouter.supabaseAuth.getServiceClient();
    const { data: dbUser, error: dbError } = await supabaseClient
      .from('users')
      .insert({
        supabase_id: authUser.user.id,
        username: user.username,
        email: email,
        full_name: user.username, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ username —è–∫ full_name
        role: user.role,
        permissions: user.permissions,
        is_active: user.active === 1,
        created_at: user.created_at || new Date().toISOString()
      })
      .select()
      .single();

    if (dbError) {
      // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ DB record, –≤–∏–¥–∞–ª—è—î–º–æ Auth user
      await supabaseAuth.deleteUser(authUser.user.id);
      throw new Error(`Database error: ${dbError.message}`);
    }

    console.log(`   üìù Database record created: ID ${dbUser.id}`);

    return {
      id: authUser.user.id,
      email: authUser.user.email,
      database_id: dbUser.id
    };

  } catch (error) {
    console.error(`   üö® Create Supabase user failed: ${error.message}`);
    throw error;
  }
}

/**
 * –û–Ω–æ–≤–ª—é—î legacy user –∑ Supabase ID
 */
async function updateLegacyUserWithSupabaseId(legacyId, supabaseId) {
  try {
    // –î–æ–¥–∞—î–º–æ Supabase ID –¥–æ legacy –∑–∞–ø–∏—Å—É –¥–ª—è –∑–≤'—è–∑–∫—É
    const db = database.db;
    
    await new Promise((resolve, reject) => {
      db.run(`
        UPDATE users 
        SET supabase_id = ?, 
            auth_type = 'dual',
            updated_at = datetime('now')
        WHERE id = ?
      `, [supabaseId, legacyId], function(err) {
        if (err) reject(err);
        else resolve(this.changes);
      });
    });

    console.log(`   üîó Legacy record updated with Supabase ID`);
    return true;

  } catch (error) {
    console.error(`   üö® Legacy update failed: ${error.message}`);
    throw error;
  }
}

/**
 * Batch migration –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
async function migrateBatch(usernames = null, excludeUsernames = null) {
  console.log('üöÄ Starting Batch User Migration...\n');

  try {
    let legacyUsers = await database.userQueries.getAll();
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ —ñ–º–µ–Ω–∞—Ö —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
    if (usernames && usernames.length > 0) {
      legacyUsers = legacyUsers.filter(user => usernames.includes(user.username));
      console.log(`üìã Filtered to ${legacyUsers.length} specified users`);
    }
    
    // –í–∏–∫–ª—é—á–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
    if (excludeUsernames && excludeUsernames.length > 0) {
      legacyUsers = legacyUsers.filter(user => !excludeUsernames.includes(user.username));
      console.log(`üìã Excluded ${excludeUsernames.length} users, ${legacyUsers.length} remaining`);
    }

    if (legacyUsers.length === 0) {
      console.log('‚ÑπÔ∏è  No users to migrate');
      return { total: 0, migrated: 0, skipped: 0, errors: 0 };
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –º—ñ–≥—Ä–∞—Ü—ñ—ó, –∞–ª–µ –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–º —Å–ø–∏—Å–∫–æ–º
    // –¢–∏–º—á–∞—Å–æ–≤–æ –∑–∞–º—ñ–Ω—é—î–º–æ –º–µ—Ç–æ–¥ getAll
    const originalGetAll = database.userQueries.getAll;
    database.userQueries.getAll = async () => legacyUsers;
    
    const result = await migrateUsers();
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥
    database.userQueries.getAll = originalGetAll;
    
    return result;

  } catch (error) {
    console.error('üí• Batch migration failed:', error.message);
    throw error;
  }
}

// Run migration if called directly
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log(`
User Migration Script Help:

Basic migration:
  node migrateUsers.js

Migrate specific users:
  node migrateUsers.js --users user1,user2,user3

Exclude specific users:
  node migrateUsers.js --exclude admin,test

Examples:
  node migrateUsers.js --users "john,jane"
  node migrateUsers.js --exclude "admin"
    `);
    process.exit(0);
  }

  const usersIndex = args.indexOf('--users');
  const excludeIndex = args.indexOf('--exclude');
  
  const usernames = usersIndex !== -1 && args[usersIndex + 1] ? 
    args[usersIndex + 1].split(',').map(u => u.trim()) : null;
  const excludeUsernames = excludeIndex !== -1 && args[excludeIndex + 1] ? 
    args[excludeIndex + 1].split(',').map(u => u.trim()) : null;

  (async () => {
    try {
      const result = usernames || excludeUsernames ? 
        await migrateBatch(usernames, excludeUsernames) :
        await migrateUsers();
      
      const success = result.errors === 0;
      console.log(`\nüèÅ Migration ${success ? 'COMPLETED' : 'COMPLETED WITH ERRORS'}`);
      process.exit(success ? 0 : 1);
    } catch (error) {
      console.error('üí• Migration failed:', error);
      process.exit(1);
    }
  })();
}

module.exports = { 
  migrateUsers, 
  migrateBatch, 
  checkUserExists, 
  createSupabaseUser,
  updateLegacyUserWithSupabaseId 
}; 