#!/usr/bin/env node

/**
 * Writeoff Service Migration Test
 * –¢–µ—Å—Ç—É—î –º—ñ–≥—Ä–∞—Ü—ñ—é Writeoff Service –∑ SQLite –Ω–∞ Supabase
 */

const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env') });

// Import services
const WriteoffService = require('./services/writeoffService');
const SupabaseWriteoffService = require('./services/supabaseWriteoffService');  
const HybridWriteoffService = require('./services/hybridWriteoffService');

// Import dependencies
const database = require('./database');
const OperationsLogController = require('./controllers/operations-log-controller');

let testResults = {
    legacy: { success: 0, failed: 0, errors: [] },
    supabase: { success: 0, failed: 0, errors: [] },
    hybrid: { success: 0, failed: 0, errors: [] }
};

// Test writeoff data
const testWriteoff = {
    product_id: 1, // Assuming product with ID 1 exists
    batch_id: null,
    total_quantity: 5, // –ü—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–ª–µ –¥–ª—è SQLite
    quantity: 5, // –î–ª—è Supabase
    reason: '–¢–µ—Å—Ç–æ–≤–µ —Å–ø–∏—Å–∞–Ω–Ω—è',
    notes: '–°—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó',
    writeoff_date: new Date().toISOString().split('T')[0], // –¢—ñ–ª—å–∫–∏ –¥–∞—Ç–∞
    responsible: 'test_user' // –ü—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–ª–µ –¥–ª—è SQLite
};

/**
 * Utility functions
 */
function logTest(service, test, success, message, error = null) {
    const status = success ? '‚úÖ' : '‚ùå';
    console.log(`${status} [${service.toUpperCase()}] ${test}: ${message}`);
    
    if (success) {
        testResults[service].success++;
    } else {
        testResults[service].failed++;
        if (error) {
            testResults[service].errors.push({ test, error: error.message });
        }
    }
}

function printResults() {
    console.log('\n' + '='.repeat(70));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø WRITEOFF SERVICE –ú–Ü–ì–†–ê–¶–Ü–á');
    console.log('='.repeat(70));
    
    Object.keys(testResults).forEach(service => {
        const result = testResults[service];
        const total = result.success + result.failed;
        const percentage = total > 0 ? Math.round((result.success / total) * 100) : 0;
        
        console.log(`\nüîß ${service.toUpperCase()} SERVICE:`);
        console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${result.success}`);
        console.log(`   ‚ùå –ü–æ–º–∏–ª–æ–∫: ${result.failed}`);
        console.log(`   üìà –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: ${percentage}%`);
        
        if (result.errors.length > 0) {
            console.log(`   üö® –ü–æ–º–∏–ª–∫–∏:`);
            result.errors.forEach((err, index) => {
                console.log(`      ${index + 1}. ${err.test}: ${err.error}`);
            });
        }
    });
    
    console.log('\n' + '='.repeat(70));
}

/**
 * Test Legacy Writeoff Service (SQLite)
 */
async function testLegacyWriteoffService() {
    console.log('\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø LEGACY WRITEOFF SERVICE (SQLite)');
    console.log('-'.repeat(50));
    
    const writeoffService = WriteoffService;
    let createdWriteoffId = null;
    
    try {
        // Initialize service
        await database.initDatabase();
        writeoffService.initialize({
            writeoffQueries: database.writeoffQueries,
            productQueries: database.productQueries,
            OperationsLogController: OperationsLogController
        });
        logTest('legacy', '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', true, 'WriteoffService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        
        // Test getAllWriteoffs
        const allWriteoffs = await writeoffService.getAllWriteoffs();
        logTest('legacy', '–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–∏—Å–∞–Ω—å', true, `–û—Ç—Ä–∏–º–∞–Ω–æ ${allWriteoffs.length} —Å–ø–∏—Å–∞–Ω—å`);
        
        // Test createWriteoff (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–µ—Ç–æ–¥ —ñ—Å–Ω—É—î)
        if (writeoffService.createWriteoff) {
            const createResult = await writeoffService.createWriteoff(testWriteoff);
            createdWriteoffId = createResult.id;
            logTest('legacy', '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è', true, `–°—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è –∑ ID: ${createdWriteoffId}`);
        } else {
            logTest('legacy', '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è', false, '–ú–µ—Ç–æ–¥ createWriteoff –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ legacy service');
        }
        
        // Test getWriteoffsByProductId (–¥–æ—Å—Ç—É–ø–Ω–∏–π –º–µ—Ç–æ–¥)
        const productWriteoffs = await writeoffService.getWriteoffsByProductId(1);
        logTest('legacy', '–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω—å –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–º', Array.isArray(productWriteoffs), 
                `–û—Ç—Ä–∏–º–∞–Ω–æ ${productWriteoffs.length} —Å–ø–∏—Å–∞–Ω—å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—É ID 1`);
        
        // Test getWriteoffStatistics (–¥–æ—Å—Ç—É–ø–Ω–∏–π –º–µ—Ç–æ–¥)
        const stats = await writeoffService.getWriteoffStatistics();
        logTest('legacy', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∏—Å–∞–Ω—å', 
                stats && typeof stats.totalWriteoffs === 'number', 
                `–ó–∞–≥–∞–ª–æ–º —Å–ø–∏—Å–∞–Ω—å: ${stats.totalWriteoffs}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${stats.totalQuantity}`);
        
    } catch (error) {
        logTest('legacy', '–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞', false, error.message, error);
    }
    
    return createdWriteoffId;
}

/**
 * Test Supabase Writeoff Service
 */
async function testSupabaseWriteoffService() {
    console.log('\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø SUPABASE WRITEOFF SERVICE');
    console.log('-'.repeat(50));
    
    const supabaseWriteoffService = new SupabaseWriteoffService();
    let createdWriteoffId = null;
    
    try {
        // Initialize service
        const dependencies = {
            OperationsLogController: OperationsLogController
        };
        supabaseWriteoffService.initialize(dependencies);
        logTest('supabase', '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', true, 'SupabaseWriteoffService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        
        // Test getAllWriteoffs
        const allWriteoffs = await supabaseWriteoffService.getAllWriteoffs();
        logTest('supabase', '–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–ø–∏—Å–∞–Ω—å', true, `–û—Ç—Ä–∏–º–∞–Ω–æ ${allWriteoffs.length} —Å–ø–∏—Å–∞–Ω—å`);
        
        // Test createWriteoff
        const testWriteoffSupabase = { ...testWriteoff, reason: 'Supabase —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–∏—Å–∞–Ω–Ω—è' };
        const createResult = await supabaseWriteoffService.createWriteoff(testWriteoffSupabase);
        createdWriteoffId = createResult.id;
        logTest('supabase', '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è', true, `–°—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è –∑ ID: ${createdWriteoffId}`);
        
        // Test getWriteoffById
        const retrievedWriteoff = await supabaseWriteoffService.getWriteoffById(createdWriteoffId);
        const isCorrect = retrievedWriteoff && retrievedWriteoff.quantity === testWriteoffSupabase.quantity;
        logTest('supabase', '–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è –∑–∞ ID', isCorrect,
                isCorrect ? `–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—è: ${retrievedWriteoff.quantity} —à—Ç.` : '–°–ø–∏—Å–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ');
        
        // Test updateWriteoff
        const updateData = { ...testWriteoffSupabase, quantity: 15, reason: '–û–Ω–æ–≤–ª–µ–Ω–µ Supabase —Å–ø–∏—Å–∞–Ω–Ω—è' };
        const updateResult = await supabaseWriteoffService.updateWriteoff(createdWriteoffId, updateData);
        logTest('supabase', '–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è', updateResult.changes > 0,
                `–û–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.changes} –∑–∞–ø–∏—Å—ñ–≤`);
        
        // Test searchWriteoffs
        const searchResults = await supabaseWriteoffService.searchWriteoffs({ reason: 'Supabase' });
        logTest('supabase', '–ü–æ—à—É–∫ —Å–ø–∏—Å–∞–Ω—å', Array.isArray(searchResults),
                `–ó–Ω–∞–π–¥–µ–Ω–æ ${searchResults.length} —Å–ø–∏—Å–∞–Ω—å`);
        
        // Test getWriteoffStats
        const stats = await supabaseWriteoffService.getWriteoffStats();
        logTest('supabase', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∏—Å–∞–Ω—å',
                stats && typeof stats.total_writeoffs === 'number',
                `–ó–∞–≥–∞–ª–æ–º —Å–ø–∏—Å–∞–Ω—å: ${stats.total_writeoffs}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${stats.total_quantity}`);
        
    } catch (error) {
        logTest('supabase', '–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞', false, error.message, error);
    }
    
    return createdWriteoffId;
}

/**
 * Test Hybrid Writeoff Service
 */
async function testHybridWriteoffService() {
    console.log('\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø HYBRID WRITEOFF SERVICE');
    console.log('-'.repeat(50));
    
    const hybridWriteoffService = new HybridWriteoffService();
    
    try {
        // Initialize services
        const legacyWriteoffService = WriteoffService;
        const supabaseWriteoffService = new SupabaseWriteoffService();
        
        const dependencies = {
            legacyWriteoffService: legacyWriteoffService,
            supabaseWriteoffService: supabaseWriteoffService,
            writeoffQueries: database.writeoffQueries,
            productQueries: database.productQueries,
            OperationsLogController: OperationsLogController
        };
        
        hybridWriteoffService.initialize(dependencies);
        logTest('hybrid', '–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è', true, 'HybridWriteoffService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        
        // Test migration status
        const status = hybridWriteoffService.getMigrationStatus();
        logTest('hybrid', '–°—Ç–∞—Ç—É—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó', status && status.services,
                `Legacy: ${status.services.legacy}, Supabase: ${status.services.supabase}`);
        
        // Test connectivity
        const connectivity = await hybridWriteoffService.testConnectivity();
        logTest('hybrid', '–¢–µ—Å—Ç –∑\'—î–¥–Ω–∞–Ω–Ω—è', 
                connectivity.legacy || connectivity.supabase,
                `Legacy: ${connectivity.legacy}, Supabase: ${connectivity.supabase}`);
        
        // Test Phase 1: SQLite only
        console.log('\n   üìç –§–ê–ó–ê 1: –¢—ñ–ª—å–∫–∏ SQLite');
        hybridWriteoffService.updateMigrationConfig({
            USE_SUPABASE_READ: false,
            USE_SUPABASE_WRITE: false
        });
        
        const allWriteoffsPhase1 = await hybridWriteoffService.getAllWriteoffs();
        logTest('hybrid', '–§–∞–∑–∞ 1 - —á–∏—Ç–∞–Ω–Ω—è', true, `SQLite: ${allWriteoffsPhase1.length} —Å–ø–∏—Å–∞–Ω—å`);
        
        // Test Phase 2: Read from Supabase, write to SQLite
        console.log('\n   üìç –§–ê–ó–ê 2: –ß–∏—Ç–∞–Ω–Ω—è Supabase, –∑–∞–ø–∏—Å SQLite');
        hybridWriteoffService.updateMigrationConfig({
            USE_SUPABASE_READ: true,
            USE_SUPABASE_WRITE: false
        });
        
        const allWriteoffsPhase2 = await hybridWriteoffService.getAllWriteoffs();
        logTest('hybrid', '–§–∞–∑–∞ 2 - —á–∏—Ç–∞–Ω–Ω—è', true, `Supabase —á–∏—Ç–∞–Ω–Ω—è: ${allWriteoffsPhase2.length} —Å–ø–∏—Å–∞–Ω—å`);
        
        // Test Phase 3: Full Supabase with fallback
        console.log('\n   üìç –§–ê–ó–ê 3: –ü–æ–≤–Ω–∏–π Supabase –∑ fallback');
        hybridWriteoffService.updateMigrationConfig({
            USE_SUPABASE_READ: true,
            USE_SUPABASE_WRITE: true,
            FALLBACK_TO_LEGACY: true
        });
        
        const testWriteoffHybrid = { ...testWriteoff, reason: 'Hybrid —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–∏—Å–∞–Ω–Ω—è' };
        const createResult = await hybridWriteoffService.createWriteoff(testWriteoffHybrid);
        logTest('hybrid', '–§–∞–∑–∞ 3 - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è', !!createResult.id, `ID: ${createResult.id}`);
        
        // Test Phase 4: Supabase only
        console.log('\n   üìç –§–ê–ó–ê 4: –¢—ñ–ª—å–∫–∏ Supabase');
        hybridWriteoffService.enableFullSupabaseMode();
        
        const allWriteoffsPhase4 = await hybridWriteoffService.getAllWriteoffs();
        logTest('hybrid', '–§–∞–∑–∞ 4 - —á–∏—Ç–∞–Ω–Ω—è', true, `Supabase —Ç—ñ–ª—å–∫–∏: ${allWriteoffsPhase4.length} —Å–ø–∏—Å–∞–Ω—å`);
        
    } catch (error) {
        logTest('hybrid', '–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞', false, error.message, error);
    }
}

/**
 * Main test execution
 */
async function runAllTests() {
    console.log('üöÄ –ü–û–ß–ê–¢–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø WRITEOFF SERVICE –ú–Ü–ì–†–ê–¶–Ü–á');
    console.log('='.repeat(70));
    
    try {
        // Run all tests
        await testLegacyWriteoffService();
        await testSupabaseWriteoffService(); 
        await testHybridWriteoffService();
        
        // Print final results
        printResults();
        
        console.log('\nüéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û');
        
    } catch (error) {
        console.error('üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:', error);
    } finally {
        // Cleanup
        if (database && database.db) {
            database.db.close();
        }
        process.exit(0);
    }
}

// Run tests if called directly
if (require.main === module) {
    runAllTests();
}

module.exports = { runAllTests }; 