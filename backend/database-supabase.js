/**
 * Supabase Database Client Configuration
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase PostgreSQL
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
if (!process.env.SUPABASE_URL) {
    throw new Error('SUPABASE_URL is required in environment variables');
}

if (!process.env.SUPABASE_SERVICE_KEY) {
    throw new Error('SUPABASE_SERVICE_KEY is required in environment variables');
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Supabase –∫–ª—ñ—î–Ω—Ç–∞ –∑ service role –∫–ª—é—á–µ–º –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_KEY,
    {
        auth: {
            autoRefreshToken: false,
            persistSession: false
        },
        db: {
            schema: 'public'
        }
    }
);

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è frontend –æ–ø–µ—Ä–∞—Ü—ñ–π (–∑ –æ–±–º–µ–∂–µ–Ω–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏)
const supabaseAnon = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY,
    {
        auth: {
            autoRefreshToken: true,
            persistSession: true
        }
    }
);

/**
 * –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase
 */
async function testConnection() {
    try {
        console.log('üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase...');
        
        // –¢–µ—Å—Ç service role –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        const { data, error } = await supabase
            .from('users')
            .select('count', { count: 'exact', head: true });
            
        if (error) {
            throw error;
        }
        
        console.log('‚úÖ Supabase –∑\'—î–¥–Ω–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ');
        console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${data} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –±–∞–∑—ñ`);
        return true;
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase:', error.message);
        return false;
    }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—ñ
 */
async function getTableInfo() {
    try {
        const { data, error } = await supabase
            .rpc('get_table_info');
            
        if (error) throw error;
        return data;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–∞–±–ª–∏—Ü—ñ:', error);
        return null;
    }
}

/**
 * –í–∏–∫–æ–Ω–∞—Ç–∏ SQL –∑–∞–ø–∏—Ç –Ω–∞–ø—Ä—è–º—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤)
 */
async function executeRawSQL(sql, params = []) {
    try {
        const { data, error } = await supabase.rpc('execute_sql', {
            query: sql,
            params: params
        });
        
        if (error) throw error;
        return data;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è SQL –∑–∞–ø–∏—Ç—É:', error);
        throw error;
    }
}

module.exports = {
    supabase,
    supabaseAnon,
    testConnection,
    getTableInfo,
    executeRawSQL
};