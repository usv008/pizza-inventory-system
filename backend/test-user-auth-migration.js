#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó userService + authService
 * –ü–æ—Ä—ñ–≤–Ω—é—î —Ä–æ–±–æ—Ç—É SQLite —Ç–∞ Supabase –≤–µ—Ä—Å—ñ–π
 */

require('dotenv').config();
const userServiceV2 = require('./services/userService-v2');
const authServiceV2 = require('./services/authService-v2');
const { switchDatabaseMode } = require('./config/database');

async function testUserAuthMigration() {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó userService + authService...\n');
    
    try {
        // –¢–µ—Å—Ç 1: SQLite —Ä–µ–∂–∏–º
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç userService + authService –≤ SQLite —Ä–µ–∂–∏–º—ñ...');
        switchDatabaseMode(false);
        await testUserAuthOperations('SQLite');
        
        // –¢–µ—Å—Ç 2: Supabase —Ä–µ–∂–∏–º
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç userService + authService –≤ Supabase —Ä–µ–∂–∏–º—ñ...');
        switchDatabaseMode(true);
        await testUserAuthOperations('Supabase');
        
        // –¢–µ—Å—Ç 3: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        console.log('\n3Ô∏è‚É£ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤...');
        await compareResults();
        
        // –¢–µ—Å—Ç 4: CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏...');
        await testUserCRUDOperations();
        
        // –¢–µ—Å—Ç 5: –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...');
        await testAuthenticationFlow();
        
        console.log('\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó userService + authService –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
        throw error;
    }
}

async function testUserAuthOperations(modeName) {
    try {
        console.log(`   üìä ${modeName}: –¢–µ—Å—Ç getAllUsers...`);
        const allUsers = await userServiceV2.getAllUsers();
        console.log(`   ‚úÖ ${modeName}: –û—Ç—Ä–∏–º–∞–Ω–æ ${allUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
        
        if (allUsers.length > 0) {
            const firstUser = allUsers[0];
            console.log(`      –ü–µ—Ä—à–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${firstUser.username} (${firstUser.role})`);
            
            // –¢–µ—Å—Ç getUserById
            console.log(`   üîç ${modeName}: –¢–µ—Å—Ç getUserById...`);
            const userById = await userServiceV2.getUserById(firstUser.id);
            console.log(`   ‚úÖ ${modeName}: –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userById.username}`);
            
            // –¢–µ—Å—Ç getUserByUsername
            console.log(`   üîé ${modeName}: –¢–µ—Å—Ç getUserByUsername...`);
            const userByUsername = await userServiceV2.getUserByUsername(firstUser.username);
            console.log(`   ‚úÖ ${modeName}: –ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username: ${userByUsername ? userByUsername.username : '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}`);
        }
        
        // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        console.log(`   üìà ${modeName}: –¢–µ—Å—Ç getUserStats...`);
        const stats = await userServiceV2.getUserStats();
        console.log(`   ‚úÖ ${modeName}: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - ${stats.active_users} –∞–∫—Ç–∏–≤–Ω–∏—Ö / ${stats.total_users} –≤—Å—å–æ–≥–æ`);
        
        // –¢–µ—Å—Ç getActiveUsers (authService)
        console.log(`   üë• ${modeName}: –¢–µ—Å—Ç getActiveUsers (authService)...`);
        const activeUsers = await authServiceV2.getActiveUsers();
        console.log(`   ‚úÖ ${modeName}: AuthService –æ—Ç—Ä–∏–º–∞–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
        
        return {
            mode: modeName,
            totalUsers: allUsers.length,
            activeUsers: activeUsers.length,
            firstUser: allUsers[0] || null,
            stats: stats
        };
        
    } catch (error) {
        console.error(`   ‚ùå ${modeName}: –ü–æ–º–∏–ª–∫–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π - ${error.message}`);
        throw error;
    }
}

async function compareResults() {
    try {
        // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ SQLite
        switchDatabaseMode(false);
        const sqliteUsers = await userServiceV2.getAllUsers();
        
        // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ Supabase
        switchDatabaseMode(true);
        const supabaseUsers = await userServiceV2.getAllUsers();
        
        console.log(`   SQLite: ${sqliteUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
        console.log(`   Supabase: ${supabaseUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
        
        // –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        if (sqliteUsers.length === supabaseUsers.length) {
            console.log('   ‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ–¥–Ω–∞–∫–æ–≤–∞');
        } else {
            console.log('   ‚ö†Ô∏è  –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è');
        }
        
        // –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä—à–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        if (sqliteUsers.length > 0 && supabaseUsers.length > 0) {
            const sqliteFirst = sqliteUsers[0];
            const supabaseFirst = supabaseUsers.find(u => u.username === sqliteFirst.username);
            
            if (supabaseFirst) {
                console.log('   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –æ–±–æ—Ö –ë–î');
                console.log(`      SQLite: ${sqliteFirst.username} - ${sqliteFirst.role}`);
                console.log(`      Supabase: ${supabaseFirst.username} - ${supabaseFirst.role}`);
                
                // –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è
                const fieldsToCompare = ['username', 'role', 'email', 'phone'];
                let fieldsMatch = true;
                
                for (const field of fieldsToCompare) {
                    if (sqliteFirst[field] !== supabaseFirst[field]) {
                        console.log(`      ‚ö†Ô∏è  –ü–æ–ª–µ ${field} –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è: "${sqliteFirst[field]}" vs "${supabaseFirst[field]}"`);
                        fieldsMatch = false;
                    }
                }
                
                if (fieldsMatch) {
                    console.log('   ‚úÖ –ö–ª—é—á–æ–≤—ñ –ø–æ–ª—è —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å');
                }
            } else {
                console.log('   ‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ Supabase');
            }
        }
        
    } catch (error) {
        console.error('   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:', error.message);
        throw error;
    }
}

async function testUserCRUDOperations() {
    console.log('   üîß –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ –≤ –æ–±–æ—Ö —Ä–µ–∂–∏–º–∞—Ö...');
    
    const testUserData = {
        username: '—Ç–µ—Å—Ç_–º—ñ–≥—Ä–∞—Ü—ñ—è_user',
        email: 'test-migration@pizza.com',
        phone: '+380501234567',
        role: '–ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö',
        permissions: {
            inventory: { read: true, write: false },
            orders: { read: true, write: false }
        },
        password: 'testpassword123'
    };
    
    // –¢–µ—Å—Ç –≤ SQLite
    await testUserCRUDInMode(false, 'SQLite', testUserData);
    
    // –¢–µ—Å—Ç –≤ Supabase
    await testUserCRUDInMode(true, 'Supabase', testUserData);
}

async function testUserCRUDInMode(useSupabase, modeName, testData) {
    switchDatabaseMode(useSupabase);
    let createdUserId = null;
    
    try {
        console.log(`   üìù ${modeName}: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...`);
        const createdUser = await userServiceV2.createUser(testData, 1); // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID 1
        createdUserId = createdUser.id;
        console.log(`   ‚úÖ ${modeName}: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–æ (ID: ${createdUserId})`);
        
        // –¢–µ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        console.log(`   üîÑ ${modeName}: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...`);
        const updateData = {
            phone: '+380509876543',
            role: '–ö–û–ú–Ü–†–ù–ò–ö'
        };
        const updatedUser = await userServiceV2.updateUser(createdUserId, updateData, 1);
        console.log(`   ‚úÖ ${modeName}: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–Ω–æ–≤–ª–µ–Ω–æ - —Ä–æ–ª—å: ${updatedUser.role}`);
        
        // –¢–µ—Å—Ç –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
        console.log(`   üîë ${modeName}: –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è...`);
        await userServiceV2.changeUserPassword(createdUserId, 'newpassword123', 1);
        console.log(`   ‚úÖ ${modeName}: –ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ`);
        
        // –¢–µ—Å—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
        console.log(`   üóëÔ∏è ${modeName}: –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...`);
        await userServiceV2.deleteUser(createdUserId, 1);
        console.log(`   ‚úÖ ${modeName}: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ`);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö
        const activeUsers = await userServiceV2.getAllUsers({ includeInactive: false });
        const isInActive = activeUsers.some(u => u.id === createdUserId);
        console.log(`   ${isInActive ? '‚ö†Ô∏è' : '‚úÖ'} ${modeName}: –î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ${isInActive ? '—â–µ –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è' : '–ø—Ä–∏—Ö–æ–≤–∞–Ω–æ'} –≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö`);
        
    } catch (error) {
        console.error(`   ‚ùå ${modeName}: –ü–æ–º–∏–ª–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π - ${error.message}`);
        throw error;
    } finally {
        // –û—á–∏—â–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ soft delete
        if (createdUserId) {
            console.log(`   üßπ ${modeName}: –¢–µ—Å—Ç–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ (soft delete)`);
        }
    }
}

async function testAuthenticationFlow() {
    console.log('   üîê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ –æ–±–æ—Ö —Ä–µ–∂–∏–º–∞—Ö...');
    
    // –¢–µ—Å—Ç –≤ SQLite
    await testAuthInMode(false, 'SQLite');
    
    // –¢–µ—Å—Ç –≤ Supabase
    await testAuthInMode(true, 'Supabase');
}

async function testAuthInMode(useSupabase, modeName) {
    switchDatabaseMode(useSupabase);
    
    try {
        console.log(`   üîë ${modeName}: –¢–µ—Å—Ç –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó...`);
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        const activeUsers = await authServiceV2.getActiveUsers();
        console.log(`   üë• ${modeName}: –î–æ—Å—Ç—É–ø–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤—Ö–æ–¥—É`);
        
        if (activeUsers.length > 0) {
            const testUser = activeUsers[0];
            console.log(`   üß™ ${modeName}: –°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${testUser.username}...`);
            
            // –ü—Ä–∏–º—ñ—Ç–∫–∞: –ú–∏ –Ω–µ –º–æ–∂–µ–º–æ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –ª–æ–≥—ñ–Ω –±–µ–∑ –∑–Ω–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
            // –¢–æ–º—É —Ç–µ—Å—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const userByUsername = await userServiceV2.getUserByUsername(testUser.username);
            if (userByUsername) {
                console.log(`   ‚úÖ ${modeName}: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${testUser.username} –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó`);
            } else {
                console.log(`   ‚ö†Ô∏è ${modeName}: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${testUser.username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
            }
        } else {
            console.log(`   ‚ö†Ô∏è ${modeName}: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó`);
        }
        
        // –¢–µ—Å—Ç –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try {
            await authServiceV2.login('–Ω–µ—ñ—Å–Ω—É—é—á–∏–π_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á', 'password123');
            console.log(`   ‚ö†Ô∏è ${modeName}: –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`);
        } catch (error) {
            if (error.message.includes('–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
                console.log(`   ‚úÖ ${modeName}: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –≤—Ö—ñ–¥ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`);
            } else {
                console.log(`   ‚ö†Ô∏è ${modeName}: –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            }
        }
        
    } catch (error) {
        console.error(`   ‚ùå ${modeName}: –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó - ${error.message}`);
        throw error;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
    testUserAuthMigration()
        .then(() => {
            console.log('\nüìã –ú—ñ–≥—Ä–∞—Ü—ñ—è userService + authService –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–∞');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { testUserAuthMigration };