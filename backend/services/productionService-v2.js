/**
 * Production Service v2 - –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ–º
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î SQLite —Ç–∞ Supabase PostgreSQL —á–µ—Ä–µ–∑ DatabaseAdapter
 */

const { AppError } = require('../middleware/errors/AppError');

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è query –∞–¥–∞–ø—Ç–µ—Ä—ñ–≤
let productionQueries = null;
let OperationsLogController = null;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è query –∞–¥–∞–ø—Ç–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ USE_SUPABASE
const initializeQueries = (dependencies = {}) => {
    const useSupabase = process.env.USE_SUPABASE === 'true';
    
    if (useSupabase) {
        productionQueries = require('../queries/supabase/productionQueries');
        console.log('üîß ProductionService v2: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è Supabase PostgreSQL');
    } else {
        productionQueries = require('../queries/sqlite/productionQueries');
        console.log('üîß ProductionService v2: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è SQLite');
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    OperationsLogController = dependencies.OperationsLogController;
};

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ–º (v2)
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î –æ–±–∏–¥–≤—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ universal query layer
 */
class ProductionServiceV2 {
    constructor() {
        this.initialized = false;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    initialize(dependencies = {}) {
        try {
            initializeQueries(dependencies);
            this.initialized = true;
            console.log('‚úÖ ProductionService v2 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ProductionService v2:', error);
            throw new AppError('–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ ProductionService v2', 500, 'SERVICE_INIT_ERROR');
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    _ensureInitialized() {
        if (!this.initialized || !productionQueries) {
            throw new AppError('ProductionService v2 –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ', 500, 'SERVICE_NOT_INITIALIZED');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
     */
    async getAllProduction(filters = {}) {
        this._ensureInitialized();
        
        try {
            const production = await productionQueries.getAll();
            
            // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
            let filteredProduction = production;
            
            if (filters.start_date) {
                filteredProduction = filteredProduction.filter(p => 
                    p.production_date >= filters.start_date
                );
            }
            
            if (filters.end_date) {
                filteredProduction = filteredProduction.filter(p => 
                    p.production_date <= filters.end_date
                );
            }
            
            if (filters.product_id) {
                filteredProduction = filteredProduction.filter(p => 
                    p.product_id === parseInt(filters.product_id)
                );
            }
            
            // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const stats = this._calculateProductionStats(filteredProduction);
            
            return {
                production: filteredProduction,
                stats,
                count: filteredProduction.length
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞', 
                500, 
                'PRODUCTION_FETCH_ERROR',
                { originalError: error.message }
            );
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ –ø–æ ID —Ç–æ–≤–∞—Ä—É
     */
    async getProductionByProductId(productId) {
        this._ensureInitialized();
        
        if (!productId || isNaN(productId)) {
            throw new AppError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É', 400, 'INVALID_PRODUCT_ID');
        }
        
        try {
            const production = await productionQueries.getByProductId(productId);
            
            // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É
            const stats = this._calculateProductionStats(production);
            
            return {
                production,
                stats,
                count: production.length,
                product_id: parseInt(productId)
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –ø–æ —Ç–æ–≤–∞—Ä—É:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä—É', 
                500, 
                'PRODUCTION_BY_PRODUCT_ERROR',
                { originalError: error.message, product_id: productId }
            );
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
     */
    async createProduction(productionData, auditInfo = {}) {
        this._ensureInitialized();
        
        try {
            // –í–∞–ª—ñ–¥—É—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            if (!productionData.product_id || !productionData.production_date || !productionData.total_quantity) {
                throw new AppError('–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 400, 'MISSING_REQUIRED_FIELDS');
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –∑ –ø–∞—Ä—Ç—ñ—î—é
            const result = await productionQueries.create(productionData);
            
            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            if (OperationsLogController) {
                await this._logProductionOperation(productionData, result, 'CREATE', auditInfo);
            }
            
            console.log(`‚úÖ –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ID ${result.id}, —Ç–æ–≤–∞—Ä ${productionData.product_id}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å ${productionData.total_quantity}`);
            
            return {
                success: true,
                production: result,
                message: '–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ'
            };
        } catch (error) {
            if (error instanceof AppError) throw error;
            
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞', 
                500, 
                'PRODUCTION_CREATE_ERROR',
                { originalError: error.message, productionData }
            );
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥
     */
    async getProductionStatistics(startDate, endDate) {
        this._ensureInitialized();
        
        try {
            return await productionQueries.getStats(startDate, endDate);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞', 
                500, 
                'PRODUCTION_STATS_ERROR',
                { originalError: error.message }
            );
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É
     */
    async getAvailableBatches(productId) {
        this._ensureInitialized();
        
        if (!productId || isNaN(productId)) {
            throw new AppError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É', 400, 'INVALID_PRODUCT_ID');
        }
        
        try {
            return await productionQueries.getAvailableBatches(productId);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–∞—Ä—Ç—ñ—ó', 
                500, 
                'BATCHES_FETCH_ERROR',
                { originalError: error.message, product_id: productId }
            );
        }
    }

    /**
     * –†–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è —Ç–æ–≤–∞—Ä—É (FIFO –ª–æ–≥—ñ–∫–∞)
     */
    async reserveBatchesForProduct(productId, quantityNeeded, auditInfo = {}) {
        this._ensureInitialized();
        
        if (!productId || isNaN(productId)) {
            throw new AppError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É', 400, 'INVALID_PRODUCT_ID');
        }

        if (!quantityNeeded || quantityNeeded <= 0) {
            throw new AppError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è', 400, 'INVALID_QUANTITY');
        }
        
        try {
            const result = await productionQueries.reserveBatches(
                productId, 
                quantityNeeded, 
                auditInfo.user || 'system'
            );
            
            // –õ–æ–≥—É—î–º–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è
            if (OperationsLogController) {
                await this._logBatchReservation(productId, quantityNeeded, result, auditInfo);
            }
            
            return result;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—ó', 
                500, 
                'BATCH_RESERVATION_ERROR',
                { originalError: error.message, product_id: productId, quantity: quantityNeeded }
            );
        }
    }

    /**
     * –û–±—á–∏—Å–ª–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
     */
    _calculateProductionStats(production) {
        if (!production || production.length === 0) {
            return {
                total_records: 0,
                total_quantity: 0,
                total_batches: 0,
                avg_quantity_per_record: 0,
                date_range: null
            };
        }
        
        const totalQuantity = production.reduce((sum, p) => sum + (p.total_quantity || 0), 0);
        const totalRecords = production.length;
        
        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ø–∞—Ä—Ç—ñ–π
        const uniqueBatches = new Set(production.map(p => `${p.product_id}-${p.production_date}`));
        
        // –î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        const dates = production.map(p => new Date(p.production_date)).sort();
        const dateRange = dates.length > 0 ? {
            start: dates[0].toISOString().split('T')[0],
            end: dates[dates.length - 1].toISOString().split('T')[0]
        } : null;
        
        return {
            total_records: totalRecords,
            total_quantity: totalQuantity,
            total_batches: uniqueBatches.size,
            avg_quantity_per_record: Math.round(totalQuantity / totalRecords),
            date_range: dateRange
        };
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
     */
    async _logProductionOperation(productionData, result, operation, auditInfo = {}) {
        try {
            if (!OperationsLogController) return;
            
            const description = `${operation === 'CREATE' ? '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞' : '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞'}: —Ç–æ–≤–∞—Ä ID ${productionData.product_id} - ${productionData.total_quantity} —à—Ç (–¥–∞—Ç–∞ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞: ${productionData.production_date})`;
            
            await OperationsLogController.logOperation({
                operation_type: OperationsLogController.OPERATION_TYPES.PRODUCTION || 'PRODUCTION',
                entity_type: 'production',
                entity_id: result.id,
                old_data: null,
                new_data: {
                    product_id: productionData.product_id,
                    production_date: productionData.production_date,
                    total_quantity: productionData.total_quantity,
                    responsible: productionData.responsible || '–°–∏—Å—Ç–µ–º–∞'
                },
                description: description,
                user_name: productionData.responsible || auditInfo.user || '–°–∏—Å—Ç–µ–º–∞',
                ip_address: auditInfo.ip_address || null,
                user_agent: auditInfo.user_agent || null
            });
            
            console.log(`üìã –û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞: ${description}`);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞:', error);
            // –ù–µ –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
        }
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π
     */
    async _logBatchReservation(productId, quantity, result, auditInfo = {}) {
        try {
            if (!OperationsLogController) return;
            
            const description = `–†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π: —Ç–æ–≤–∞—Ä ID ${productId} - ${quantity} —à—Ç –≤ ${result.allocations?.length || 0} –ø–∞—Ä—Ç—ñ—è—Ö`;
            
            await OperationsLogController.logOperation({
                operation_type: OperationsLogController.OPERATION_TYPES.BATCH_RESERVATION || 'BATCH_RESERVATION',
                entity_type: 'production_batch',
                entity_id: productId,
                old_data: null,
                new_data: {
                    product_id: productId,
                    quantity_reserved: quantity,
                    batches_count: result.allocations?.length || 0,
                    allocations: result.allocations
                },
                description: description,
                user_name: auditInfo.user || '–°–∏—Å—Ç–µ–º–∞',
                ip_address: auditInfo.ip_address || null,
                user_agent: auditInfo.user_agent || null
            });
            
            console.log(`üìã –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –∑–∞–ª–æ–≥–æ–≤–∞–Ω–æ: ${description}`);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π:', error);
            // –ù–µ –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton instance
const productionServiceV2 = new ProductionServiceV2();
module.exports = productionServiceV2;