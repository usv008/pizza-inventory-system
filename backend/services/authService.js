const bcrypt = require('bcrypt');
const { DatabaseError, NotFoundError, ValidationError } = require('../middleware/errors/AppError');

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * –ù–∞–¥–∞—î –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É –¥–ª—è –≤—Ö–æ–¥—É, –≤–∏—Ö–æ–¥—É —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Å—ñ—è–º–∏
 */
class AuthService {
    constructor() {
        this.userQueries = null;
        this.sessionQueries = null;
        this.auditQueries = null;
        this.initialized = false;
        this.saltRounds = 10;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    initialize(dependencies) {
        this.userQueries = dependencies.userQueries;
        this.sessionQueries = dependencies.sessionQueries;
        this.auditQueries = dependencies.auditQueries;
        this.initialized = true;
        console.log('‚úÖ AuthService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    _checkInitialization() {
        if (!this.initialized || !this.userQueries) {
            throw new DatabaseError('AuthService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è dropdown
     */
    async getActiveUsers() {
        this._checkInitialization();
        
        try {
            const users = await this.userQueries.getAll();
            console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–æ ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ë–î`);
            
            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            const activeUsers = users.filter(user => {
                console.log(`üîç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.username}: active=${user.active} (type: ${typeof user.active})`);
                return user.active === 1;
            });
            
            console.log(`üë• –û—Ç—Ä–∏–º–∞–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É`);
            return activeUsers.map(user => ({
                id: user.id,
                username: user.username,
                role: user.role,
                active: user.active,
                full_name: user.username // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ username —è–∫ –ø–æ–≤–Ω–µ —ñ–º'—è
            }));
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è dropdown (—Å—Ç–∞—Ä–∏–π –º–µ—Ç–æ–¥)
     */
    async getAllUsers() {
        this._checkInitialization();
        
        try {
            const users = await this.userQueries.getAll();
            console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–æ ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ë–î`);
            
            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            const activeUsers = users.filter(user => {
                console.log(`üîç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.username}: active=${user.active} (type: ${typeof user.active})`);
                return user.active === 1;
            });
            
            console.log(`üë• –û—Ç—Ä–∏–º–∞–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É`);
            return activeUsers.map(user => ({
                id: user.id,
                username: user.username,
                role: user.role,
                active: user.active,
                full_name: user.username // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ username —è–∫ –ø–æ–≤–Ω–µ —ñ–º'—è
            }));
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async login(username, password, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username
            const user = await this.userQueries.getByUsername(username);
            
            if (!user) {
                await this._logSecurityEvent('LOGIN_FAILED', null, {
                    username,
                    reason: 'User not found',
                    ...sessionInfo
                });
                throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            if (!user.active) {
                await this._logSecurityEvent('LOGIN_FAILED', user.id, {
                    username,
                    reason: 'User inactive',
                    ...sessionInfo
                });
                throw new ValidationError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
            if (user.password_hash) {
                const isPasswordValid = await bcrypt.compare(password, user.password_hash);
                if (!isPasswordValid) {
                    await this._logSecurityEvent('LOGIN_FAILED', user.id, {
                        username,
                        reason: 'Invalid password',
                        ...sessionInfo
                    });
                    throw new ValidationError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å');
                }
            } else {
                // –î–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É, –∫–æ–ª–∏ –Ω–µ–º–∞—î –ø–∞—Ä–æ–ª—è
                if (!user.first_login) {
                    await this._logSecurityEvent('LOGIN_FAILED', user.id, {
                        username,
                        reason: 'No password set',
                        ...sessionInfo
                    });
                    throw new ValidationError('–ü–∞—Ä–æ–ª—å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π');
                }
            }

            // –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
            await this._logSecurityEvent('LOGIN_SUCCESS', user.id, {
                username,
                ...sessionInfo
            });

            await this._logUserAudit(user.id, 'LOGIN', {
                username,
                first_login: user.first_login,
                ...sessionInfo
            });

            console.log(`üîê –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${username} (ID: ${user.id})`);

            return {
                id: user.id,
                username: user.username,
                role: user.role,
                permissions: JSON.parse(user.permissions || '{}'),
                first_login: user.first_login,
                email: user.email,
                phone: user.phone
            };
        } catch (error) {
            if (error instanceof NotFoundError || error instanceof ValidationError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: ${error.message}`);
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤—Ö–æ–¥—ñ
     */
    async setFirstTimePassword(userId, password, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            const user = await this.userQueries.getById(userId);
            if (!user) {
                throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            if (!user.first_login) {
                throw new ValidationError('–ü–∞—Ä–æ–ª—å –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            }

            // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
            const hashedPassword = await bcrypt.hash(password, this.saltRounds);

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await this.userQueries.updatePassword(userId, hashedPassword);

            await this._logUserAudit(userId, 'SET_PASSWORD', {
                username: user.username,
                ...sessionInfo
            });

            console.log(`üîê –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username} (ID: ${userId})`);

            return true;
        } catch (error) {
            if (error instanceof NotFoundError || error instanceof ValidationError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è: ${error.message}`);
        }
    }

    /**
     * –ó–º—ñ–Ω–∞ –≤–ª–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
     */
    async changeOwnPassword(userId, currentPassword, newPassword, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            const user = await this.userQueries.getById(userId);
            if (!user) {
                throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å
            const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password_hash);
            if (!isCurrentPasswordValid) {
                throw new ValidationError('–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è
            const isSamePassword = await bcrypt.compare(newPassword, user.password_hash);
            if (isSamePassword) {
                throw new ValidationError('–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ');
            }

            // –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
            const hashedPassword = await bcrypt.hash(newPassword, this.saltRounds);

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å
            await this.userQueries.updatePassword(userId, hashedPassword);

            await this._logUserAudit(userId, 'PASSWORD_CHANGED', {
                username: user.username,
                ...sessionInfo
            });

            await this._logSecurityEvent('PASSWORD_CHANGED', userId, {
                username: user.username,
                ...sessionInfo
            });

            console.log(`üîê –ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º: ${user.username} (ID: ${userId})`);

            return true;
        } catch (error) {
            if (error instanceof NotFoundError || error instanceof ValidationError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: ${error.message}`);
        }
    }

    /**
     * –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     */
    async changePasswordByAdmin(userId, newPassword, adminId, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            const user = await this.userQueries.getById(userId);
            if (!user) {
                throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const admin = await this.userQueries.getById(adminId);
            if (!admin) {
                throw new NotFoundError('–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const adminPermissions = JSON.parse(admin.permissions || '{}');
            if (!adminPermissions.admin?.all_rights) {
                throw new ValidationError('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è');
            }

            // –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
            const hashedPassword = await bcrypt.hash(newPassword, this.saltRounds);

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å
            await this.userQueries.updatePassword(userId, hashedPassword);

            await this._logUserAudit(userId, 'PASSWORD_CHANGED_BY_ADMIN', {
                username: user.username,
                admin_id: adminId,
                admin_username: admin.username,
                ...sessionInfo
            });

            console.log(`üîê –ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${admin.username} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username}`);

            return true;
        } catch (error) {
            if (error instanceof NotFoundError || error instanceof ValidationError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: ${error.message}`);
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ–π—Å–Ω–æ—Å—Ç—ñ —Å–µ—Å—ñ—ó
     */
    async validateSession(sessionId) {
        this._checkInitialization();
        
        try {
            const session = await this.sessionQueries.getById(sessionId);
            
            if (!session) {
                return null;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Å—ñ—è –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å
            if (new Date() > new Date(session.expires_at)) {
                await this.sessionQueries.deactivate(sessionId);
                return null;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–∏–π
            const user = await this.userQueries.getById(session.user_id);
            if (!user || !user.active) {
                await this.sessionQueries.deactivate(sessionId);
                return null;
            }

            return {
                id: user.id,
                username: user.username,
                role: user.role,
                permissions: JSON.parse(user.permissions || '{}'),
                session_id: sessionId
            };
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó:', error);
            return null;
        }
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó (logout)
     */
    async logout(sessionId, userId, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            if (sessionId) {
                await this.sessionQueries.deactivate(sessionId);
            }

            if (userId) {
                const user = await this.userQueries.getById(userId);
                if (user) {
                    await this._logUserAudit(userId, 'LOGOUT', {
                        username: user.username,
                        session_id: sessionId,
                        ...sessionInfo
                    });

                    await this._logSecurityEvent('LOGOUT', userId, {
                        username: user.username,
                        session_id: sessionId,
                        ...sessionInfo
                    });

                    console.log(`üîê –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username} (ID: ${userId})`);
                }
            }

            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É: ${error.message}`);
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π
     */
    async cleanupExpiredSessions() {
        this._checkInitialization();
        
        try {
            const result = await this.sessionQueries.cleanupExpired();
            console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.changes} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π`);
            return result.changes;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π: ${error.message}`);
        }
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –∞—É–¥–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async _logUserAudit(userId, action, details = {}) {
        try {
            if (this.auditQueries) {
                await this.auditQueries.logUserAction(userId, action, details);
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∞—É–¥–∏—Ç—É:', error);
            // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
        }
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏
     */
    async _logSecurityEvent(eventType, userId, details = {}) {
        try {
            if (this.auditQueries) {
                await this.auditQueries.logSecurityEvent(eventType, userId, details);
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –±–µ–∑–ø–µ–∫–∏:', error);
            // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton instance
module.exports = new AuthService(); 