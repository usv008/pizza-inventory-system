// services/arrivalService-v2.js - –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–∏—Ö–æ–¥–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤

const DatabaseAdapter = require('../adapters/DatabaseAdapter');
const config = require('../config/database');

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–∏—Ö–æ–¥–∞–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ SQLite —Ç–∞–∫ —ñ Supabase
 */
class ArrivalService {
    constructor() {
        this.useSupabase = config.USE_SUPABASE;
        this.adapter = new DatabaseAdapter(this.useSupabase);
        
        console.log(`üöõ ArrivalService: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ${this.useSupabase ? 'Supabase' : 'SQLite'}`);
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ queries
        if (this.useSupabase) {
            this.queries = require('../queries/supabase/arrivalQueries');
        } else {
            this.queries = require('../queries/sqlite/arrivalQueries');
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏—Ö–æ–¥—É —Ç–æ–≤–∞—Ä—ñ–≤
     */
    async createArrival(arrivalData, items, context = {}) {
        try {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
            if (!arrivalData.arrival_date || !arrivalData.reason) {
                throw new Error('–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: arrival_date, reason');
            }

            if (!Array.isArray(items) || items.length === 0) {
                throw new Error('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é —Ç–æ–≤–∞—Ä—É');
            }

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ–π
            for (const item of items) {
                if (!item.product_id || !item.quantity || !item.batch_date) {
                    throw new Error('–ö–æ–∂–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –º–∞—Ç–∏ product_id, quantity —Ç–∞ batch_date');
                }

                if (item.quantity <= 0) {
                    throw new Error('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0');
                }
            }

            const result = await this.queries.createArrival(arrivalData, items);
            
            console.log(`üì¶ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏—Ö—ñ–¥ ${result.arrival_number}: ${result.total_quantity} —à—Ç (${result.total_items} –ø–æ–∑–∏—Ü—ñ–π)`);
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
            if (context.log_operation) {
                // TODO: –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –∑ OperationsLogService –∫–æ–ª–∏ –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ
                console.log(`üìä –û–ø–µ—Ä–∞—Ü—ñ—è –ø—Ä–∏—Ö–æ–¥—É: ${result.arrival_number} –≤—ñ–¥ ${context.user || 'system'}`);
            }

            return {
                success: true,
                message: '–ü—Ä–∏—Ö—ñ–¥ —Ç–æ–≤–∞—Ä—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
                ...result
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–∏—Ö–æ–¥–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
     */
    async getAllArrivals(filters = {}) {
        try {
            const arrivals = await this.queries.getAllArrivals(filters);
            
            // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const totalQuantity = arrivals.reduce((sum, arrival) => sum + (arrival.total_quantity || 0), 0);
            const totalItems = arrivals.reduce((sum, arrival) => sum + (arrival.total_items || 0), 0);
            
            return {
                success: true,
                arrivals: arrivals,
                count: arrivals.length,
                stats: {
                    total_arrivals: arrivals.length,
                    total_quantity: totalQuantity,
                    total_items: totalItems
                },
                filters: filters
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—ñ–≤:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—Ö—ñ–¥ –∑–∞ ID –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
     */
    async getArrivalById(arrivalId) {
        try {
            if (!arrivalId) {
                throw new Error('–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –ø—Ä–∏—Ö–æ–¥—É');
            }

            const arrival = await this.queries.getArrivalById(arrivalId);
            
            return {
                success: true,
                arrival: arrival
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É: ${error.message}`);
        }
    }

    /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–∏—Ö—ñ–¥ (–ø–æ–º—ñ—á–∞—î —è–∫ –≤–∏–¥–∞–ª–µ–Ω–∏–π)
     */
    async deleteArrival(arrivalId, context = {}) {
        try {
            if (!arrivalId) {
                throw new Error('–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –ø—Ä–∏—Ö–æ–¥—É');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ø—Ä–∏—Ö—ñ–¥
            const existingArrival = await this.getArrivalById(arrivalId);
            if (!existingArrival.success) {
                throw new Error('–ü—Ä–∏—Ö—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const result = await this.queries.deleteArrival(arrivalId);
            
            console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–∏—Ö—ñ–¥ ${arrivalId} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${context.user || 'system'}`);
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
            if (context.log_operation) {
                // TODO: –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –∑ OperationsLogService
                console.log(`üìä –û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É: ${arrivalId} –≤—ñ–¥ ${context.user || 'system'}`);
            }

            return {
                success: true,
                message: '–ü—Ä–∏—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ',
                arrival_id: parseInt(arrivalId)
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–¥—É: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏—Ö–æ–¥—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥
     */
    async getArrivalStatistics(startDate, endDate) {
        try {
            const stats = await this.queries.getArrivalStatistics(startDate, endDate);
            
            return {
                success: true,
                statistics: stats
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏—Ö–æ–¥—ñ–≤:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—Ö–æ–¥–∏ –∑–∞ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É
     */
    async getArrivalsReport(startDate, endDate, groupBy = 'date') {
        try {
            const arrivals = await this.queries.getAllArrivals({
                start_date: startDate,
                end_date: endDate
            });

            const report = {
                period: { startDate, endDate },
                groupBy: groupBy,
                data: [],
                summary: {
                    total_arrivals: arrivals.length,
                    total_quantity: 0,
                    total_items: 0
                }
            };

            // –ì—Ä—É–ø—É—î–º–æ –¥–∞–Ω—ñ
            const groupedData = {};
            
            arrivals.forEach(arrival => {
                const key = groupBy === 'date' 
                    ? arrival.arrival_date 
                    : arrival.created_by || 'system';
                
                if (!groupedData[key]) {
                    groupedData[key] = {
                        key: key,
                        arrivals: 0,
                        quantity: 0,
                        items: 0
                    };
                }
                
                groupedData[key].arrivals++;
                groupedData[key].quantity += arrival.total_quantity || 0;
                groupedData[key].items += arrival.total_items || 0;
                
                report.summary.total_quantity += arrival.total_quantity || 0;
                report.summary.total_items += arrival.total_items || 0;
            });

            report.data = Object.values(groupedData).sort((a, b) => a.key.localeCompare(b.key));

            return {
                success: true,
                report: report
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–∏—Ö–æ–¥—ñ–≤:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É: ${error.message}`);
        }
    }

    /**
     * –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–∏—Ö–æ–¥—É –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º
     */
    async validateArrivalData(arrivalData, items) {
        const errors = [];

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        if (!arrivalData.arrival_date) {
            errors.push('–ù–µ –≤–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥—É');
        } else {
            const arrivalDate = new Date(arrivalData.arrival_date);
            const today = new Date();
            if (arrivalDate > today) {
                errors.push('–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É');
            }
        }

        if (!arrivalData.reason || arrivalData.reason.trim().length < 3) {
            errors.push('–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏—Ö–æ–¥—É –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 3 —Å–∏–º–≤–æ–ª–∏');
        }

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ–π
        if (!Array.isArray(items) || items.length === 0) {
            errors.push('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é —Ç–æ–≤–∞—Ä—É');
        } else {
            items.forEach((item, index) => {
                if (!item.product_id) {
                    errors.push(`–ü–æ–∑–∏—Ü—ñ—è ${index + 1}: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–æ–≤–∞—Ä`);
                }
                
                if (!item.quantity || item.quantity <= 0) {
                    errors.push(`–ü–æ–∑–∏—Ü—ñ—è ${index + 1}: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å`);
                }
                
                if (!item.batch_date) {
                    errors.push(`–ü–æ–∑–∏—Ü—ñ—è ${index + 1}: –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –ø–∞—Ä—Ç—ñ—ó`);
                } else {
                    const batchDate = new Date(item.batch_date);
                    const today = new Date();
                    if (batchDate > today) {
                        errors.push(`–ü–æ–∑–∏—Ü—ñ—è ${index + 1}: –¥–∞—Ç–∞ –ø–∞—Ä—Ç—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É`);
                    }
                }
            });
        }

        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –ø—Ä–∏—Ö–æ–¥–∏ (–¥–ª—è dashboard)
     */
    async getRecentArrivals(limit = 10) {
        try {
            const arrivals = await this.queries.getAllArrivals({});
            
            // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ records
            const recentArrivals = arrivals.slice(0, limit);
            
            return {
                success: true,
                arrivals: recentArrivals,
                count: recentArrivals.length
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø—Ä–∏—Ö–æ–¥—ñ–≤:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø—Ä–∏—Ö–æ–¥—ñ–≤: ${error.message}`);
        }
    }
}

module.exports = new ArrivalService();