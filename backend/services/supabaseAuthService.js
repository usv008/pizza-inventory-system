require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const bcrypt = require('bcrypt');
const { DatabaseError, NotFoundError, ValidationError } = require('../middleware/errors/AppError');

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ Supabase
 * –ó –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–∞—Ä–æ–ª—ñ–≤ —Ç–∞ –±–µ–∑–ø–µ–∫–∏
 */
class SupabaseAuthService {
    constructor() {
        this.supabase = null;
        this.initialized = false;
        this.saltRounds = 10;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
     */
    initialize() {
        if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
            throw new Error('SUPABASE_URL —ñ SUPABASE_SERVICE_ROLE_KEY –º–∞—é—Ç—å –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ');
        }

        this.supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
        );
        
        this.initialized = true;
        console.log('‚úÖ SupabaseAuthService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    _checkInitialization() {
        if (!this.initialized || !this.supabase) {
            throw new DatabaseError('AuthService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è dropdown
     * –ê–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –ø—ñ–¥ —ñ—Å–Ω—É—é—á—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
     */
    async getActiveUsers() {
        this._checkInitialization();
        
        try {
            const { data: users, error } = await this.supabase
                .from('users')
                .select('id, username, role, full_name, is_active')
                .eq('is_active', true);

            if (error) {
                console.error('‚ùå Supabase –ø–æ–º–∏–ª–∫–∞:', error);
                throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${error.message}`);
            }

            console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–æ ${users.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ Supabase`);

            // –ê–¥–∞–ø—Ç—É—î–º–æ –¥–æ —Ñ–æ—Ä–º–∞—Ç—É SQLite –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            return users.map(user => ({
                id: user.id,
                username: user.username,
                role: user.role,
                active: 1, // –ú–∞–ø–ø—ñ–Ω–≥ is_active (true) -> active (1)
                full_name: user.full_name || user.username
            }));
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ–≤–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø–∞—Ä–æ–ª—ñ–≤
     */
    async login(username, password, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username
            const { data: user, error: userError } = await this.supabase
                .from('users')
                .select('*')
                .eq('username', username)
                .single();
            
            if (userError || !user) {
                await this._logSecurityEvent('LOGIN_FAILED', null, {
                    username,
                    reason: 'User not found',
                    ...sessionInfo
                });
                throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            if (!user.is_active) {
                await this._logSecurityEvent('LOGIN_FAILED', user.id, {
                    username,
                    reason: 'User inactive',
                    ...sessionInfo
                });
                throw new ValidationError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
            if (user.password_hash) {
                const isPasswordValid = await bcrypt.compare(password, user.password_hash);
                if (!isPasswordValid) {
                    await this._logSecurityEvent('LOGIN_FAILED', user.id, {
                        username,
                        reason: 'Invalid password',
                        ...sessionInfo
                    });
                    throw new ValidationError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å');
                }
            } else {
                // –î–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É, –∫–æ–ª–∏ –Ω–µ–º–∞—î –ø–∞—Ä–æ–ª—è
                if (!user.first_login) {
                    await this._logSecurityEvent('LOGIN_FAILED', user.id, {
                        username,
                        reason: 'No password set',
                        ...sessionInfo
                    });
                    throw new ValidationError('–ü–∞—Ä–æ–ª—å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π');
                }
            }

            // –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
            await this._logSecurityEvent('LOGIN_SUCCESS', user.id, {
                username,
                ...sessionInfo
            });

            console.log(`üîê –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${username} (ID: ${user.id})`);

            let permissions = {};
            try {
                permissions = typeof user.permissions === 'object' 
                    ? user.permissions
                    : (user.permissions ? JSON.parse(user.permissions) : {});
            } catch (err) {
                console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É permissions:', err);
                permissions = {};
            }

            return {
                id: user.id,
                username: user.username,
                role: user.role,
                permissions: permissions,
                first_login: user.first_login,
                email: user.email,
                phone: user.phone || null
            };
        } catch (error) {
            if (error instanceof NotFoundError || error instanceof ValidationError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: ${error.message}`);
        }
    }

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–µ—Å—ñ—ó
     */
    async validateSession(sessionId) {
        // –î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ null, –æ—Å–∫—ñ–ª—å–∫–∏ —Å–µ—Å—ñ—ó —É–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è Express
        // –í —Ä–µ–∞–ª—å–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ —Ç—É—Ç –±—É–ª–∞ –± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ –ë–î
        console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Å—ñ—ó: ${sessionId}`);
        return null;
    }

    /**
     * –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–∏—Å—Ç–µ–º–∏
     */
    async logout(sessionId, userId, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            if (userId) {
                await this._logSecurityEvent('LOGOUT', userId, {
                    session_id: sessionId,
                    ...sessionInfo
                });
                console.log(`üîì –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –≤–∏–π—à–æ–≤ –∑ —Å–∏—Å—Ç–µ–º–∏`);
            } else {
                console.log(`üîì –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏ (—Å–µ—Å—ñ—è: ${sessionId})`);
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏—Ö–æ–¥—É:', error);
            // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –≤–∏—Ö—ñ–¥
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π
     */
    async cleanupExpiredSessions() {
        console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π (–∑–∞–≥–ª—É—à–∫–∞)');
        return 0; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 0 —è–∫ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–∏—â–µ–Ω–∏—Ö —Å–µ—Å—ñ–π
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤—Ö–æ–¥—ñ
     */
    async setFirstTimePassword(userId, password, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            const { data: user, error: userError } = await this.supabase
                .from('users')
                .select('*')
                .eq('id', userId)
                .single();
                
            if (userError || !user) {
                throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            if (!user.first_login) {
                throw new ValidationError('–ü–∞—Ä–æ–ª—å –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            }

            // –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
            const hashedPassword = await bcrypt.hash(password, this.saltRounds);

            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const { error: updateError } = await this.supabase
                .from('users')
                .update({
                    password_hash: hashedPassword,
                    first_login: false,
                    updated_at: new Date().toISOString()
                })
                .eq('id', userId);

            if (updateError) {
                throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è: ${updateError.message}`);
            }

            await this._logSecurityEvent('PASSWORD_SET', userId, {
                username: user.username,
                ...sessionInfo
            });

            console.log(`üîë –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username} (ID: ${userId})`);
        } catch (error) {
            if (error instanceof ValidationError || error instanceof NotFoundError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è: ${error.message}`);
        }
    }

    /**
     * –ó–º—ñ–Ω–∞ –≤–ª–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
     */
    async changeOwnPassword(userId, currentPassword, newPassword, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            const { data: user, error: userError } = await this.supabase
                .from('users')
                .select('*')
                .eq('id', userId)
                .single();
                
            if (userError || !user) {
                throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å
            if (!user.password_hash) {
                throw new ValidationError('–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è');
            }

            const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password_hash);
            if (!isCurrentPasswordValid) {
                throw new ValidationError('–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π');
            }

            // –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
            const hashedNewPassword = await bcrypt.hash(newPassword, this.saltRounds);

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å
            const { error: updateError } = await this.supabase
                .from('users')
                .update({
                    password_hash: hashedNewPassword,
                    updated_at: new Date().toISOString()
                })
                .eq('id', userId);

            if (updateError) {
                throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: ${updateError.message}`);
            }

            await this._logSecurityEvent('PASSWORD_CHANGED', userId, {
                username: user.username,
                ...sessionInfo
            });

            console.log(`üîë –ó–º—ñ–Ω–µ–Ω–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username} (ID: ${userId})`);
        } catch (error) {
            if (error instanceof ValidationError || error instanceof NotFoundError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: ${error.message}`);
        }
    }

    /**
     * –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     */
    async changePasswordByAdmin(userId, newPassword, adminId, sessionInfo = {}) {
        this._checkInitialization();
        
        try {
            const { data: user, error: userError } = await this.supabase
                .from('users')
                .select('*')
                .eq('id', userId)
                .single();
                
            if (userError || !user) {
                throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
            const hashedNewPassword = await bcrypt.hash(newPassword, this.saltRounds);

            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å
            const { error: updateError } = await this.supabase
                .from('users')
                .update({
                    password_hash: hashedNewPassword,
                    first_login: false, // –°–∫–∏–¥–∞—î–º–æ first_login –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∞–¥–º—ñ–Ω–æ–º
                    updated_at: new Date().toISOString()
                })
                .eq('id', userId);

            if (updateError) {
                throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: ${updateError.message}`);
            }

            await this._logSecurityEvent('PASSWORD_CHANGED_BY_ADMIN', userId, {
                username: user.username,
                admin_id: adminId,
                ...sessionInfo
            });

            console.log(`üîë –ê–¥–º—ñ–Ω –∑–º—ñ–Ω–∏–≤ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username} (ID: ${userId})`);
        } catch (error) {
            if (error instanceof ValidationError || error instanceof NotFoundError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω–æ–º:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω–æ–º: ${error.message}`);
        }
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–æ–≤–∏—Ö –ø–æ–¥—ñ–π
     */
    async _logSecurityEvent(eventType, userId, details = {}) {
        try {
            console.log(`üîê Security Event: ${eventType} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`, details);
            
            // TODO: –î–æ–¥–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ audit —Ç–∞–±–ª–∏—Ü—é —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è security event:', error);
        }
    }
}

module.exports = SupabaseAuthService; 