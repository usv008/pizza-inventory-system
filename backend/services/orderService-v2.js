/**
 * Order Service v2
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ SQLite, —Ç–∞–∫ —ñ Supabase PostgreSQL
 */

const { DatabaseError, NotFoundError, ValidationError } = require('../middleware/errors/AppError');

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ queries –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É –ë–î
let orderQueries, productQueries;

const initializeQueries = (dependencies = {}) => {
    const useSupabase = process.env.USE_SUPABASE === 'true';
    
    if (useSupabase) {
        orderQueries = require('../queries/supabase/orderQueries');
        productQueries = require('../queries/supabase/productQueries');
    } else {
        console.log('‚ö†Ô∏è SQLite mode: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è SQLite queries –¥–ª—è orders');
        orderQueries = require('../queries/sqlite/orderQueries');
        productQueries = require('../queries/supabase/productQueries'); // –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∏–π –¥–ª—è SQLite
    }
};

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ v2
 * –ù–∞–¥–∞—î –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ –≤–∫–ª—é—á–∞—é—á–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π
 */
class OrderServiceV2 {
    constructor() {
        this.batchController = null;
        this.OperationsLogController = null;
        this.initialized = false;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    initialize(dependencies) {
        initializeQueries(dependencies);
        
        this.batchController = dependencies.batchController;
        this.OperationsLogController = dependencies.OperationsLogController;
        this.initialized = true;
        console.log('‚úÖ OrderService v2 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é', 
            process.env.USE_SUPABASE === 'true' ? 'Supabase' : 'SQLite');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    _checkInitialization() {
        if (!this.initialized || !orderQueries) {
            throw new DatabaseError('OrderService v2 –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
     */
    async getAllOrders(filters = {}) {
        this._checkInitialization();
        
        try {
            const orders = await orderQueries.getAll(filters);
            
            console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ ${orders.length} –∑–∞–º–æ–≤–ª–µ–Ω—å`);
            return orders;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID
     */
    async getOrderById(orderId) {
        this._checkInitialization();
        
        try {
            const order = await orderQueries.getById(orderId);
            
            if (!order) {
                throw new NotFoundError(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${orderId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
            
            console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${order.order_number}`);
            return order;
        } catch (error) {
            if (error instanceof NotFoundError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é)
     */
    async getOrderForEdit(orderId) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π –∂–µ –º–µ—Ç–æ–¥ —â–æ —ñ getOrderById
        return await this.getOrderById(orderId);
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async createOrder(orderData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤ —É –ø–æ–∑–∏—Ü—ñ—è—Ö
            if (orderData.items && orderData.items.length > 0) {
                await this._validateOrderProducts(orderData.items);
            }

            // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
            if (!orderData.order_number) {
                orderData.order_number = await this._generateOrderNumber();
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            const orderId = await orderQueries.create({
                order_number: orderData.order_number,
                client_id: orderData.client_id,
                client_name: orderData.client_name,
                client_contact: orderData.client_contact,
                order_date: orderData.order_date || new Date().toISOString().slice(0, 10),
                delivery_date: orderData.delivery_date,
                status: orderData.status || 'NEW',
                notes: orderData.notes,
                created_by: auditInfo.user || orderData.created_by || 'system',
                created_by_user_id: auditInfo.userId || orderData.created_by_user_id
            });

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            if (orderData.items && orderData.items.length > 0) {
                for (const item of orderData.items) {
                    await orderQueries.createItem({
                        order_id: orderId,
                        product_id: item.product_id,
                        quantity: item.quantity,
                        boxes: item.boxes || Math.floor(item.quantity / 12), // –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤ –∫–æ—Ä–æ–±—Ü—ñ
                        pieces: item.pieces || (item.quantity % 12),
                        reserved_quantity: item.reserved_quantity || 0,
                        produced_quantity: item.produced_quantity || 0,
                        notes: item.notes,
                        allocated_batches: item.allocated_batches
                    });
                }
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                await orderQueries.updateTotals(orderId);
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            const newOrder = await this.getOrderById(orderId);

            // –†–µ–∑–µ—Ä–≤—É—î–º–æ –ø–∞—Ä—Ç—ñ—ó —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (orderData.auto_reserve && this.batchController) {
                await this.reserveBatchesForOrder(orderId, auditInfo);
            }

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logOrderOperation('CREATE', orderId, {
                ...auditInfo,
                orderData: newOrder
            });

            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${newOrder.order_number} (ID: ${orderId})`);
            return newOrder;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
            throw error instanceof DatabaseError || error instanceof ValidationError 
                ? error 
                : new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async updateOrder(orderId, orderData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            const existingOrder = await this.getOrderById(orderId);

            // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            await orderQueries.update(orderId, orderData);

            // –Ø–∫—â–æ —î –Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó, –æ–Ω–æ–≤–ª—é—î–º–æ —ó—Ö
            if (orderData.items) {
                // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–∑–∏—Ü—ñ—ó
                await orderQueries.deleteAllItems(orderId);
                
                // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó
                for (const item of orderData.items) {
                    await orderQueries.createItem({
                        order_id: orderId,
                        product_id: item.product_id,
                        quantity: item.quantity,
                        boxes: item.boxes || Math.floor(item.quantity / 12),
                        pieces: item.pieces || (item.quantity % 12),
                        reserved_quantity: item.reserved_quantity || 0,
                        produced_quantity: item.produced_quantity || 0,
                        notes: item.notes,
                        allocated_batches: item.allocated_batches
                    });
                }
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏
                await orderQueries.updateTotals(orderId);
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            const updatedOrder = await this.getOrderById(orderId);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logOrderOperation('UPDATE', orderId, {
                ...auditInfo,
                oldData: existingOrder,
                newData: updatedOrder
            });

            console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${updatedOrder.order_number}`);
            return updatedOrder;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
            throw error instanceof DatabaseError || error instanceof NotFoundError
                ? error 
                : new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async updateOrderStatus(orderId, status, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            const existingOrder = await this.getOrderById(orderId);
            
            await orderQueries.update(orderId, { status });
            
            const updatedOrder = await this.getOrderById(orderId);

            // –õ–æ–≥—É—î–º–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
            await this._logOrderOperation('STATUS_CHANGE', orderId, {
                ...auditInfo,
                oldStatus: existingOrder.status,
                newStatus: status
            });

            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${updatedOrder.order_number} –∑–º—ñ–Ω–µ–Ω–æ: ${existingOrder.status} ‚Üí ${status}`);
            return updatedOrder;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
            throw error instanceof DatabaseError || error instanceof NotFoundError
                ? error 
                : new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ºov–ª–µ–Ω–Ω—è
     */
    async cancelOrder(orderId, auditInfo = {}) {
        return await this.updateOrderStatus(orderId, 'CANCELLED', auditInfo);
    }

    /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async deleteOrder(orderId, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            const order = await this.getOrderById(orderId);

            // –í—ñ–¥–º—ñ–Ω—è—î–º–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π
            if (this.batchController) {
                await this.unreserveBatchesForOrder(orderId, auditInfo);
            }

            // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø–æ–∑–∏—Ü—ñ—ó –≤–∏–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ CASCADE)
            await orderQueries.delete(orderId);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logOrderOperation('DELETE', orderId, {
                ...auditInfo,
                orderData: order
            });

            console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${order.order_number}`);
            return { success: true, message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ' };
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
            throw error instanceof DatabaseError || error instanceof NotFoundError
                ? error 
                : new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –†–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async reserveBatchesForOrder(orderId, auditInfo = {}) {
        this._checkInitialization();
        
        if (!this.batchController) {
            console.warn('‚ö†Ô∏è BatchController –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è');
            return { success: false, message: '–°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Ç—ñ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' };
        }

        try {
            const order = await this.getOrderById(orderId);
            
            const reservations = [];
            const warnings = [];

            for (const item of order.order_items) {
                try {
                    const reservation = await this.batchController.reserveForOrder(
                        item.product_id,
                        item.quantity,
                        orderId,
                        auditInfo
                    );
                    
                    if (reservation.success) {
                        reservations.push(reservation);
                        
                        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è
                        await orderQueries.updateItem(item.id, {
                            reserved_quantity: item.quantity,
                            allocated_batches: reservation.batches
                        });
                    } else {
                        warnings.push(`–¢–æ–≤–∞—Ä ${item.products?.name}: ${reservation.message}`);
                    }
                } catch (error) {
                    warnings.push(`–¢–æ–≤–∞—Ä ${item.products?.name}: –ø–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è`);
                }
            }

            console.log(`‚úÖ –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${order.order_number}: ${reservations.length} —É—Å–ø—ñ—à–Ω–∏—Ö, ${warnings.length} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å`);
            
            return {
                success: true,
                reservations,
                warnings
            };
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π: ${error.message}`);
        }
    }

    /**
     * –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async unreserveBatchesForOrder(orderId, auditInfo = {}) {
        this._checkInitialization();
        
        if (!this.batchController) {
            console.warn('‚ö†Ô∏è BatchController –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è');
            return { success: false, message: '–°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä—Ç—ñ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' };
        }

        try {
            const order = await this.getOrderById(orderId);
            
            for (const item of order.order_items) {
                if (item.reserved_quantity > 0) {
                    await this.batchController.unreserveForOrder(
                        item.product_id,
                        item.reserved_quantity,
                        orderId,
                        auditInfo
                    );
                    
                    // –û—á–∏—â—É—î–º–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –≤ –ø–æ–∑–∏—Ü—ñ—ó
                    await orderQueries.updateItem(item.id, {
                        reserved_quantity: 0,
                        allocated_batches: null
                    });
                }
            }

            console.log(`‚úÖ –í—ñ–¥–º—ñ–Ω–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${order.order_number}`);
            return { success: true };
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–º—ñ–Ω–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–º—ñ–Ω–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å
     */
    async getOrderStats(period = 'month') {
        this._checkInitialization();
        
        try {
            const stats = await orderQueries.getStats(period);
            
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ ${period}: ${stats.total_orders} –∑–∞–º–æ–≤–ª–µ–Ω—å`);
            return stats;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        }
    }

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
     */
    async _validateOrderProducts(items) {
        if (!productQueries) {
            console.warn('‚ö†Ô∏è productQueries –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤');
            return;
        }

        for (const item of items) {
            const product = await productQueries.getById(item.product_id);
            if (!product) {
                throw new ValidationError(`–¢–æ–≤–∞—Ä –∑ ID ${item.product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
            
            if (item.quantity <= 0) {
                throw new ValidationError(`–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É ${product.name} –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0`);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async _generateOrderNumber() {
        const today = new Date();
        const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '');
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –Ω–æ–º–µ—Ä –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        try {
            const orders = await orderQueries.getAll({
                date_from: today.toISOString().slice(0, 10),
                date_to: today.toISOString().slice(0, 10),
                limit: 1
            });
            
            let counter = 1;
            if (orders.length > 0) {
                const lastNumber = orders[0].order_number;
                const match = lastNumber.match(/-(\d+)$/);
                if (match) {
                    counter = parseInt(match[1]) + 1;
                }
            }
            
            return `${dateStr}-${counter.toString().padStart(3, '0')}`;
        } catch (error) {
            // Fallback –¥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            return `${dateStr}-001`;
        }
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
     */
    async _logOrderOperation(operationType, orderId, logData) {
        if (!this.OperationsLogController) {
            console.warn('‚ö†Ô∏è OperationsLogController –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è');
            return;
        }

        try {
            await this.OperationsLogController.logOperation({
                operation_type: `ORDER_${operationType}`,
                operation_id: orderId,
                entity_type: 'order',
                entity_id: orderId,
                old_data: logData.oldData || null,
                new_data: logData.newData || logData.orderData || null,
                description: this._getOperationDescription(operationType, logData),
                user_name: logData.user || 'system',
                ip_address: logData.ip || null,
                user_agent: logData.userAgent || null
            });
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
            // –ù–µ –±–ª–æ–∫—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –ª–æ–≥—É–≤–∞–Ω–Ω—è
        }
    }

    /**
     * –û–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
     */
    _getOperationDescription(operationType, logData) {
        const orderData = logData.orderData || logData.newData;
        const orderNumber = orderData?.order_number || '–Ω–µ–≤—ñ–¥–æ–º–µ';
        
        switch (operationType) {
            case 'CREATE':
                return `–°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderNumber}`;
            case 'UPDATE':
                return `–û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderNumber}`;
            case 'STATUS_CHANGE':
                return `–ó–º—ñ–Ω–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderNumber}: ${logData.oldStatus} ‚Üí ${logData.newStatus}`;
            case 'DELETE':
                return `–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderNumber}`;
            default:
                return `–û–ø–µ—Ä–∞—Ü—ñ—è –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º ${orderNumber}`;
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ instance –∫–ª–∞—Å—É –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑—ñ —Å—Ç–∞—Ä–∏–º –∫–æ–¥–æ–º
const orderServiceV2 = new OrderServiceV2();

module.exports = orderServiceV2;