const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });
const { NotFoundError, DatabaseError, ValidationError } = require('../middleware/errors/AppError');

/**
 * Supabase Client Service - –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ Supabase
 * –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑ SQLite –Ω–∞ PostgreSQL/Supabase
 */

// Initialize Supabase client
const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

class SupabaseClientService {
    constructor() {
        this.OperationsLogController = null;
        this.initialized = false;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    initialize(dependencies) {
        this.OperationsLogController = dependencies.OperationsLogController;
        this.initialized = true;
        console.log('‚úÖ SupabaseClientService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    _checkInitialization() {
        if (!this.initialized) {
            throw new DatabaseError('SupabaseClientService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
     */
    async getAllClients() {
        this._checkInitialization();
        
        try {
            const { data: clients, error } = await supabase
                .from('clients')
                .select('*')
                .eq('is_active', true)
                .order('name');

            if (error) {
                console.error('Supabase error in getAllClients:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ Supabase', error);
            }

            console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ ${clients?.length || 0} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
            return clients || [];
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
            if (error instanceof DatabaseError) {
                throw error;
            }
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID
     */
    async getClientById(clientId) {
        this._checkInitialization();
        
        try {
            const { data: client, error } = await supabase
                .from('clients')
                .select('*')
                .eq('id', clientId)
                .eq('is_active', true)
                .single();

            if (error) {
                if (error.code === 'PGRST116') {
                    console.log(`‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç–∞ –∑ ID ${clientId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                    return null;
                }
                console.error('Supabase error in getClientById:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ Supabase', error);
            }

            if (client) {
                console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: ${client.name} (ID: ${clientId})`);
            }
            
            return client;
        } catch (error) {
            if (error instanceof DatabaseError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ${error.message}`);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
     */
    async createClient(clientData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ –∫–ª—ñ—î–Ω—Ç–∞
            const existingClient = await this._findClientByName(clientData.name);
            if (existingClient) {
                throw new ValidationError(`–ö–ª—ñ—î–Ω—Ç –∑ –Ω–∞–∑–≤–æ—é "${clientData.name}" –≤–∂–µ —ñ—Å–Ω—É—î`);
            }

            // Map data to Supabase format
            const supabaseData = {
                name: clientData.name,
                contact_person: clientData.contact_person || null,
                phone: clientData.phone || null,
                email: clientData.email || null,
                address: clientData.address || null,
                notes: clientData.notes || null,
                is_active: true,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };

            const { data: result, error } = await supabase
                .from('clients')
                .insert([supabaseData])
                .select()
                .single();

            if (error) {
                console.error('Supabase error in createClient:', error);
                if (error.code === '23505') { // PostgreSQL unique constraint violation
                    throw new ValidationError(`–ö–ª—ñ—î–Ω—Ç –∑ –Ω–∞–∑–≤–æ—é "${clientData.name}" –≤–∂–µ —ñ—Å–Ω—É—î`);
                }
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –≤ Supabase', error);
            }
            
            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: ${clientData.name} (ID: ${result.id})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logClientOperation('CREATE_CLIENT', result.id, {
                operation_id: result.id,
                entity_type: 'client',
                entity_id: result.id,
                new_data: clientData,
                description: `–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ "${clientData.name}"`,
                ...auditInfo
            });

            return { id: result.id };
        } catch (error) {
            if (error instanceof ValidationError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ${error.message}`);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
     */
    async updateClient(clientId, clientData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const oldClient = await this.getClientById(clientId);
            if (!oldClient) {
                throw new NotFoundError('–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ (—è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∞—Å—å)
            if (clientData.name !== oldClient.name) {
                const existingClient = await this._findClientByName(clientData.name);
                if (existingClient && existingClient.id !== clientId) {
                    throw new ValidationError(`–ö–ª—ñ—î–Ω—Ç –∑ –Ω–∞–∑–≤–æ—é "${clientData.name}" –≤–∂–µ —ñ—Å–Ω—É—î`);
                }
            }

            // Map data to Supabase format
            const supabaseData = {
                name: clientData.name,
                contact_person: clientData.contact_person !== undefined ? clientData.contact_person : oldClient.contact_person,
                phone: clientData.phone !== undefined ? clientData.phone : oldClient.phone,
                email: clientData.email !== undefined ? clientData.email : oldClient.email,
                address: clientData.address !== undefined ? clientData.address : oldClient.address,
                notes: clientData.notes !== undefined ? clientData.notes : oldClient.notes,
                updated_at: new Date().toISOString()
            };

            const { data: result, error } = await supabase
                .from('clients')
                .update(supabaseData)
                .eq('id', clientId)
                .eq('is_active', true)
                .select();

            if (error) {
                console.error('Supabase error in updateClient:', error);
                if (error.code === '23505') { // PostgreSQL unique constraint violation
                    throw new ValidationError(`–ö–ª—ñ—î–Ω—Ç –∑ –Ω–∞–∑–≤–æ—é "${clientData.name}" –≤–∂–µ —ñ—Å–Ω—É—î`);
                }
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –≤ Supabase', error);
            }

            if (!result || result.length === 0) {
                throw new NotFoundError('–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ');
            }

            console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: ${clientData.name} (ID: ${clientId})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logClientOperation('UPDATE_CLIENT', clientId, {
                operation_id: clientId,
                entity_type: 'client',
                entity_id: clientId,
                old_data: oldClient,
                new_data: clientData,
                description: `–û–Ω–æ–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ "${clientData.name}"`,
                ...auditInfo
            });

            return { changes: 1 };
        } catch (error) {
            if (error instanceof NotFoundError || error instanceof ValidationError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ${error.message}`);
        }
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ (soft delete)
     */
    async deactivateClient(clientId, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const client = await this.getClientById(clientId);
            if (!client) {
                throw new NotFoundError('–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const { data: result, error } = await supabase
                .from('clients')
                .update({ 
                    is_active: false,
                    updated_at: new Date().toISOString()
                })
                .eq('id', clientId)
                .select();

            if (error) {
                console.error('Supabase error in deactivateClient:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ –≤ Supabase', error);
            }

            if (!result || result.length === 0) {
                throw new NotFoundError('–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
            }

            console.log(`üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: ${client.name} (ID: ${clientId})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logClientOperation('DEACTIVATE_CLIENT', clientId, {
                operation_id: clientId,
                entity_type: 'client',
                entity_id: clientId,
                old_data: client,
                description: `–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ "${client.name}"`,
                ...auditInfo
            });

            return { changes: 1 };
        } catch (error) {
            if (error instanceof NotFoundError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞: ${error.message}`);
        }
    }

    /**
     * –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
     */
    async searchClients(searchParams = {}) {
        this._checkInitialization();
        
        try {
            let query = supabase
                .from('clients')
                .select('*')
                .eq('is_active', true);

            // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
            if (searchParams.name) {
                query = query.ilike('name', `%${searchParams.name}%`);
            }
            if (searchParams.phone) {
                query = query.ilike('phone', `%${searchParams.phone}%`);
            }
            if (searchParams.email) {
                query = query.ilike('email', `%${searchParams.email}%`);
            }

            query = query.order('name');

            const { data: clients, error } = await query;

            if (error) {
                console.error('Supabase error in searchClients:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤ Supabase', error);
            }

            console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ ${clients?.length || 0} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –ø–æ—à—É–∫—É`);
            return clients || [];
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
            if (error instanceof DatabaseError) {
                throw error;
            }
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –ó–Ω–∞–π—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –Ω–∞–∑–≤–æ—é (–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ)
     */
    async _findClientByName(name) {
        try {
            const { data: client, error } = await supabase
                .from('clients')
                .select('*')
                .eq('name', name)
                .eq('is_active', true)
                .single();

            if (error && error.code !== 'PGRST116') {
                console.error('Supabase error in _findClientByName:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –Ω–∞–∑–≤–æ—é', error);
            }

            return client;
        } catch (error) {
            if (error instanceof DatabaseError) {
                throw error;
            }
            return null;
        }
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∫–ª—ñ—î–Ω—Ç—ñ–≤
     */
    async _logClientOperation(operationType, clientId, logData) {
        try {
            if (this.OperationsLogController) {
                await this.OperationsLogController.logClientOperation(
                    operationType,
                    clientId,
                    logData
                );
            }
        } catch (logError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞:', logError);
            // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –ª–æ–≥—É–≤–∞–Ω–Ω—è, —â–æ–± –Ω–µ –∑–ª–∞–º–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
     */
    async getClientStats() {
        this._checkInitialization();
        
        try {
            const { data: allClients, error: allError } = await supabase
                .from('clients')
                .select('id, is_active');

            if (allError) {
                console.error('Supabase error in getClientStats:', allError);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤', allError);
            }

            const stats = {
                total: allClients?.length || 0,
                active: allClients?.filter(c => c.is_active).length || 0,
                inactive: allClients?.filter(c => !c.is_active).length || 0
            };

            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${stats.active} –∞–∫—Ç–∏–≤–Ω–∏—Ö, ${stats.inactive} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö`);
            return stats;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
            if (error instanceof DatabaseError) {
                throw error;
            }
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${error.message}`);
        }
    }
}

module.exports = SupabaseClientService; 