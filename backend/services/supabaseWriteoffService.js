const { createClient } = require('@supabase/supabase-js');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });
const { NotFoundError, DatabaseError, ValidationError } = require('../middleware/errors/AppError');

/**
 * Supabase Writeoff Service - –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω—å —á–µ—Ä–µ–∑ Supabase
 * –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑ SQLite –Ω–∞ PostgreSQL/Supabase
 */

// Initialize Supabase client
const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

class SupabaseWriteoffService {
    constructor() {
        this.OperationsLogController = null;
        this.initialized = false;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    initialize(dependencies) {
        this.OperationsLogController = dependencies.OperationsLogController;
        this.initialized = true;
        console.log('‚úÖ SupabaseWriteoffService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    _checkInitialization() {
        if (!this.initialized) {
            throw new DatabaseError('SupabaseWriteoffService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–ø–∏—Å–∞–Ω–Ω—è
     */
    async getAllWriteoffs() {
        this._checkInitialization();
        
        try {
            const { data: writeoffs, error } = await supabase
                .from('writeoffs')
                .select(`
                    *,
                    products!inner (
                        id,
                        name
                    )
                `)
                .order('created_at', { ascending: false });

            if (error) {
                console.error('Supabase error in getAllWriteoffs:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω—å –∑ Supabase', error);
            }

            console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ ${writeoffs?.length || 0} —Å–ø–∏—Å–∞–Ω—å`);
            return writeoffs || [];
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω—å:', error);
            if (error instanceof DatabaseError) {
                throw error;
            }
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω—å: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–∞–Ω–Ω—è –∑–∞ ID
     */
    async getWriteoffById(writeoffId) {
        this._checkInitialization();
        
        try {
            const { data: writeoff, error } = await supabase
                .from('writeoffs')
                .select(`
                    *,
                    products (
                        id,
                        name
                    )
                `)
                .eq('id', writeoffId)
                .single();

            if (error) {
                if (error.code === 'PGRST116') {
                    console.log(`‚ö†Ô∏è –°–ø–∏—Å–∞–Ω–Ω—è –∑ ID ${writeoffId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                    return null;
                }
                console.error('Supabase error in getWriteoffById:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è –∑ Supabase', error);
            }

            if (writeoff) {
                console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è: ${writeoff.quantity} —à—Ç. –ø—Ä–æ–¥—É–∫—Ç—É ${writeoff.products?.name || 'N/A'} (ID: ${writeoffId})`);
            }
            
            return writeoff;
        } catch (error) {
            if (error instanceof DatabaseError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è ${writeoffId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ —Å–ø–∏—Å–∞–Ω–Ω—è
     */
    async createWriteoff(writeoffData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // Map data to Supabase format (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ö–µ–º–∏)
            const supabaseData = {
                product_id: writeoffData.product_id,
                quantity: writeoffData.total_quantity || writeoffData.quantity,
                reason: writeoffData.reason || null,
                notes: writeoffData.notes || null,
                writeoff_date: writeoffData.writeoff_date || new Date().toISOString().split('T')[0]
                // –ü—Ä–∏–±—Ä–∞–ª–∏ created_at —Ç–∞ updated_at —Ç–∞–∫ —è–∫ Supabase —ó—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î
            };

            const { data: result, error } = await supabase
                .from('writeoffs')
                .insert([supabaseData])
                .select(`
                    *,
                    products (name)
                `)
                .single();

            if (error) {
                console.error('Supabase error in createWriteoff:', error);
                if (error.code === '23503') { // Foreign key violation
                    throw new ValidationError('–ü—Ä–æ–¥—É–∫—Ç –∞–±–æ –ø–∞—Ä—Ç—ñ—è –Ω–µ —ñ—Å–Ω—É—î');
                }
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è –≤ Supabase', error);
            }
            
            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è: ${result.quantity} —à—Ç. –ø—Ä–æ–¥—É–∫—Ç—É "${result.products?.name || 'N/A'}" (ID: ${result.id})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logWriteoffOperation('CREATE_WRITEOFF', result.id, {
                operation_id: result.id,
                entity_type: 'writeoff',
                entity_id: result.id,
                new_data: writeoffData,
                description: `–°—Ç–≤–æ—Ä–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è: ${result.quantity} —à—Ç. –ø—Ä–æ–¥—É–∫—Ç—É "${result.products?.name || 'N/A'}"`,
                ...auditInfo
            });

            return { id: result.id };
        } catch (error) {
            if (error instanceof ValidationError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–∞–Ω–Ω—è
     */
    async updateWriteoff(writeoffId, writeoffData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const oldWriteoff = await this.getWriteoffById(writeoffId);
            if (!oldWriteoff) {
                throw new NotFoundError('–°–ø–∏—Å–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // Map data to Supabase format (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ö–µ–º–∏)
            const supabaseData = {
                product_id: writeoffData.product_id !== undefined ? writeoffData.product_id : oldWriteoff.product_id,
                quantity: writeoffData.total_quantity !== undefined ? writeoffData.total_quantity : (writeoffData.quantity !== undefined ? writeoffData.quantity : oldWriteoff.quantity),
                reason: writeoffData.reason !== undefined ? writeoffData.reason : oldWriteoff.reason,
                notes: writeoffData.notes !== undefined ? writeoffData.notes : oldWriteoff.notes,
                writeoff_date: writeoffData.writeoff_date !== undefined ? writeoffData.writeoff_date : oldWriteoff.writeoff_date
                // –ü—Ä–∏–±—Ä–∞–ª–∏ updated_at - Supabase –æ–Ω–æ–≤–ª—é—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
            };

            const { data: result, error } = await supabase
                .from('writeoffs')
                .update(supabaseData)
                .eq('id', writeoffId)
                .select(`
                    *,
                    products (name)
                `);

            if (error) {
                console.error('Supabase error in updateWriteoff:', error);
                if (error.code === '23503') { // Foreign key violation
                    throw new ValidationError('–ü—Ä–æ–¥—É–∫—Ç –∞–±–æ –ø–∞—Ä—Ç—ñ—è –Ω–µ —ñ—Å–Ω—É—î');
                }
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è –≤ Supabase', error);
            }

            if (!result || result.length === 0) {
                throw new NotFoundError('–°–ø–∏—Å–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ');
            }

            console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è: ${result[0].quantity} —à—Ç. –ø—Ä–æ–¥—É–∫—Ç—É "${result[0].products?.name || 'N/A'}" (ID: ${writeoffId})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logWriteoffOperation('UPDATE_WRITEOFF', writeoffId, {
                operation_id: writeoffId,
                entity_type: 'writeoff',
                entity_id: writeoffId,
                old_data: oldWriteoff,
                new_data: writeoffData,
                description: `–û–Ω–æ–≤–ª–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è: ${result[0].quantity} —à—Ç. –ø—Ä–æ–¥—É–∫—Ç—É "${result[0].products?.name || 'N/A'}"`,
                ...auditInfo
            });

            return { changes: 1 };
        } catch (error) {
            if (error instanceof NotFoundError || error instanceof ValidationError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è ${writeoffId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–∏—Å–∞–Ω–Ω—è
     */
    async deleteWriteoff(writeoffId, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å–ø–∏—Å–∞–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const writeoff = await this.getWriteoffById(writeoffId);
            if (!writeoff) {
                throw new NotFoundError('–°–ø–∏—Å–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const { data: result, error } = await supabase
                .from('writeoffs')
                .delete()
                .eq('id', writeoffId)
                .select();

            if (error) {
                console.error('Supabase error in deleteWriteoff:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è –≤ Supabase', error);
            }

            if (!result || result.length === 0) {
                throw new NotFoundError('–°–ø–∏—Å–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è: ${writeoff.quantity} —à—Ç. –ø—Ä–æ–¥—É–∫—Ç—É "${writeoff.products?.name || 'N/A'}" (ID: ${writeoffId})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logWriteoffOperation('DELETE_WRITEOFF', writeoffId, {
                operation_id: writeoffId,
                entity_type: 'writeoff',
                entity_id: writeoffId,
                old_data: writeoff,
                description: `–í–∏–¥–∞–ª–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–Ω—è: ${writeoff.quantity} —à—Ç. –ø—Ä–æ–¥—É–∫—Ç—É "${writeoff.products?.name || 'N/A'}"`,
                ...auditInfo
            });

            return { changes: 1 };
        } catch (error) {
            if (error instanceof NotFoundError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è ${writeoffId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –ü–æ—à—É–∫ —Å–ø–∏—Å–∞–Ω—å
     */
    async searchWriteoffs(searchParams = {}) {
        this._checkInitialization();
        
        try {
            let query = supabase
                .from('writeoffs')
                .select(`
                    *,
                    products (
                        id,
                        name,
                        code
                    ),
                    production_batches (
                        id,
                        batch_number
                    )
                `);

            // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
            if (searchParams.product_id) {
                query = query.eq('product_id', searchParams.product_id);
            }
            if (searchParams.batch_id) {
                query = query.eq('batch_id', searchParams.batch_id);
            }
            if (searchParams.reason) {
                query = query.ilike('reason', `%${searchParams.reason}%`);
            }
            if (searchParams.created_by) {
                query = query.ilike('created_by', `%${searchParams.created_by}%`);
            }
            if (searchParams.date_from) {
                query = query.gte('writeoff_date', searchParams.date_from);
            }
            if (searchParams.date_to) {
                query = query.lte('writeoff_date', searchParams.date_to);
            }

            query = query.order('created_at', { ascending: false });

            const { data: writeoffs, error } = await query;

            if (error) {
                console.error('Supabase error in searchWriteoffs:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å–ø–∏—Å–∞–Ω—å –≤ Supabase', error);
            }

            console.log(`üîç –ó–Ω–∞–π–¥–µ–Ω–æ ${writeoffs?.length || 0} —Å–ø–∏—Å–∞–Ω—å –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –ø–æ—à—É–∫—É`);
            return writeoffs || [];
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å–ø–∏—Å–∞–Ω—å:', error);
            if (error instanceof DatabaseError) {
                throw error;
            }
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å–ø–∏—Å–∞–Ω—å: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ø–∏—Å–∞–Ω—å
     */
    async getWriteoffStats(dateRange = {}) {
        this._checkInitialization();
        
        try {
            let query = supabase
                .from('writeoffs')
                .select(`
                    id,
                    quantity,
                    writeoff_date,
                    reason,
                    products (
                        id,
                        name,
                        code
                    )
                `);

            // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –¥–∞—Ç —è–∫—â–æ –∑–∞–¥–∞–Ω–∏–π
            if (dateRange.from) {
                query = query.gte('writeoff_date', dateRange.from);
            }
            if (dateRange.to) {
                query = query.lte('writeoff_date', dateRange.to);
            }

            const { data: writeoffs, error } = await query;

            if (error) {
                console.error('Supabase error in getWriteoffStats:', error);
                throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∏—Å–∞–Ω—å', error);
            }

            // –û–±—á–∏—Å–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = {
                total_writeoffs: writeoffs?.length || 0,
                total_quantity: writeoffs?.reduce((sum, w) => sum + (w.quantity || 0), 0) || 0,
                by_reason: {},
                by_product: {},
                by_date: {}
            };

            // –ì—Ä—É–ø—É—î–º–æ –∑–∞ –ø—Ä–∏—á–∏–Ω–∞–º–∏
            writeoffs?.forEach(writeoff => {
                const reason = writeoff.reason || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
                stats.by_reason[reason] = (stats.by_reason[reason] || 0) + writeoff.quantity;

                const productName = writeoff.products?.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–æ–¥—É–∫—Ç';
                stats.by_product[productName] = (stats.by_product[productName] || 0) + writeoff.quantity;

                const date = writeoff.writeoff_date?.split('T')[0] || '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞';
                stats.by_date[date] = (stats.by_date[date] || 0) + writeoff.quantity;
            });

            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–∏—Å–∞–Ω—å: ${stats.total_writeoffs} –∑–∞–ø–∏—Å—ñ–≤, ${stats.total_quantity} –æ–¥–∏–Ω–∏—Ü—å —Å–ø–∏—Å–∞–Ω–æ`);
            return stats;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∏—Å–∞–Ω—å:', error);
            if (error instanceof DatabaseError) {
                throw error;
            }
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∏—Å–∞–Ω—å: ${error.message}`);
        }
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π —Å–ø–∏—Å–∞–Ω—å
     */
    async _logWriteoffOperation(operationType, writeoffId, logData) {
        try {
            if (this.OperationsLogController) {
                await this.OperationsLogController.logOperation({
                    operation_type: operationType,
                    ...logData
                });
            }
        } catch (logError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó —Å–ø–∏—Å–∞–Ω–Ω—è:', logError);
            // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –ª–æ–≥—É–≤–∞–Ω–Ω—è, —â–æ–± –Ω–µ –∑–ª–∞–º–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
        }
    }
}

module.exports = SupabaseWriteoffService; 