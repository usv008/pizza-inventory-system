/**
 * Writeoff Service v2 - –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å–ø–∏—Å–∞–Ω–Ω—è–º–∏
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î SQLite —Ç–∞ Supabase PostgreSQL —á–µ—Ä–µ–∑ DatabaseAdapter
 */

const { AppError } = require('../middleware/errors/AppError');

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è query –∞–¥–∞–ø—Ç–µ—Ä—ñ–≤
let writeoffQueries = null;
let OperationsLogController = null;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è query –∞–¥–∞–ø—Ç–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ USE_SUPABASE
const initializeQueries = (dependencies = {}) => {
    const useSupabase = process.env.USE_SUPABASE === 'true';
    
    if (useSupabase) {
        writeoffQueries = require('../queries/supabase/writeoffQueries');
        console.log('üîß WriteoffService v2: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è Supabase PostgreSQL');
    } else {
        writeoffQueries = require('../queries/sqlite/writeoffQueries');
        console.log('üîß WriteoffService v2: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è SQLite');
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    OperationsLogController = dependencies.OperationsLogController;
};

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å–ø–∏—Å–∞–Ω–Ω—è–º–∏ (v2)
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î –æ–±–∏–¥–≤—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ universal query layer
 */
class WriteoffServiceV2 {
    constructor() {
        this.initialized = false;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    initialize(dependencies = {}) {
        try {
            initializeQueries(dependencies);
            this.initialized = true;
            console.log('‚úÖ WriteoffService v2 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó WriteoffService v2:', error);
            throw new AppError('–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ WriteoffService v2', 500, 'SERVICE_INIT_ERROR');
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    _ensureInitialized() {
        if (!this.initialized || !writeoffQueries) {
            throw new AppError('WriteoffService v2 –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ', 500, 'SERVICE_NOT_INITIALIZED');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–ø–∏—Å–∞–Ω–Ω—è –∑ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
     */
    async getAllWriteoffs(filters = {}) {
        this._ensureInitialized();
        
        try {
            const writeoffs = await writeoffQueries.getAll();

            // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –Ω–∞ —Ä—ñ–≤–Ω—ñ —Å–µ—Ä–≤—ñ—Å—É
            let filteredWriteoffs = writeoffs;

            if (filters.date_from) {
                filteredWriteoffs = filteredWriteoffs.filter(w => 
                    new Date(w.writeoff_date) >= new Date(filters.date_from)
                );
            }

            if (filters.date_to) {
                filteredWriteoffs = filteredWriteoffs.filter(w => 
                    new Date(w.writeoff_date) <= new Date(filters.date_to)
                );
            }

            if (filters.product_id) {
                filteredWriteoffs = filteredWriteoffs.filter(w => 
                    w.product_id === parseInt(filters.product_id)
                );
            }

            if (filters.reason) {
                filteredWriteoffs = filteredWriteoffs.filter(w => 
                    w.reason.toLowerCase().includes(filters.reason.toLowerCase())
                );
            }

            if (filters.responsible) {
                filteredWriteoffs = filteredWriteoffs.filter(w => 
                    w.responsible.toLowerCase().includes(filters.responsible.toLowerCase())
                );
            }

            // –û–±—á–∏—Å–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = this._calculateStats(filteredWriteoffs);

            return {
                writeoffs: filteredWriteoffs,
                stats,
                count: filteredWriteoffs.length,
                meta: {
                    total: filteredWriteoffs.length,
                    totalQuantity: stats.total_quantity,
                    uniqueProducts: stats.unique_products,
                    dateRange: stats.date_range,
                    filters: Object.keys(filters).length > 0 ? filters : null
                }
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω—å:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å–ø–∏—Å–∞–Ω—å', 
                500, 
                'WRITEOFFS_FETCH_ERROR',
                { originalError: error.message }
            );
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–∞–Ω–Ω—è –∑–∞ ID —Ç–æ–≤–∞—Ä—É
     */
    async getWriteoffsByProductId(productId) {
        this._ensureInitialized();
        
        if (!productId || isNaN(productId)) {
            throw new AppError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID —Ç–æ–≤–∞—Ä—É', 400, 'INVALID_PRODUCT_ID');
        }
        
        try {
            const writeoffs = await writeoffQueries.getByProductId(productId);
            
            // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É
            const stats = this._calculateStats(writeoffs);
            
            // –ë–µ—Ä–µ–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä –∑ –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø–∏—Å—É (—è–∫—â–æ —î)
            const productInfo = writeoffs.length > 0 ? {
                id: writeoffs[0].product_id,
                name: writeoffs[0].product_name,
                code: writeoffs[0].product_code,
                currentStock: writeoffs[0].product_stock_pieces || 0
            } : null;

            return {
                writeoffs,
                product: productInfo,
                stats,
                count: writeoffs.length,
                product_id: parseInt(productId),
                meta: {
                    total: writeoffs.length,
                    totalQuantity: stats.total_quantity,
                    productName: productInfo?.name,
                    productCode: productInfo?.code
                }
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∞–Ω—å –ø–æ —Ç–æ–≤–∞—Ä—É:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Å–ø–∏—Å–∞–Ω—å –¥–ª—è —Ç–æ–≤–∞—Ä—É', 
                500, 
                'WRITEOFFS_BY_PRODUCT_ERROR',
                { originalError: error.message, product_id: productId }
            );
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å —Å–ø–∏—Å–∞–Ω–Ω—è
     */
    async createWriteoff(writeoffData, auditInfo = {}) {
        this._ensureInitialized();
        
        try {
            // –í–∞–ª—ñ–¥—É—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            if (!writeoffData.product_id || !writeoffData.writeoff_date || !writeoffData.total_quantity) {
                throw new AppError('–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 400, 'MISSING_REQUIRED_FIELDS');
            }

            if (!writeoffData.reason || !writeoffData.responsible) {
                throw new AppError('–ü—Ä–∏—á–∏–Ω–∞ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –æ—Å–æ–±–∞ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ', 400, 'MISSING_REQUIRED_FIELDS');
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —Å–ø–∏—Å–∞–Ω–Ω—è
            const result = await writeoffQueries.create(writeoffData);
            
            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            if (OperationsLogController) {
                await this._logWriteoffOperation(writeoffData, result, 'CREATE', auditInfo);
            }
            
            console.log(`‚úÖ –°–ø–∏—Å–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: ID ${result.id}, —Ç–æ–≤–∞—Ä ${writeoffData.product_id}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å ${writeoffData.total_quantity}`);
            
            return {
                success: true,
                writeoff: {
                    id: result.id,
                    product_id: writeoffData.product_id,
                    writeoff_date: writeoffData.writeoff_date,
                    total_quantity: writeoffData.total_quantity,
                    boxes_quantity: result.boxes_quantity,
                    pieces_quantity: result.pieces_quantity,
                    reason: writeoffData.reason,
                    responsible: writeoffData.responsible,
                    notes: writeoffData.notes || '',
                    stock_movement_id: result.stock_movement_id
                },
                message: '–°–ø–∏—Å–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ'
            };
        } catch (error) {
            if (error instanceof AppError) throw error;
            
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å —Å–ø–∏—Å–∞–Ω–Ω—è', 
                500, 
                'WRITEOFF_CREATE_ERROR',
                { originalError: error.message, writeoffData }
            );
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∏—Å–∞–Ω—å
     */
    async getWriteoffStatistics(startDate, endDate) {
        this._ensureInitialized();
        
        try {
            return await writeoffQueries.getStats(startDate, endDate);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Å–ø–∏—Å–∞–Ω—å:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∏—Å–∞–Ω—å', 
                500, 
                'WRITEOFF_STATS_ERROR',
                { originalError: error.message }
            );
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∏—Å–∞–Ω—å –∑–∞ –ø–µ—Ä—ñ–æ–¥ (legacy method –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
     */
    async getWriteoffStatisticsByPeriod(period = 'month') {
        this._ensureInitialized();
        
        try {
            // –û–±—á–∏—Å–ª—é—î–º–æ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const now = new Date();
            let periodStart;
            
            switch (period) {
                case 'week':
                    periodStart = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    break;
                case 'month':
                    periodStart = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                    break;
                case 'quarter':
                    periodStart = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
                    break;
                case 'year':
                    periodStart = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);
                    break;
                default:
                    periodStart = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
            }

            const startDate = periodStart.toISOString().split('T')[0];
            const endDate = now.toISOString().split('T')[0];

            const stats = await this.getWriteoffStatistics(startDate, endDate);

            // –ê–¥–∞–ø—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è legacy API
            return {
                period: {
                    name: period,
                    start: startDate,
                    end: endDate
                },
                summary: {
                    totalWriteoffs: stats.overview.total_records,
                    totalQuantity: stats.overview.total_quantity,
                    uniqueProducts: stats.overview.unique_products,
                    uniqueReasons: stats.by_reasons.length
                },
                reasonStats: stats.by_reasons.map(r => [r.reason, { count: r.records_count, quantity: r.total_quantity }]).slice(0, 10),
                responsibleStats: stats.by_responsible.map(r => [r.responsible, { count: r.records_count, quantity: r.total_quantity }]).slice(0, 10),
                productStats: stats.by_products.map(p => [`${p.product_name} (${p.product_code})`, { count: p.records_count, quantity: p.total_quantity, product_id: p.product_id }]).slice(0, 10)
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Å–ø–∏—Å–∞–Ω—å –∑–∞ –ø–µ—Ä—ñ–æ–¥–æ–º:', error);
            throw new AppError(
                '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∏—Å–∞–Ω—å –∑–∞ –ø–µ—Ä—ñ–æ–¥–æ–º', 
                500, 
                'WRITEOFF_PERIOD_STATS_ERROR',
                { originalError: error.message }
            );
        }
    }

    /**
     * –û–±—á–∏—Å–ª–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–∏—Å–∞–Ω—å
     */
    _calculateStats(writeoffs) {
        if (!writeoffs || writeoffs.length === 0) {
            return {
                total_records: 0,
                total_quantity: 0,
                unique_products: 0,
                date_range: null
            };
        }
        
        const totalQuantity = writeoffs.reduce((sum, w) => sum + (w.total_quantity || 0), 0);
        const uniqueProducts = new Set(writeoffs.map(w => w.product_id)).size;
        
        // –î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        const dates = writeoffs.map(w => new Date(w.writeoff_date)).sort();
        const dateRange = dates.length > 0 ? {
            from: dates[0].toISOString().split('T')[0],
            to: dates[dates.length - 1].toISOString().split('T')[0]
        } : null;
        
        return {
            total_records: writeoffs.length,
            total_quantity: totalQuantity,
            unique_products: uniqueProducts,
            date_range: dateRange
        };
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó —Å–ø–∏—Å–∞–Ω–Ω—è
     */
    async _logWriteoffOperation(writeoffData, result, operation, auditInfo = {}) {
        try {
            if (!OperationsLogController) return;
            
            const description = `${operation === 'CREATE' ? '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è' : '–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∞–Ω–Ω—è'}: —Ç–æ–≤–∞—Ä ID ${writeoffData.product_id} - ${writeoffData.total_quantity} —à—Ç (–ø—Ä–∏—á–∏–Ω–∞: ${writeoffData.reason})`;
            
            await OperationsLogController.logOperation({
                operation_type: OperationsLogController.OPERATION_TYPES.WRITEOFF || 'WRITEOFF',
                entity_type: 'writeoff',
                entity_id: result.id,
                old_data: null,
                new_data: {
                    product_id: writeoffData.product_id,
                    writeoff_date: writeoffData.writeoff_date,
                    total_quantity: writeoffData.total_quantity,
                    reason: writeoffData.reason,
                    responsible: writeoffData.responsible,
                    notes: writeoffData.notes || ''
                },
                description: description,
                user_name: writeoffData.responsible || auditInfo.user || '–°–∏—Å—Ç–µ–º–∞',
                ip_address: auditInfo.ip_address || null,
                user_agent: auditInfo.user_agent || null
            });
            
            console.log(`üìã –û–ø–µ—Ä–∞—Ü—ñ—è —Å–ø–∏—Å–∞–Ω–Ω—è –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞: ${description}`);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó —Å–ø–∏—Å–∞–Ω–Ω—è:', error);
            // –ù–µ –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton instance
const writeoffServiceV2 = new WriteoffServiceV2();
module.exports = writeoffServiceV2;