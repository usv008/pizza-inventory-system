const { DatabaseError, NotFoundError, ValidationError } = require('../middleware/errors/AppError');

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏
 * –ù–∞–¥–∞—î –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –≤–∫–ª—é—á–∞—é—á–∏ –∞—É–¥–∏—Ç
 */
class ClientService {
    constructor() {
        this.clientQueries = null;
        this.OperationsLogController = null;
        this.initialized = false;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    initialize(dependencies) {
        this.clientQueries = dependencies.clientQueries;
        this.OperationsLogController = dependencies.OperationsLogController;
        this.initialized = true;
        console.log('‚úÖ ClientService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    _checkInitialization() {
        if (!this.initialized || !this.clientQueries) {
            throw new DatabaseError('ClientService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
     */
    async getAllClients() {
        this._checkInitialization();
        
        try {
            const clients = await this.clientQueries.getAll();
            
            console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ ${clients.length} –∫–ª—ñ—î–Ω—Ç—ñ–≤`);
            return clients;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID
     */
    async getClientById(clientId) {
        this._checkInitialization();
        
        try {
            const client = await this.clientQueries.getById(clientId);
            
            if (client) {
                console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: ${client.name} (ID: ${clientId})`);
            } else {
                console.log(`‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç–∞ –∑ ID ${clientId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
            
            return client;
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ${error.message}`);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
     */
    async createClient(clientData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ –∫–ª—ñ—î–Ω—Ç–∞
            const existingClient = await this._findClientByName(clientData.name);
            if (existingClient) {
                throw new ValidationError(`–ö–ª—ñ—î–Ω—Ç –∑ –Ω–∞–∑–≤–æ—é "${clientData.name}" –≤–∂–µ —ñ—Å–Ω—É—î`);
            }

            const result = await this.clientQueries.create(clientData);
            
            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: ${clientData.name} (ID: ${result.id})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logClientOperation('CREATE_CLIENT', result.id, {
                operation_id: result.id,
                entity_type: 'client',
                entity_id: result.id,
                new_data: clientData,
                description: `–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ "${clientData.name}"`,
                ...auditInfo
            });

            return result;
        } catch (error) {
            if (error instanceof ValidationError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ${error.message}`);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
     */
    async updateClient(clientId, clientData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const oldClient = await this.clientQueries.getById(clientId);
            if (!oldClient) {
                throw new NotFoundError('–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ (—è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∞—Å—å)
            if (clientData.name !== oldClient.name) {
                const existingClient = await this._findClientByName(clientData.name);
                if (existingClient && existingClient.id !== clientId) {
                    throw new ValidationError(`–ö–ª—ñ—î–Ω—Ç –∑ –Ω–∞–∑–≤–æ—é "${clientData.name}" –≤–∂–µ —ñ—Å–Ω—É—î`);
                }
            }

            const result = await this.clientQueries.update(clientId, clientData);
            
            if (result.changes === 0) {
                throw new NotFoundError('–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ');
            }

            console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: ${clientData.name} (ID: ${clientId})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logClientOperation('UPDATE_CLIENT', clientId, {
                operation_id: clientId,
                entity_type: 'client',
                entity_id: clientId,
                old_data: oldClient,
                new_data: clientData,
                description: `–û–Ω–æ–≤–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ "${clientData.name}"`,
                ...auditInfo
            });

            return result;
        } catch (error) {
            if (error instanceof NotFoundError || error instanceof ValidationError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: ${error.message}`);
        }
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ (soft delete)
     */
    async deactivateClient(clientId, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const client = await this.clientQueries.getById(clientId);
            if (!client) {
                throw new NotFoundError('–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const result = await this.clientQueries.deactivate(clientId);
            
            if (result.changes === 0) {
                throw new NotFoundError('–ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
            }

            console.log(`üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞: ${client.name} (ID: ${clientId})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logClientOperation('DEACTIVATE_CLIENT', clientId, {
                operation_id: clientId,
                entity_type: 'client',
                entity_id: clientId,
                old_data: client,
                description: `–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ "${client.name}"`,
                ...auditInfo
            });

            return result;
        } catch (error) {
            if (error instanceof NotFoundError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞: ${error.message}`);
        }
    }

    /**
     * –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     */
    async searchClients(searchParams = {}) {
        this._checkInitialization();
        
        try {
            const { name, phone, email } = searchParams;
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ
            const allClients = await this.clientQueries.getAll();
            let filteredClients = allClients;
            
            if (name) {
                filteredClients = filteredClients.filter(client => 
                    client.name && client.name.toLowerCase().includes(name.toLowerCase())
                );
            }
            
            if (phone) {
                filteredClients = filteredClients.filter(client => 
                    client.phone && client.phone.includes(phone)
                );
            }
            
            if (email) {
                filteredClients = filteredClients.filter(client => 
                    client.email && client.email.toLowerCase().includes(email.toLowerCase())
                );
            }
            
            console.log(`üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤: –∑–Ω–∞–π–¥–µ–Ω–æ ${filteredClients.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`);
            return filteredClients;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥: –∑–Ω–∞–π—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –Ω–∞–∑–≤–æ—é
     */
    async _findClientByName(name) {
        try {
            const clients = await this.clientQueries.getAll();
            return clients.find(client => client.name === name);
        } catch (error) {
            console.warn('–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –Ω–∞–∑–≤–æ—é:', error.message);
            return null;
        }
    }

    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥: –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏
     */
    async _logClientOperation(operationType, clientId, logData) {
        if (!this.OperationsLogController) {
            console.warn('‚ö†Ô∏è OperationsLogController –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è');
            return;
        }

        try {
            await this.OperationsLogController.logOperation({
                operation_type: operationType,
                ...logData
            });
        } catch (logError) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó ${operationType} –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ ${clientId}:`, logError);
            // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –∑–ª–∞–º–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
     */
    async getClientStats() {
        this._checkInitialization();
        
        try {
            const allClients = await this.clientQueries.getAll();
            const activeClients = allClients.filter(c => c.is_active);
            
            const stats = {
                total: allClients.length,
                active: activeClients.length,
                inactive: allClients.length - activeClients.length,
                clients_with_phone: activeClients.filter(c => c.phone && c.phone.trim()).length,
                clients_with_email: activeClients.filter(c => c.email && c.email.trim()).length,
                clients_with_address: activeClients.filter(c => c.address && c.address.trim()).length
            };
            
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${stats.active} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑ ${stats.total}`);
            return stats;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞—Å
module.exports = ClientService; 