const { DatabaseError, NotFoundError, ValidationError } = require('../middleware/errors/AppError');
const BatchReservationHelper = require('../utils/batchReservationHelper');

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
 * –ù–∞–¥–∞—î –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ –≤–∫–ª—é—á–∞—é—á–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π
 */
class OrderService {
    constructor() {
        this.orderQueries = null;
        this.productQueries = null;
        this.batchController = null;
        this.OperationsLogController = null;
        this.initialized = false;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏
     */
    initialize(dependencies) {
        this.orderQueries = dependencies.orderQueries;
        this.productQueries = dependencies.productQueries;
        this.batchQueries = dependencies.batchQueries; // –î–æ–¥–∞–Ω–æ –¥–ª—è batch integration
        this.batchController = dependencies.batchController;
        this.OperationsLogController = dependencies.OperationsLogController;
        this.initialized = true;
        console.log('‚úÖ OrderService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
    _checkInitialization() {
        if (!this.initialized || !this.orderQueries) {
            throw new DatabaseError('OrderService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
     */
    async getAllOrders(filters = {}) {
        this._checkInitialization();
        
        try {
            const orders = await this.orderQueries.getAll(filters);
            
            console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ ${orders.length} –∑–∞–º–æ–≤–ª–µ–Ω—å`);
            return orders;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
     */
    async getOrderById(orderId) {
        this._checkInitialization();
        
        try {
            const order = await this.orderQueries.getById(orderId);
            
            if (order) {
                console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${order.order_number} (ID: ${orderId})`);
            } else {
                console.log(`‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${orderId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
            
            return order;
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
     */
    async getOrderForEdit(orderId) {
        this._checkInitialization();
        
        try {
            const order = await this.orderQueries.getById(orderId);
            
            if (!order) {
                return { order: null, products: [] };
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —Å–µ–ª–µ–∫—Ç—É
            const products = this.productQueries ? await this.productQueries.getAll() : [];
            
            console.log(`üìã –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ${order.order_number}`);
            
            return {
                order: order,
                products: products
            };
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ${orderId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è–º –ø–∞—Ä—Ç—ñ–π
     */
    async createOrder(orderData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –í–∞–ª—ñ–¥—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º
            await this._validateOrderProducts(orderData.items);

            const result = await this.orderQueries.create(orderData);
            
            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${result.order_number} (ID: ${result.id})`);

            // –†–µ–∑–µ—Ä–≤—É—î–º–æ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            let batchReservations = null;
            let warnings = null;

            if (this.batchQueries && orderData.items && orderData.items.length > 0) {
                try {
                    const reservationResult = await BatchReservationHelper.reserveBatchesForOrder(
                        orderData.items,
                        this.batchQueries
                    );
                    
                    batchReservations = reservationResult.reservations;
                    warnings = reservationResult.warnings;
                    
                    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
                    if (batchReservations && batchReservations.length > 0) {
                        const applyResult = await BatchReservationHelper.applyReservations(
                            batchReservations,
                            this.batchQueries
                        );
                        
                        if (!applyResult.success) {
                            console.warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è:', applyResult.errors);
                            warnings = warnings || [];
                            warnings.push(...applyResult.errors.map(e => `–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: ${e.error || e.general || JSON.stringify(e)}`));
                        } else {
                            console.log(`‚úÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: ${applyResult.summary.total_applied} —à—Ç –≤ ${applyResult.summary.batches_updated} –ø–∞—Ä—Ç—ñ—è—Ö`);
                        }
                    }
                    
                    console.log(`üì¶ Batch reservations: ${reservationResult.summary.total_reserved}/${reservationResult.summary.total_requested} —à—Ç`);
                    
                } catch (batchError) {
                    console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π:', batchError.message);
                    warnings = [`–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π: ${batchError.message}`];
                }
            }

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é –∑ batch details
            const logDetails = {
                order_number: result.order_number,
                client_id: orderData.client_id,
                items_count: orderData.items?.length || 0,
                total_pieces: orderData.items?.reduce((sum, item) => sum + (item.pieces || item.quantity || 0), 0) || 0,
                batch_reservations: batchReservations ? BatchReservationHelper.formatReservationForLog({ success: true, reservations: batchReservations, warnings, summary: { total_reserved: batchReservations.reduce((sum, r) => sum + r.reserved_quantity, 0) } }) : null,
                warnings_count: warnings?.length || 0
            };
            
            await this._logOrderOperation('CREATE_ORDER', result.id, logDetails, auditInfo);

            return {
                id: result.id,
                order_number: result.order_number,
                batch_reservations: batchReservations,
                warnings: warnings
            };
        } catch (error) {
            if (error instanceof ValidationError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–µ—Ä–µ—Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è–º –ø–∞—Ä—Ç—ñ–π
     */
    async updateOrder(orderId, orderData, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const oldOrder = await this.orderQueries.getById(orderId);
            if (!oldOrder) {
                throw new NotFoundError('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –í–∞–ª—ñ–¥—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ —è–∫—â–æ –≤–æ–Ω–∏ –Ω–∞–¥–∞–Ω—ñ
            if (orderData.items) {
                await this._validateOrderProducts(orderData.items);
            }

            // –ó–≤—ñ–ª—å–Ω—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ä–µ–∑–µ—Ä–≤–∏ —è–∫—â–æ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –ø–æ–∑–∏—Ü—ñ—ó
            if (orderData.items && this.batchController) {
                try {
                    await this.batchController.unreserveBatchesForOrder({ params: { orderId } }, null);
                } catch (unreserveError) {
                    console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–∑–µ—Ä–≤—ñ–≤:', unreserveError.message);
                }
            }

            const result = await this.orderQueries.update(orderId, orderData);
            
            if (result.changes === 0) {
                throw new NotFoundError('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ');
            }

            console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${oldOrder.order_number} (ID: ${orderId})`);

            // –†–µ–∑–µ—Ä–≤—É—î–º–æ –Ω–æ–≤—ñ –ø–∞—Ä—Ç—ñ—ó —è–∫—â–æ –æ–Ω–æ–≤–ª—é–≤–∞–ª–∏—Å—å –ø–æ–∑–∏—Ü—ñ—ó
            let batchReservations = null;
            let warnings = null;

            if (orderData.items && this.batchController) {
                try {
                    const reservationResult = await this._reserveBatchesForNewOrder(orderId, orderData.items);
                    batchReservations = reservationResult.reservations;
                    warnings = reservationResult.warnings;
                } catch (batchError) {
                    console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π:', batchError.message);
                    warnings = [`–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π: ${batchError.message}`];
                }
            }

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logOrderOperation('UPDATE_ORDER', orderId, {
                operation_id: orderId,
                entity_type: 'order',
                entity_id: orderId,
                old_data: oldOrder,
                new_data: orderData,
                description: `–û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è "${oldOrder.order_number}"`,
                ...auditInfo
            });

            return {
                changes: result.changes,
                batch_reservations: batchReservations,
                warnings: warnings
            };
        } catch (error) {
            if (error instanceof NotFoundError || error instanceof ValidationError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async updateOrderStatus(orderId, status, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            const oldOrder = await this.orderQueries.getById(orderId);
            if (!oldOrder) {
                throw new NotFoundError('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const result = await this.orderQueries.updateStatus(orderId, status, auditInfo.user_name);
            
            if (result.changes === 0) {
                throw new NotFoundError('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${oldOrder.order_number}: ${oldOrder.status} ‚Üí ${status}`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logOrderOperation('UPDATE_ORDER_STATUS', orderId, {
                operation_id: orderId,
                entity_type: 'order',
                entity_id: orderId,
                old_data: { status: oldOrder.status },
                new_data: { status: status },
                description: `–ó–º—ñ–Ω–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è "${oldOrder.order_number}" –∑ "${oldOrder.status}" –Ω–∞ "${status}"`,
                ...auditInfo
            });

            return result;
        } catch (error) {
            if (error instanceof NotFoundError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: ${error.message}`);
        }
    }

    /**
     * –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å CANCELLED)
     */
    async cancelOrder(orderId, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω—ñ –ø–∞—Ä—Ç—ñ—ó
            if (this.batchController) {
                try {
                    await this.batchController.unreserveBatchesForOrder({ params: { orderId } }, null);
                } catch (unreserveError) {
                    console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ:', unreserveError.message);
                }
            }

            const result = await this.updateOrderStatus(orderId, 'CANCELLED', auditInfo);
            
            console.log(`üóëÔ∏è –°–∫–∞—Å–æ–≤–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ID: ${orderId}`);
            return result;
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}:`, error);
            throw error; // –ü–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –∑ updateOrderStatus
        }
    }

    /**
     * –ü–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
     */
    async deleteOrder(orderId, auditInfo = {}) {
        this._checkInitialization();
        
        try {
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
            const order = await this.orderQueries.getById(orderId);
            if (!order) {
                throw new NotFoundError('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ó–≤—ñ–ª—å–Ω—è—î–º–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω—ñ –ø–∞—Ä—Ç—ñ—ó
            if (this.batchController) {
                try {
                    await this.batchController.unreserveBatchesForOrder({ params: { orderId } }, null);
                    console.log(`üì¶ –ó–≤—ñ–ª—å–Ω–µ–Ω–æ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${order.order_number}`);
                } catch (unreserveError) {
                    console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ:', unreserveError.message);
                }
            }

            // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (order_items –≤–∏–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ ON DELETE CASCADE)
            const result = await this.orderQueries.delete(orderId);
            
            if (result.changes === 0) {
                throw new NotFoundError('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ');
            }

            console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${order.order_number} (ID: ${orderId})`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            await this._logOrderOperation('DELETE_ORDER', orderId, {
                operation_id: orderId,
                entity_type: 'order',
                entity_id: orderId,
                old_data: order,
                description: `–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è "${order.order_number}" (${order.items_count || 0} –ø–æ–∑–∏—Ü—ñ–π, ${order.total_quantity || 0} —à—Ç)`,
                ...auditInfo
            });

            return { 
                changes: result.changes,
                deleted_order: {
                    id: orderId,
                    order_number: order.order_number,
                    client_name: order.client_name
                }
            };
        } catch (error) {
            if (error instanceof NotFoundError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –ó–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async reserveBatchesForOrder(orderId, auditInfo = {}) {
        this._checkInitialization();
        
        if (!this.batchController) {
            throw new ValidationError('–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ø–∞—Ä—Ç—ñ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        }

        try {
            const order = await this.orderQueries.getById(orderId);
            if (!order || !order.items) {
                throw new NotFoundError('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –π–æ–≥–æ –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const reservationResult = await this._reserveBatchesForNewOrder(orderId, order.items);
            
            console.log(`üì¶ –ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${order.order_number}`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logOrderOperation('RESERVE_BATCHES', orderId, {
                operation_id: orderId,
                entity_type: 'order',
                entity_id: orderId,
                description: `–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è "${order.order_number}"`,
                ...auditInfo
            });

            return reservationResult;
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π: ${error.message}`);
        }
    }

    /**
     * –ó–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async unreserveBatchesForOrder(orderId, auditInfo = {}) {
        this._checkInitialization();
        
        if (!this.batchController) {
            throw new ValidationError('–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ø–∞—Ä—Ç—ñ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
        }

        try {
            const order = await this.orderQueries.getById(orderId);
            if (!order) {
                throw new NotFoundError('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            const result = await this.batchController.unreserveBatchesForOrder({ params: { orderId } }, null);
            
            console.log(`üì¶ –ó–≤—ñ–ª—å–Ω–µ–Ω–æ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${order.order_number}`);

            // –õ–æ–≥—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            await this._logOrderOperation('UNRESERVE_BATCHES', orderId, {
                operation_id: orderId,
                entity_type: 'order',
                entity_id: orderId,
                description: `–ó–≤—ñ–ª—å–Ω–µ–Ω–æ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è "${order.order_number}"`,
                ...auditInfo
            });

            return { freed_count: result?.freed_count || 0 };
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}:`, error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
     */
    async getOrderStats(period = 'month') {
        this._checkInitialization();
        
        try {
            const allOrders = await this.orderQueries.getAll();
            
            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –ø–µ—Ä—ñ–æ–¥–æ–º
            const now = new Date();
            let filterDate = new Date();
            
            switch (period) {
                case 'day':
                    filterDate.setDate(now.getDate() - 1);
                    break;
                case 'week':
                    filterDate.setDate(now.getDate() - 7);
                    break;
                case 'month':
                    filterDate.setMonth(now.getMonth() - 1);
                    break;
                case 'year':
                    filterDate.setFullYear(now.getFullYear() - 1);
                    break;
                default:
                    filterDate.setMonth(now.getMonth() - 1);
            }

            const periodOrders = allOrders.filter(order => {
                const orderDate = new Date(order.order_date);
                return orderDate >= filterDate;
            });

            const stats = {
                total_orders: allOrders.length,
                period_orders: periodOrders.length,
                orders_by_status: {},
                total_items: allOrders.reduce((sum, o) => sum + (o.items_count || 0), 0),
                total_quantity: allOrders.reduce((sum, o) => sum + (o.total_quantity || 0), 0),
                period_items: periodOrders.reduce((sum, o) => sum + (o.items_count || 0), 0),
                period_quantity: periodOrders.reduce((sum, o) => sum + (o.total_quantity || 0), 0),
                avg_items_per_order: allOrders.length > 0 ? 
                    (allOrders.reduce((sum, o) => sum + (o.items_count || 0), 0) / allOrders.length).toFixed(1) : 0,
                avg_quantity_per_order: allOrders.length > 0 ? 
                    (allOrders.reduce((sum, o) => sum + (o.total_quantity || 0), 0) / allOrders.length).toFixed(1) : 0
            };

            // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
            const statuses = ['NEW', 'CONFIRMED', 'IN_PRODUCTION', 'READY', 'SHIPPED', 'COMPLETED', 'CANCELLED'];
            statuses.forEach(status => {
                stats.orders_by_status[status] = allOrders.filter(o => o.status === status).length;
            });
            
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ ${period}: ${stats.period_orders} –∑–∞–º–æ–≤–ª–µ–Ω—å`);
            return stats;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å:', error);
            throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        }
    }

    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥: –≤–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–æ–≤–∞—Ä—ñ–≤ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
     */
    async _validateOrderProducts(items) {
        if (!this.productQueries) {
            console.warn('‚ö†Ô∏è productQueries –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤');
            return;
        }

        try {
            for (const item of items) {
                const product = await this.productQueries.getById(item.product_id);
                if (!product) {
                    throw new ValidationError(`–¢–æ–≤–∞—Ä –∑ ID ${item.product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
                }
                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –ø—Ä–∏–±—Ä–∞–Ω–∞ - –≤ —Ç–∞–±–ª–∏—Ü—ñ products –Ω–µ–º–∞—î –ø–æ–ª—è is_active
            }
        } catch (error) {
            if (error instanceof ValidationError) {
                throw error;
            }
            console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤:', error.message);
        }
    }

    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥: —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async _reserveBatchesForNewOrder(orderId, items) {
        const reservations = [];
        const warnings = [];

        for (const item of items) {
            try {
                const batchResult = await this.batchController.reserveBatchesForOrderItem({
                    params: { orderId },
                    body: {
                        product_id: item.product_id,
                        quantity: item.quantity
                    }
                }, null);

                if (batchResult && batchResult.reservations) {
                    reservations.push(...batchResult.reservations);
                }

                if (batchResult && batchResult.shortage) {
                    warnings.push(`–ù–µ–¥–æ—Å—Ç–∞—á–∞ —Ç–æ–≤–∞—Ä—É ID ${item.product_id}: ${batchResult.shortage} —à—Ç`);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–æ–≤–∞—Ä—É ${item.product_id}:`, error.message);
                warnings.push(`–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ID ${item.product_id}: ${error.message}`);
            }
        }

        return { reservations, warnings: warnings.length > 0 ? warnings : null };
    }

    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥: –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
     */
    async _logOrderOperation(operationType, orderId, logData) {
        if (!this.OperationsLogController) {
            console.warn('‚ö†Ô∏è OperationsLogController –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è');
            return;
        }

        try {
            await this.OperationsLogController.logOperation({
                operation_type: operationType,
                ...logData
            });
        } catch (logError) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó ${operationType} –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}:`, logError);
            // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –∑–ª–∞–º–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton instance
module.exports = new OrderService(); 