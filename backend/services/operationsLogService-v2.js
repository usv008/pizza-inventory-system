// services/operationsLogService-v2.js - –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π

const DatabaseAdapter = require('../adapters/DatabaseAdapter');
const config = require('../config/database');

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π –≤ —Å–∏—Å—Ç–µ–º—ñ
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ SQLite —Ç–∞–∫ —ñ Supabase
 */
class OperationsLogService {
    constructor() {
        this.useSupabase = config.USE_SUPABASE;
        this.adapter = new DatabaseAdapter(this.useSupabase);
        
        console.log(`üìä OperationsLogService: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ${this.useSupabase ? 'Supabase' : 'SQLite'}`);
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ queries
        if (this.useSupabase) {
            this.queries = require('../queries/supabase/operationsLogQueries');
        } else {
            this.queries = require('../queries/sqlite/operationsLogQueries');
        }
    }

    // –¢–∏–ø–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    static OPERATION_TYPES = {
        // –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
        CREATE_ORDER: 'CREATE_ORDER',
        UPDATE_ORDER: 'UPDATE_ORDER',
        UPDATE_ORDER_STATUS: 'UPDATE_ORDER_STATUS',
        DELETE_ORDER: 'DELETE_ORDER',
        
        // –¢–æ–≤–∞—Ä–∏
        CREATE_PRODUCT: 'CREATE_PRODUCT',
        UPDATE_PRODUCT: 'UPDATE_PRODUCT',
        DELETE_PRODUCT: 'DELETE_PRODUCT',
        UPDATE_STOCK: 'UPDATE_STOCK',
        
        // –í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ
        PRODUCTION: 'PRODUCTION',
        
        // –°–ø–∏—Å–∞–Ω–Ω—è
        WRITEOFF: 'WRITEOFF',
        WRITEOFF_BATCH: 'WRITEOFF_BATCH',
        
        // –ü—Ä–∏—Ö–æ–¥
        ARRIVAL: 'ARRIVAL',
        
        // –†—É—Ö–∏ —Ç–æ–≤–∞—Ä—ñ–≤
        MOVEMENT_CREATE: 'MOVEMENT_CREATE',
        MOVEMENT_UPDATE: 'MOVEMENT_UPDATE',
        MOVEMENT_DELETE: 'MOVEMENT_DELETE',
        
        // –ö–ª—ñ—î–Ω—Ç–∏
        CREATE_CLIENT: 'CREATE_CLIENT',
        UPDATE_CLIENT: 'UPDATE_CLIENT',
        DELETE_CLIENT: 'DELETE_CLIENT',
        
        // –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è
        CREATE_PRODUCTION_PLAN: 'CREATE_PRODUCTION_PLAN',
        UPDATE_PRODUCTION_PLAN: 'UPDATE_PRODUCTION_PLAN',
        
        // –ü–∞—Ä—Ç—ñ—ó
        CREATE_BATCH: 'CREATE_BATCH',
        UPDATE_BATCH: 'UPDATE_BATCH',
        RESERVE_BATCH: 'RESERVE_BATCH'
    };

    /**
     * –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
     */
    async logOperation({
        operation_type,
        operation_id = null,
        entity_type,
        entity_id,
        old_data = null,
        new_data = null,
        description,
        user_name,
        ip_address = null,
        user_agent = null
    }) {
        try {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            if (!operation_type || !entity_type || !description || !user_name) {
                throw new Error('–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è: operation_type, entity_type, description, user_name');
            }

            const logId = await this.queries.logOperation({
                operation_type,
                operation_id,
                entity_type,
                entity_id,
                old_data,
                new_data,
                description,
                user_name,
                ip_address,
                user_agent
            });

            console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è ${operation_type} –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞ (ID: ${logId})`);
            return logId;

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤ logOperation:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–≥–∏ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
     */
    async getLogs(filters = {}) {
        try {
            const logs = await this.queries.getLogs(filters);
            
            return {
                success: true,
                logs: logs,
                count: logs.length,
                filters: filters
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü—ñ–π
     */
    async getOperationsStats(periodDays = 30) {
        try {
            const stats = await this.queries.getOperationsStats(periodDays);
            
            return {
                success: true,
                statistics: stats
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π —Å—É—Ç–Ω–æ—Å—Ç—ñ
     */
    async getEntityOperations(entity_type, entity_id, limit = 50) {
        try {
            if (!entity_type || !entity_id) {
                throw new Error('–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: entity_type, entity_id');
            }

            const operations = await this.queries.getEntityOperations(entity_type, entity_id, limit);
            
            return {
                success: true,
                operations: operations,
                entity_type: entity_type,
                entity_id: parseInt(entity_id),
                count: operations.length
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π —Å—É—Ç–Ω–æ—Å—Ç—ñ:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π —Å—É—Ç–Ω–æ—Å—Ç—ñ: ${error.message}`);
        }
    }

    // Helpers –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º
     */
    async logOrderOperation(operation_type, order, user_name, old_order = null, req = null) {
        const description = this.generateOrderDescription(operation_type, order, old_order);
        
        return this.logOperation({
            operation_type,
            operation_id: order.id,
            entity_type: 'order',
            entity_id: order.id,
            old_data: old_order,
            new_data: order,
            description,
            user_name,
            ip_address: req?.ip,
            user_agent: req?.get('User-Agent')
        });
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ —Ç–æ–≤–∞—Ä–æ–º
     */
    async logProductOperation(operation_type, product, user_name, old_product = null, req = null) {
        // –î–ª—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–Ω—è product –º–æ–∂–µ –±—É—Ç–∏ null, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ old_product
        const targetProduct = product || old_product;
        if (!targetProduct) {
            throw new Error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—É –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è');
        }
        
        const description = this.generateProductDescription(operation_type, targetProduct, old_product);
        
        return this.logOperation({
            operation_type,
            operation_id: targetProduct.id,
            entity_type: 'product',
            entity_id: targetProduct.id,
            old_data: old_product,
            new_data: product,
            description,
            user_name,
            ip_address: req?.ip,
            user_agent: req?.get('User-Agent')
        });
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–ª—ñ—î–Ω—Ç–æ–º
     */
    async logClientOperation(operation_type, client, user_name, old_client = null, req = null) {
        const targetClient = client || old_client;
        if (!targetClient) {
            throw new Error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è');
        }
        
        const description = this.generateClientDescription(operation_type, targetClient, old_client);
        
        return this.logOperation({
            operation_type,
            operation_id: targetClient.id,
            entity_type: 'client',
            entity_id: targetClient.id,
            old_data: old_client,
            new_data: client,
            description,
            user_name,
            ip_address: req?.ip,
            user_agent: req?.get('User-Agent')
        });
    }

    /**
     * –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –ø–∞—Ä—Ç—ñ—î—é
     */
    async logBatchOperation(operation_type, batch, user_name, old_batch = null, req = null) {
        const targetBatch = batch || old_batch;
        if (!targetBatch) {
            throw new Error('–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è');
        }
        
        const description = this.generateBatchDescription(operation_type, targetBatch, old_batch);
        
        return this.logOperation({
            operation_type,
            operation_id: targetBatch.id,
            entity_type: 'batch',
            entity_id: targetBatch.id,
            old_data: old_batch,
            new_data: batch,
            description,
            user_name,
            ip_address: req?.ip,
            user_agent: req?.get('User-Agent')
        });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏ –æ–ø–∏—Å—ñ–≤ –æ–ø–µ—Ä–∞—Ü—ñ–π

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø–∏—Å—ñ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
     */
    generateOrderDescription(operation_type, order, old_order = null) {
        switch (operation_type) {
            case OperationsLogService.OPERATION_TYPES.CREATE_ORDER:
                return `–°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${order.order_number} –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ "${order.client_name}" –Ω–∞ —Å—É–º—É ${order.total_quantity} —à—Ç`;
            
            case OperationsLogService.OPERATION_TYPES.UPDATE_ORDER:
                const changes = [];
                if (old_order && old_order.client_name !== order.client_name) {
                    changes.push(`–∫–ª—ñ—î–Ω—Ç: "${old_order.client_name}" ‚Üí "${order.client_name}"`);
                }
                if (old_order && old_order.delivery_date !== order.delivery_date) {
                    changes.push(`–¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${old_order.delivery_date || '–Ω–µ –≤–∫–∞–∑–∞–Ω–∞'} ‚Üí ${order.delivery_date || '–Ω–µ –≤–∫–∞–∑–∞–Ω–∞'}`);
                }
                return `–û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${order.order_number}: ${changes.join(', ') || '–∑–∞–≥–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏'}`;
            
            case OperationsLogService.OPERATION_TYPES.UPDATE_ORDER_STATUS:
                return `–ó–º—ñ–Ω–µ–Ω–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${order.order_number}: ${old_order?.status || '–Ω–µ–≤—ñ–¥–æ–º–∏–π'} ‚Üí ${order.status}`;
            
            case OperationsLogService.OPERATION_TYPES.DELETE_ORDER:
                return `–í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ${order.order_number}`;
            
            default:
                return `–û–ø–µ—Ä–∞—Ü—ñ—è ${operation_type} –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º ‚Ññ${order.order_number}`;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø–∏—Å—ñ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ —Ç–æ–≤–∞—Ä–∞–º–∏
     */
    generateProductDescription(operation_type, product, old_product = null) {
        switch (operation_type) {
            case OperationsLogService.OPERATION_TYPES.CREATE_PRODUCT:
                return `–°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–æ–≤–∞—Ä "${product.name}" (${product.code})`;
            
            case OperationsLogService.OPERATION_TYPES.UPDATE_PRODUCT:
                return `–û–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä "${product.name}" (${product.code})`;
            
            case OperationsLogService.OPERATION_TYPES.DELETE_PRODUCT:
                return `–í–∏–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä "${product.name}" (${product.code})`;
            
            case OperationsLogService.OPERATION_TYPES.UPDATE_STOCK:
                const diff = product.stock_pieces - (old_product?.stock_pieces || 0);
                const action = diff > 0 ? '–¥–æ–¥–∞–Ω–æ' : '–≤–∏–ª—É—á–µ–Ω–æ';
                return `–ó–∞–ª–∏—à–∫–∏ —Ç–æ–≤–∞—Ä—É "${product.name}": ${action} ${Math.abs(diff)} —à—Ç`;
            
            default:
                return `–û–ø–µ—Ä–∞—Ü—ñ—è ${operation_type} –∑ —Ç–æ–≤–∞—Ä–æ–º "${product.name}" (${product.code})`;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø–∏—Å—ñ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏
     */
    generateClientDescription(operation_type, client, old_client = null) {
        switch (operation_type) {
            case OperationsLogService.OPERATION_TYPES.CREATE_CLIENT:
                return `–°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ "${client.name}"`;
            
            case OperationsLogService.OPERATION_TYPES.UPDATE_CLIENT:
                return `–û–Ω–æ–≤–ª–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∫–ª—ñ—î–Ω—Ç–∞ "${client.name}"`;
            
            case OperationsLogService.OPERATION_TYPES.DELETE_CLIENT:
                return `–í–∏–¥–∞–ª–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ "${client.name}"`;
            
            default:
                return `–û–ø–µ—Ä–∞—Ü—ñ—è ${operation_type} –∑ –∫–ª—ñ—î–Ω—Ç–æ–º "${client.name}"`;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–ø–∏—Å—ñ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –ø–∞—Ä—Ç—ñ—è–º–∏
     */
    generateBatchDescription(operation_type, batch, old_batch = null) {
        switch (operation_type) {
            case OperationsLogService.OPERATION_TYPES.CREATE_BATCH:
                return `–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞—Ä—Ç—ñ—é —Ç–æ–≤–∞—Ä—É: ${batch.total_quantity} —à—Ç (–¥–∞—Ç–∞: ${batch.batch_date})`;
            
            case OperationsLogService.OPERATION_TYPES.UPDATE_BATCH:
                return `–û–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä—Ç—ñ—é —Ç–æ–≤–∞—Ä—É (ID: ${batch.id})`;
            
            case OperationsLogService.OPERATION_TYPES.RESERVE_BATCH:
                const reserved = batch.reserved_quantity - (old_batch?.reserved_quantity || 0);
                return `–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ ${reserved} —à—Ç –∑ –ø–∞—Ä—Ç—ñ—ó (ID: ${batch.id})`;
            
            default:
                return `–û–ø–µ—Ä–∞—Ü—ñ—è ${operation_type} –∑ –ø–∞—Ä—Ç—ñ—î—é (ID: ${batch.id})`;
        }
    }
}

module.exports = new OperationsLogService();