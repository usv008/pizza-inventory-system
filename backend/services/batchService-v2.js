// services/batchService-v2.js - –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–∞—Ä—Ç—ñ—è–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤

const DatabaseAdapter = require('../adapters/DatabaseAdapter');
const config = require('../config/database');

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–∞—Ä—Ç—ñ—è–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î —è–∫ SQLite —Ç–∞–∫ —ñ Supabase
 */
class BatchService {
    constructor() {
        this.useSupabase = config.USE_SUPABASE;
        this.adapter = new DatabaseAdapter(this.useSupabase);
        
        console.log(`üéØ BatchService: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ${this.useSupabase ? 'Supabase' : 'SQLite'}`);
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ queries
        if (this.useSupabase) {
            this.queries = require('../queries/supabase/batchQueries');
        } else {
            this.queries = require('../queries/sqlite/batchQueries');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É
     */
    async getBatchesByProduct(productId, includeExpired = false) {
        try {
            const batches = await this.queries.getBatchesByProduct(productId, includeExpired);
            
            return {
                success: true,
                batches: batches,
                count: batches.length,
                product_id: parseInt(productId),
                include_expired: includeExpired
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π —Ç–æ–≤–∞—Ä—É:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–∞—Ä—Ç—ñ—ó –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö
     */
    async getAllBatchesGrouped() {
        try {
            const groupedBatches = await this.queries.getAllBatchesGrouped();
            
            // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const totalProducts = groupedBatches.length;
            const totalBatches = groupedBatches.reduce((sum, product) => sum + (product.batches_count || 0), 0);
            const totalAvailable = groupedBatches.reduce((sum, product) => sum + (product.total_available || 0), 0);
            const lowStockProducts = groupedBatches.filter(product => product.stock_status === 'low').length;
            
            return {
                success: true,
                products: groupedBatches,
                stats: {
                    total_products: totalProducts,
                    total_batches: totalBatches,
                    total_available_pieces: totalAvailable,
                    low_stock_products: lowStockProducts
                }
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏—Ö –ø–∞—Ä—Ç—ñ–π:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏—Ö –ø–∞—Ä—Ç—ñ–π: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—ó —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è
     */
    async getExpiringBatches(days = 7) {
        try {
            const expiringBatches = await this.queries.getExpiringBatches(days);
            
            // –ì—Ä—É–ø—É—î–º–æ –ø–æ —Ä—ñ–≤–Ω—é —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ—Å—Ç—ñ
            const critical = expiringBatches.filter(batch => batch.urgency === 'critical');
            const high = expiringBatches.filter(batch => batch.urgency === 'high');
            const medium = expiringBatches.filter(batch => batch.urgency === 'medium');
            
            return {
                success: true,
                batches: expiringBatches,
                count: expiringBatches.length,
                days_filter: parseInt(days),
                urgency_breakdown: {
                    critical: critical.length,
                    high: high.length,
                    medium: medium.length
                },
                total_expiring_quantity: expiringBatches.reduce((sum, batch) => sum + (batch.available_quantity || 0), 0)
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è: ${error.message}`);
        }
    }

    /**
     * –ó–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async reserveBatches(allocations, context = {}) {
        try {
            if (!Array.isArray(allocations) || allocations.length === 0) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è');
            }

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è allocations
            for (const allocation of allocations) {
                if (!allocation.batch_id || !allocation.quantity || allocation.quantity <= 0) {
                    throw new Error('–ö–æ–∂–Ω–µ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º–∞—Ç–∏ batch_id —Ç–∞ quantity > 0');
                }
            }

            const results = await this.queries.reserveBatches(allocations);
            
            const totalReserved = results.reduce((sum, result) => sum + (result.quantity || 0), 0);
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
            if (context.user) {
                console.log(`üîí –ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ ${totalReserved} —à—Ç –≤ ${results.length} –ø–∞—Ä—Ç—ñ—è—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${context.user}`);
            }
            
            return {
                success: true,
                message: '–ü–∞—Ä—Ç—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ',
                reservations: results,
                total_reserved: totalReserved,
                batches_count: results.length
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π: ${error.message}`);
        }
    }

    /**
     * –ó–≤—ñ–ª—å–Ω–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤–∏ –ø–∞—Ä—Ç—ñ–π
     */
    async unreserveBatches(allocations, context = {}) {
        try {
            if (!Array.isArray(allocations)) {
                allocations = [];
            }

            if (allocations.length === 0) {
                return {
                    success: true,
                    message: '–ù–µ–º–∞—î —Ä–µ–∑–µ—Ä–≤—ñ–≤ –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è',
                    released: [],
                    total_released: 0
                };
            }

            const results = await this.queries.unreserveBatches(allocations);
            
            const totalReleased = results.reduce((sum, result) => sum + (result.quantity || 0), 0);
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
            if (context.user) {
                console.log(`üîì –ó–≤—ñ–ª—å–Ω–µ–Ω–æ ${totalReleased} —à—Ç –∑ ${results.length} –ø–∞—Ä—Ç—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${context.user}`);
            }
            
            return {
                success: true,
                message: '–†–µ–∑–µ—Ä–≤–∏ —É—Å–ø—ñ—à–Ω–æ –∑–≤—ñ–ª—å–Ω–µ–Ω–æ',
                released: results,
                total_released: totalReleased,
                batches_count: results.length
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤: ${error.message}`);
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –¥–ª—è —Ç–æ–≤–∞—Ä—É (FIFO)
     */
    async reserveBatchesForProduct(productId, quantityNeeded, context = {}) {
        try {
            if (!productId || !quantityNeeded || quantityNeeded <= 0) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è');
            }

            const availability = await this.queries.getAvailableBatchesForProduct(productId, quantityNeeded);
            
            if (availability.allocated_batches.length > 0) {
                // –†–µ–∑–µ—Ä–≤—É—î–º–æ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–∞—Ä—Ç—ñ—ó
                const allocations = availability.allocated_batches.map(batch => ({
                    batch_id: batch.batch_id,
                    quantity: batch.quantity
                }));
                
                await this.queries.reserveBatches(allocations);
                
                console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ ${availability.quantity_reserved} —à—Ç —Ç–æ–≤–∞—Ä—É ${productId} –≤ ${allocations.length} –ø–∞—Ä—Ç—ñ—è—Ö`);
            }
            
            return {
                success: true,
                product_id: parseInt(productId),
                product_name: availability.product_name,
                quantity_requested: quantityNeeded,
                quantity_reserved: availability.quantity_reserved,
                shortage: availability.shortage,
                allocated_batches: availability.allocated_batches,
                has_shortage: availability.shortage > 0
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –¥–ª—è –ø–æ–∑–∏—Ü—ñ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async reserveBatchesForOrderItems(orderId, items, context = {}) {
        try {
            if (!orderId || !Array.isArray(items) || items.length === 0) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
            }

            const reservationResults = [];
            let totalReserved = 0;
            let hasShortages = false;

            for (const item of items) {
                const { product_id, quantity } = item;
                
                if (!product_id || !quantity || quantity <= 0) {
                    console.warn(`–ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É –ø–æ–∑–∏—Ü—ñ—é: product_id=${product_id}, quantity=${quantity}`);
                    continue;
                }

                try {
                    const reservationResult = await this.reserveBatchesForProduct(product_id, quantity, context);
                    reservationResults.push({
                        product_id: product_id,
                        quantity_requested: quantity,
                        ...reservationResult
                    });
                    
                    totalReserved += reservationResult.quantity_reserved || 0;
                    if (reservationResult.shortage > 0) {
                        hasShortages = true;
                    }
                } catch (error) {
                    console.error(`–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–æ–≤–∞—Ä—É ${product_id}:`, error);
                    reservationResults.push({
                        product_id: product_id,
                        quantity_requested: quantity,
                        quantity_reserved: 0,
                        shortage: quantity,
                        error: error.message,
                        allocated_batches: []
                    });
                    hasShortages = true;
                }
            }

            return {
                success: true,
                message: '–†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                order_id: parseInt(orderId),
                total_reserved: totalReserved,
                has_shortages: hasShortages,
                items_processed: items.length,
                reservations: reservationResults
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –ó–≤—ñ–ª—å–Ω–∏—Ç–∏ –≤—Å—ñ —Ä–µ–∑–µ—Ä–≤–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
     */
    async unreserveBatchesForOrder(orderId, orderItems, context = {}) {
        try {
            if (!orderId) {
                throw new Error('–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
            }

            if (!Array.isArray(orderItems) || orderItems.length === 0) {
                return {
                    success: true,
                    message: '–ù–µ–º–∞—î –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤',
                    order_id: parseInt(orderId),
                    released_quantity: 0
                };
            }

            let totalReleased = 0;
            const releaseResults = [];

            for (const item of orderItems) {
                let allocatedBatches = [];
                
                // –ü–∞—Ä—Å–∏–º–æ allocated_batches
                if (item.allocated_batches) {
                    try {
                        if (typeof item.allocated_batches === 'string') {
                            allocatedBatches = JSON.parse(item.allocated_batches);
                        } else {
                            allocatedBatches = item.allocated_batches;
                        }
                    } catch (parseError) {
                        console.warn(`–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É allocated_batches –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó ${item.id}:`, parseError);
                        continue;
                    }
                }

                if (Array.isArray(allocatedBatches) && allocatedBatches.length > 0) {
                    // –ü—ñ–¥–≥–æ—Ç–æ–≤—É—î–º–æ allocations –¥–ª—è –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è
                    const allocations = allocatedBatches.map(batchAllocation => ({
                        batch_id: batchAllocation.batch_id,
                        quantity: batchAllocation.quantity || batchAllocation.allocated_quantity || 0
                    })).filter(alloc => alloc.batch_id && alloc.quantity > 0);

                    if (allocations.length > 0) {
                        try {
                            const unreserveResult = await this.unreserveBatches(allocations, context);
                            totalReleased += unreserveResult.total_released;
                            releaseResults.push({
                                item_id: item.id,
                                product_id: item.product_id,
                                released: unreserveResult.total_released,
                                batches_count: unreserveResult.batches_count
                            });
                        } catch (error) {
                            console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤ –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó ${item.id}:`, error);
                        }
                    }
                }
            }

            console.log(`üéâ –ó–≤—ñ–ª—å–Ω–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤—ñ–≤: ${totalReleased} —à—Ç –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}`);

            return {
                success: true,
                message: '–†–µ–∑–µ—Ä–≤–∏ —É—Å–ø—ñ—à–Ω–æ –∑–≤—ñ–ª—å–Ω–µ–Ω–æ',
                order_id: parseInt(orderId),
                released_quantity: totalReleased,
                items_processed: orderItems.length,
                release_details: releaseResults
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${error.message}`);
        }
    }

    /**
     * –°–ø–∏—Å–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—é
     */
    async writeoffBatch(batchId, quantity, reason, responsible, notes = '', context = {}) {
        try {
            if (!batchId || !quantity || !reason || !responsible) {
                throw new Error('–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: batchId, quantity, reason, responsible');
            }

            if (quantity <= 0) {
                throw new Error('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0');
            }

            const result = await this.queries.writeoffBatch(batchId, quantity, reason, responsible, notes);
            
            console.log(`üìù –°–ø–∏—Å–∞–Ω–æ –ø–∞—Ä—Ç—ñ—é ${batchId}: ${quantity} —à—Ç (${reason}) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${responsible}`);
            
            // –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –∑ OperationsLog)
            if (context.log_operation) {
                // TODO: –Ü–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –∑ OperationsLogService –∫–æ–ª–∏ –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ
            }

            return {
                success: true,
                ...result,
                batch_id: parseInt(batchId),
                quantity_written_off: quantity,
                reason: reason,
                responsible: responsible
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–ø–∏—Å–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–ø–∏—Å–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–∞—Ä—Ç—ñ–π
     */
    async getProductAvailability(productId) {
        try {
            if (!productId) {
                throw new Error('–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID —Ç–æ–≤–∞—Ä—É');
            }

            const availability = await this.queries.getProductAvailability(productId);
            
            return {
                success: true,
                ...availability
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—É: ${error.message}`);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞—Ä—Ç—ñ—é
     */
    async getBatchDetails(batchId) {
        try {
            if (!batchId) {
                throw new Error('–ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –ø–∞—Ä—Ç—ñ—ó');
            }

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ getBatchesByProduct –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –ø–æ ID
            // –¶–µ –Ω–µ –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ, –∞–ª–µ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–µ –¥–ª—è –æ–±–æ—Ö –ë–î
            // TODO: –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–∏–π –º–µ—Ç–æ–¥ getBatchById –≤ queries
            
            const productId = await this.getProductIdByBatchId(batchId);
            const batches = await this.getBatchesByProduct(productId, true);
            
            const batch = batches.batches.find(b => b.id === parseInt(batchId));
            
            if (!batch) {
                throw new Error('–ü–∞—Ä—Ç—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }

            return {
                success: true,
                batch: batch
            };
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ä—Ç—ñ—ó:', error);
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ä—Ç—ñ—ó: ${error.message}`);
        }
    }

    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è product_id –ø–æ batch_id
     * (–±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ queries —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
     */
    async getProductIdByBatchId(batchId) {
        // –ü—Ä–æ—Å—Ç–∏–π workaround - –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏
        if (this.useSupabase) {
            const { data, error } = await this.adapter.client
                .from('production_batches')
                .select('product_id')
                .eq('id', batchId)
                .single();
            
            if (error || !data) {
                throw new Error('–ü–∞—Ä—Ç—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            }
            
            return data.product_id;
        } else {
            return new Promise((resolve, reject) => {
                this.adapter.client.get(
                    'SELECT product_id FROM production_batches WHERE id = ?', 
                    [batchId], 
                    (err, row) => {
                        if (err || !row) {
                            reject(new Error('–ü–∞—Ä—Ç—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
                        } else {
                            resolve(row.product_id);
                        }
                    }
                );
            });
        }
    }
}

module.exports = new BatchService();