/**
 * Auth Service v2 - –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Supabase —Ç–∞ SQLite
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î userService-v2 –¥–ª—è —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ –ë–î
 */

const bcrypt = require('bcrypt');
const { NotFoundError, DatabaseError, ValidationError } = require('../middleware/errors/AppError');
const userServiceV2 = require('./userService-v2');

// –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
let sessionQueries = null;
let auditQueries = null;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
 */
function initialize(dependencies) {
    sessionQueries = dependencies.sessionQueries;
    auditQueries = dependencies.auditQueries;
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ userService-v2
    userServiceV2.initialize(dependencies);
}

const saltRounds = 10;

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è dropdown
 */
async function getActiveUsers() {
    try {
        const users = await userServiceV2.getAllUsers({ includeInactive: false });
        console.log(`üë• –û—Ç—Ä–∏–º–∞–Ω–æ ${users.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É`);
        
        return users.map(user => ({
            id: user.id,
            username: user.username,
            role: user.role,
            active: user.active,
            full_name: user.username // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ username —è–∫ –ø–æ–≤–Ω–µ —ñ–º'—è
        }));
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
        throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${error.message}`);
    }
}

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è dropdown (—Å—Ç–∞—Ä–∏–π –º–µ—Ç–æ–¥)
 */
async function getAllUsers() {
    return await getActiveUsers();
}

/**
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
async function login(username, password, sessionInfo = {}) {
    try {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username (–≤–∫–ª—é—á–∞—é—á–∏ –ø–∞—Ä–æ–ª—å)
        const user = await userServiceV2.getUserByUsername(username, true);
        
        if (!user) {
            await _logSecurityEvent('LOGIN_FAILED', null, {
                username,
                reason: 'User not found',
                ...sessionInfo
            });
            throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        const useSupabase = process.env.USE_SUPABASE === 'true';
        const activeValue = useSupabase ? true : 1;
        const firstLoginValue = useSupabase ? true : 1;

        if (user.active !== activeValue) {
            await _logSecurityEvent('LOGIN_FAILED', user.id, {
                username,
                reason: 'User inactive',
                ...sessionInfo
            });
            throw new ValidationError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
        if (user.password_hash) {
            const isPasswordValid = await bcrypt.compare(password, user.password_hash);
            if (!isPasswordValid) {
                await _logSecurityEvent('LOGIN_FAILED', user.id, {
                    username,
                    reason: 'Invalid password',
                    ...sessionInfo
                });
                throw new ValidationError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å');
            }
        } else {
            // –î–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É, –∫–æ–ª–∏ –Ω–µ–º–∞—î –ø–∞—Ä–æ–ª—è
            if (user.first_login !== firstLoginValue) {
                await _logSecurityEvent('LOGIN_FAILED', user.id, {
                    username,
                    reason: 'No password set',
                    ...sessionInfo
                });
                throw new ValidationError('–ü–∞—Ä–æ–ª—å –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π');
            }
        }

        // –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
        await _logSecurityEvent('LOGIN_SUCCESS', user.id, {
            username,
            ...sessionInfo
        });

        await _logUserAudit(user.id, 'LOGIN', {
            username,
            first_login: user.first_login,
            ...sessionInfo
        });

        console.log(`üîê –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${username} (ID: ${user.id})`);

        return {
            id: user.id,
            username: user.username,
            role: user.role,
            permissions: typeof user.permissions === 'string' ? JSON.parse(user.permissions || '{}') : (user.permissions || {}),
            first_login: user.first_login,
            email: user.email,
            phone: user.phone
        };
    } catch (error) {
        if (error instanceof NotFoundError || error instanceof ValidationError) {
            throw error;
        }
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:', error);
        throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: ${error.message}`);
    }
}

/**
 * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤—Ö–æ–¥—ñ
 */
async function setFirstTimePassword(userId, password, sessionInfo = {}) {
    try {
        const user = await userServiceV2.getUserByUsername(null, true); // –û—Ç—Ä–∏–º—É—î–º–æ —á–µ—Ä–µ–∑ getUserById
        const fullUser = await getUserByIdWithPassword(userId);
        if (!fullUser) {
            throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        const useSupabase = process.env.USE_SUPABASE === 'true';
        const firstLoginValue = useSupabase ? true : 1;

        if (fullUser.first_login !== firstLoginValue) {
            throw new ValidationError('–ü–∞—Ä–æ–ª—å –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ userService-v2
        await userServiceV2.changeUserPassword(userId, password, userId);

        await _logUserAudit(userId, 'SET_PASSWORD', {
            username: fullUser.username,
            ...sessionInfo
        });

        console.log(`üîê –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${fullUser.username} (ID: ${userId})`);

        return true;
    } catch (error) {
        if (error instanceof NotFoundError || error instanceof ValidationError) {
            throw error;
        }
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è:', error);
        throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è: ${error.message}`);
    }
}

/**
 * –ó–º—ñ–Ω–∞ –≤–ª–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
 */
async function changeOwnPassword(userId, currentPassword, newPassword, sessionInfo = {}) {
    try {
        const user = await getUserByIdWithPassword(userId);
        if (!user) {
            throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å
        const isCurrentPasswordValid = await bcrypt.compare(currentPassword, user.password_hash);
        if (!isCurrentPasswordValid) {
            throw new ValidationError('–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è
        const isSamePassword = await bcrypt.compare(newPassword, user.password_hash);
        if (isSamePassword) {
            throw new ValidationError('–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ');
        }

        // –ó–º—ñ–Ω—é—î–º–æ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ userService-v2
        await userServiceV2.changeUserPassword(userId, newPassword, userId);

        await _logUserAudit(userId, 'PASSWORD_CHANGED', {
            username: user.username,
            ...sessionInfo
        });

        await _logSecurityEvent('PASSWORD_CHANGED', userId, {
            username: user.username,
            ...sessionInfo
        });

        console.log(`üîê –ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º: ${user.username} (ID: ${userId})`);

        return true;
    } catch (error) {
        if (error instanceof NotFoundError || error instanceof ValidationError) {
            throw error;
        }
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:', error);
        throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: ${error.message}`);
    }
}

/**
 * –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
async function changePasswordByAdmin(userId, newPassword, adminId, sessionInfo = {}) {
    try {
        const user = await userServiceV2.getUserById(userId);
        if (!user) {
            throw new NotFoundError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        const admin = await userServiceV2.getUserById(adminId);
        if (!admin) {
            throw new NotFoundError('–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminPermissions = admin.permissions || {};
        if (!adminPermissions.admin?.all_rights) {
            throw new ValidationError('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è');
        }

        // –ó–º—ñ–Ω—é—î–º–æ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ userService-v2
        await userServiceV2.changeUserPassword(userId, newPassword, adminId);

        await _logUserAudit(userId, 'PASSWORD_CHANGED_BY_ADMIN', {
            username: user.username,
            admin_id: adminId,
            admin_username: admin.username,
            ...sessionInfo
        });

        console.log(`üîê –ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${admin.username} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username}`);

        return true;
    } catch (error) {
        if (error instanceof NotFoundError || error instanceof ValidationError) {
            throw error;
        }
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:', error);
        throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è: ${error.message}`);
    }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ–π—Å–Ω–æ—Å—Ç—ñ —Å–µ—Å—ñ—ó
 */
async function validateSession(sessionId) {
    try {
        if (!sessionQueries) {
            return null;
        }

        const session = await sessionQueries.getById(sessionId);
        
        if (!session) {
            return null;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Å—ñ—è –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å
        if (new Date() > new Date(session.expires_at)) {
            await sessionQueries.deactivate(sessionId);
            return null;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–∏–π
        const user = await userServiceV2.getUserById(session.user_id);
        if (!user) {
            await sessionQueries.deactivate(sessionId);
            return null;
        }

        const useSupabase = process.env.USE_SUPABASE === 'true';
        const activeValue = useSupabase ? true : 1;
        
        if (user.active !== activeValue) {
            await sessionQueries.deactivate(sessionId);
            return null;
        }

        return {
            id: user.id,
            username: user.username,
            role: user.role,
            permissions: user.permissions || {},
            session_id: sessionId
        };
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó:', error);
        return null;
    }
}

/**
 * –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó (logout)
 */
async function logout(sessionId, userId, sessionInfo = {}) {
    try {
        if (sessionId && sessionQueries) {
            await sessionQueries.deactivate(sessionId);
        }

        if (userId) {
            const user = await userServiceV2.getUserById(userId);
            if (user) {
                await _logUserAudit(userId, 'LOGOUT', {
                    username: user.username,
                    session_id: sessionId,
                    ...sessionInfo
                });

                await _logSecurityEvent('LOGOUT', userId, {
                    username: user.username,
                    session_id: sessionId,
                    ...sessionInfo
                });

                console.log(`üîê –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username} (ID: ${userId})`);
            }
        }

        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É:', error);
        throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ö–æ–¥—É: ${error.message}`);
    }
}

/**
 * –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π
 */
async function cleanupExpiredSessions() {
    try {
        if (!sessionQueries) {
            return 0;
        }

        const result = await sessionQueries.cleanupExpired();
        console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.changes} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π`);
        return result.changes;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π:', error);
        throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π: ${error.message}`);
    }
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –∞—É–¥–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
async function _logUserAudit(userId, action, details = {}) {
    try {
        if (auditQueries) {
            await auditQueries.logUserAction(userId, action, details);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∞—É–¥–∏—Ç—É:', error);
        // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
    }
}

/**
 * –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –±–µ–∑–ø–µ–∫–∏
 */
async function _logSecurityEvent(eventType, userId, details = {}) {
    try {
        if (auditQueries) {
            await auditQueries.logSecurityEvent(eventType, userId, details);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –±–µ–∑–ø–µ–∫–∏:', error);
        // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é
    }
}

/**
 * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–∞—Ä–æ–ª–µ–º
 */
async function getUserByIdWithPassword(userId) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ userService-v2 –∑ –≤–∫–ª—é—á–µ–Ω–∏–º –ø–∞—Ä–æ–ª–µ–º
    const { createDatabaseAdapter } = require('../config/database');
    const adapter = createDatabaseAdapter();
    
    try {
        const users = await adapter
            .table('users')
            .select('*', { where: { id: userId }, limit: 1 });
        
        return users[0] || null;
    } catch (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–∞—Ä–æ–ª–µ–º ${userId}:`, error);
        throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    } finally {
        adapter.close();
    }
}

module.exports = {
    initialize,
    getActiveUsers,
    getAllUsers,
    login,
    setFirstTimePassword,
    changeOwnPassword,
    changePasswordByAdmin,
    validateSession,
    logout,
    cleanupExpiredSessions
};