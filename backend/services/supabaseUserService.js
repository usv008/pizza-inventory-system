require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const bcrypt = require('bcrypt');
const { DatabaseError, NotFoundError, ValidationError } = require('../middleware/errors/AppError');

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —á–µ—Ä–µ–∑ Supabase
 * –†–µ–∞–ª—ñ–∑—É—î CRUD –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–∏—Å—Ç–µ–º–∏
 */
class SupabaseUserService {
    constructor() {
        this.supabase = null;
        this.initialized = false;
        
        // –î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ
        this.availableRoles = [
            '–î–ò–†–ï–ö–¢–û–†',
            '–ó–ê–í–Ü–î–£–Æ–ß–ò–ô_–í–ò–†–û–ë–ù–ò–¶–¢–í–û–ú',
            '–ë–£–•–ì–ê–õ–¢–ï–†',
            '–ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö',
            '–ö–û–ú–Ü–†–ù–ò–ö',
            '–ú–ï–ù–ï–î–ñ–ï–†_–ó_–ü–†–û–î–ê–ñ–Ü–í'
        ];
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
     */
    initialize() {
        if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
            throw new Error('SUPABASE_URL —ñ SUPABASE_SERVICE_ROLE_KEY –º–∞—é—Ç—å –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ');
        }

        this.supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
        );
        
        this.initialized = true;
        console.log('‚úÖ SupabaseUserService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—É
     */
    checkInitialization() {
        if (!this.initialized || !this.supabase) {
            throw new DatabaseError('SupabaseUserService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
     * @param {Object} options - –æ–ø—Ü—ñ—ó —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
     * @returns {Array} –º–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
     */
    async getAllUsers(options = {}) {
        console.log('üîç [DEBUG] SupabaseUserService.getAllUsers called with options:', options);
        this.checkInitialization();
        
        try {
            const { includeInactive = false } = options;
            
            let query = this.supabase
                .from('users')
                .select('*');
            
            // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (!includeInactive) {
                query = query.eq('is_active', true);
            }
            
            const { data: users, error } = await query;
            console.log('üîç [DEBUG] Supabase query result:', { users: users?.length, error });
            
            if (error) {
                console.error('‚ùå Supabase –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
                throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ${error.message}`);
            }
            
            // –ê–¥–∞–ø—Ç—É—î–º–æ –¥–æ —Ñ–æ—Ä–º–∞—Ç—É SQLite –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            const adaptedUsers = users.map(user => this.adaptUserToSQLiteFormat(user));
            console.log('üîç [DEBUG] Adapted users count:', adaptedUsers.length);
            return adaptedUsers;
        } catch (error) {
            if (error instanceof DatabaseError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
            throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID
     * @param {number} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @returns {Object} –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
    async getUserById(userId) {
        this.checkInitialization();
        
        try {
            const { data: user, error } = await this.supabase
                .from('users')
                .select('*')
                .eq('id', userId)
                .single();
            
            if (error || !user) {
                throw new NotFoundError(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${userId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
            
            return this.sanitizeUser(this.adaptUserToSQLiteFormat(user));
        } catch (error) {
            if (error instanceof NotFoundError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}:`, error);
            throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} userData - –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {number} createdBy - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î
     * @returns {Object} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
     */
    async createUser(userData, createdBy) {
        this.checkInitialization();
        
        try {
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
            this.validateUserData(userData);
            
            const { username, last_name, email, phone, role, permissions, password } = userData;
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
            const { data: existingUser } = await this.supabase
                .from('users')
                .select('id')
                .eq('username', username)
                .single();
                
            if (existingUser) {
                throw new ValidationError(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ username ${username} –≤–∂–µ —ñ—Å–Ω—É—î`);
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ email —è–∫—â–æ –Ω–∞–¥–∞–Ω–æ
            if (email) {
                const { data: existingEmail } = await this.supabase
                    .from('users')
                    .select('id')
                    .eq('email', email)
                    .single();
                    
                if (existingEmail) {
                    throw new ValidationError(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ email ${email} –≤–∂–µ —ñ—Å–Ω—É—î`);
                }
            }
            
            // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
            let passwordHash = null;
            if (password) {
                passwordHash = await bcrypt.hash(password, 10);
            }
            
            // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            const userCreateData = {
                username,
                last_name: last_name || null,
                email: email || null,
                phone: phone || null,
                password_hash: passwordHash,
                role,
                permissions: permissions || {},
                first_login: passwordHash ? false : true,
                is_active: true,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };
            
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const { data: newUser, error } = await this.supabase
                .from('users')
                .insert([userCreateData])
                .select()
                .single();
                
            if (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
                throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${error.message}`);
            }
            
            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${username} (ID: ${newUser.id})`);
            return this.sanitizeUser(this.adaptUserToSQLiteFormat(newUser));
        } catch (error) {
            if (error instanceof ValidationError || error instanceof NotFoundError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
            throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }
    }

    /**
     * –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {number} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Object} updateData - –¥–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     * @param {number} updatedBy - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–∏–π –æ–Ω–æ–≤–ª—é—î
     * @returns {Object} –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
     */
    async updateUser(userId, updateData, updatedBy) {
        this.checkInitialization();
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const { data: existingUser, error: fetchError } = await this.supabase
                .from('users')
                .select('*')
                .eq('id', userId)
                .single();
                
            if (fetchError || !existingUser) {
                throw new NotFoundError(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${userId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
            
            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            this.validateUpdateData(updateData);
            
            const updateFields = {};
            
            // –û–±—Ä–æ–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–æ–ª—ñ–≤
            if (updateData.username !== undefined) {
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ username
                if (updateData.username !== existingUser.username) {
                    const { data: existingUserByUsername } = await this.supabase
                        .from('users')
                        .select('id')
                        .eq('username', updateData.username)
                        .single();
                        
                    if (existingUserByUsername && existingUserByUsername.id !== userId) {
                        throw new ValidationError(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ username ${updateData.username} –≤–∂–µ —ñ—Å–Ω—É—î`);
                    }
                }
                updateFields.username = updateData.username;
            }
            
            if (updateData.last_name !== undefined) {
                updateFields.last_name = updateData.last_name || null;
            }
            
            if (updateData.email !== undefined) {
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ email
                if (updateData.email && updateData.email !== existingUser.email) {
                    const { data: existingUserByEmail } = await this.supabase
                        .from('users')
                        .select('id')
                        .eq('email', updateData.email)
                        .single();
                        
                    if (existingUserByEmail && existingUserByEmail.id !== userId) {
                        throw new ValidationError(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ email ${updateData.email} –≤–∂–µ —ñ—Å–Ω—É—î`);
                    }
                }
                updateFields.email = updateData.email || null;
            }
            
            if (updateData.phone !== undefined) {
                updateFields.phone = updateData.phone || null;
            }
            
            if (updateData.role !== undefined) {
                updateFields.role = updateData.role;
            }
            
            if (updateData.permissions !== undefined) {
                updateFields.permissions = updateData.permissions;
            }
            
            if (updateData.active !== undefined) {
                updateFields.is_active = updateData.active;
            }
            
            // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
            if (updateData.password !== undefined) {
                const passwordHash = await bcrypt.hash(updateData.password, 10);
                updateFields.password_hash = passwordHash;
                updateFields.first_login = false; // –°–∫–∏–¥–∞—î–º–æ first_login –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è
            }
            
            // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ–ª—ñ–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            if (Object.keys(updateFields).length === 0) {
                return this.sanitizeUser(this.adaptUserToSQLiteFormat(existingUser));
            }
            
            // –î–æ–¥–∞—î–º–æ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            updateFields.updated_at = new Date().toISOString();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const { data: updatedUser, error } = await this.supabase
                .from('users')
                .update(updateFields)
                .eq('id', userId)
                .select()
                .single();
                
            if (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
                throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${error.message}`);
            }
            
            console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${updateData.username || existingUser.username} (ID: ${userId})`);
            return this.sanitizeUser(this.adaptUserToSQLiteFormat(updatedUser));
        } catch (error) {
            if (error instanceof ValidationError || error instanceof NotFoundError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}:`, error);
            throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }
    }

    /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {number} userId - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {number} deletedBy - ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–∏–π –≤–∏–¥–∞–ª—è—î
     * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è
     */
    async deleteUser(userId, deletedBy) {
        this.checkInitialization();
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const { data: user, error: fetchError } = await this.supabase
                .from('users')
                .select('username')
                .eq('id', userId)
                .single();
                
            if (fetchError || !user) {
                throw new NotFoundError(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${userId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
            }
            
            // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const { error } = await this.supabase
                .from('users')
                .delete()
                .eq('id', userId);
                
            if (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
                throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${error.message}`);
            }
            
            console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${user.username} (ID: ${userId})`);
            return { success: true, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' };
        } catch (error) {
            if (error instanceof ValidationError || error instanceof NotFoundError) {
                throw error;
            }
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}:`, error);
            throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
     * @returns {Object} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    async getUserStats() {
        this.checkInitialization();
        
        try {
            const { data: users, error } = await this.supabase
                .from('users')
                .select('role, is_active');
                
            if (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                throw new DatabaseError(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
            }
            
            const totalUsers = users.length;
            const activeUsers = users.filter(u => u.is_active).length;
            const adminUsers = users.filter(u => u.role === '–î–ò–†–ï–ö–¢–û–†').length;
            
            return {
                total_users: totalUsers,
                active_users: activeUsers,
                admin_users: adminUsers,
                inactive_users: totalUsers - activeUsers
            };
        } catch (error) {
            if (error instanceof DatabaseError) {
                throw error;
            }
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
            throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ
     * @returns {Array} –º–∞—Å–∏–≤ —Ä–æ–ª–µ–π
     */
    getAvailableRoles() {
        return this.availableRoles.map(role => ({
            value: role,
            label: this.getRoleLabel(role)
        }));
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ª–µ–π–±–ª —Ä–æ–ª—ñ
     * @param {string} role - —Ä–æ–ª—å
     * @returns {string} –ª–µ–π–±–ª
     */
    getRoleLabel(role) {
        const roleLabels = {
            '–î–ò–†–ï–ö–¢–û–†': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
            '–ó–ê–í–Ü–î–£–Æ–ß–ò–ô_–í–ò–†–û–ë–ù–ò–¶–¢–í–û–ú': '–ó–∞–≤—ñ–¥—É—é—á–∏–π –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ–º',
            '–ë–£–•–ì–ê–õ–¢–ï–†': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä',
            '–ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö': '–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫',
            '–ö–û–ú–Ü–†–ù–ò–ö': '–ö–æ–º—ñ—Ä–Ω–∏–∫',
            '–ú–ï–ù–ï–î–ñ–ï–†_–ó_–ü–†–û–î–ê–ñ–Ü–í': '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑ –ø—Ä–æ–¥–∞–∂—ñ–≤'
        };
        
        return roleLabels[role] || role;
    }

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ
     */
    validateUserData(userData) {
        const { username, role, password } = userData;
        
        if (!username || typeof username !== 'string' || username.trim().length === 0) {
            throw new ValidationError('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
        }
        
        if (!role || !this.availableRoles.includes(role)) {
            throw new ValidationError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
        }
        
        if (!password || password.length < 6) {
            throw new ValidationError('–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
        }
    }

    /**
     * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    validateUpdateData(updateData) {
        if (updateData.username !== undefined) {
            if (!updateData.username || typeof updateData.username !== 'string' || updateData.username.trim().length === 0) {
                throw new ValidationError('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º');
            }
        }
        
        if (updateData.role !== undefined) {
            if (!this.availableRoles.includes(updateData.role)) {
                throw new ValidationError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
            }
        }
        
        if (updateData.password !== undefined) {
            if (updateData.password.length < 6) {
                throw new ValidationError('–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
            }
        }
        
        if (updateData.email !== undefined && updateData.email) {
            if (!this.isValidEmail(updateData.email)) {
                throw new ValidationError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email');
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ email
     */
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—ñ–¥ —á—É—Ç–ª–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö
     */
    sanitizeUser(user) {
        const sanitized = { ...user };
        delete sanitized.password_hash;
        return sanitized;
    }

    /**
     * –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Supabase —Ñ–æ—Ä–º–∞—Ç—É –¥–æ SQLite —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
     */
    adaptUserToSQLiteFormat(supabaseUser) {
        return {
            id: supabaseUser.id,
            username: supabaseUser.username,
            last_name: supabaseUser.last_name,
            email: supabaseUser.email,
            phone: supabaseUser.phone,
            role: supabaseUser.role,
            permissions: supabaseUser.permissions || {},
            active: supabaseUser.is_active ? 1 : 0, // Convert boolean to integer
            created_at: supabaseUser.created_at,
            updated_at: supabaseUser.updated_at,
            first_login: supabaseUser.first_login ? 1 : 0, // Convert boolean to integer
            password_hash: supabaseUser.password_hash
        };
    }
}

module.exports = SupabaseUserService; 