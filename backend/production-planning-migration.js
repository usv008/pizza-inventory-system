const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'pizza_inventory.db');
const db = new sqlite3.Database(dbPath);

console.log('–ü–æ—á–∏–Ω–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞...');

db.serialize(() => {
    // –¢–∞–±–ª–∏—Ü—è –≤–∏—Ä–æ–±–Ω–∏—á–∏—Ö –ø–ª–∞–Ω—ñ–≤
    db.run(`CREATE TABLE IF NOT EXISTS production_plans (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        plan_date DATE NOT NULL,
        status TEXT DEFAULT 'DRAFT',
        total_planned INTEGER DEFAULT 0,
        total_produced INTEGER DEFAULT 0,
        created_by TEXT DEFAULT 'system',
        notes TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_plans:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è production_plans —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        }
    });

    // –¢–∞–±–ª–∏—Ü—è –ø–æ–∑–∏—Ü—ñ–π –ø–ª–∞–Ω—ñ–≤
    db.run(`CREATE TABLE IF NOT EXISTS production_plan_items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        plan_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        quantity_needed INTEGER NOT NULL,
        quantity_planned INTEGER NOT NULL,
        quantity_produced INTEGER DEFAULT 0,
        priority TEXT DEFAULT 'MEDIUM',
        reason TEXT DEFAULT 'OTHER',
        order_id INTEGER,
        notes TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (plan_id) REFERENCES production_plans (id) ON DELETE CASCADE,
        FOREIGN KEY (product_id) REFERENCES products (id),
        FOREIGN KEY (order_id) REFERENCES orders (id)
    )`, (err) => {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_plan_items:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è production_plan_items —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        }
    });

    // –¢–∞–±–ª–∏—Ü—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
    db.run(`CREATE TABLE IF NOT EXISTS production_settings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        daily_capacity INTEGER DEFAULT 500,
        working_hours INTEGER DEFAULT 8,
        min_batch_size INTEGER DEFAULT 10,
        cost_per_unit REAL DEFAULT 0,
        settings_json TEXT,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_settings:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è production_settings —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        }
    });

    // –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    db.run(`INSERT OR IGNORE INTO production_settings 
        (id, daily_capacity, working_hours, min_batch_size, cost_per_unit) 
        VALUES (1, 500, 8, 10, 15.50)`, (err) => {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', err.message);
        } else {
            console.log('‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –¥–æ–¥–∞–Ω—ñ');
        }
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    db.run(`CREATE INDEX IF NOT EXISTS idx_production_plans_date ON production_plans (plan_date)`, (err) => {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É:', err.message);
        } else {
            console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å –¥–ª—è –¥–∞—Ç –ø–ª–∞–Ω—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }
    });

    db.run(`CREATE INDEX IF NOT EXISTS idx_plan_items_plan_id ON production_plan_items (plan_id)`, (err) => {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É:', err.message);
        } else {
            console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∑–∏—Ü—ñ–π –ø–ª–∞–Ω—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        }
    });

    // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –ø–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    const today = new Date().toISOString().split('T')[0];
    
    db.run(`INSERT OR IGNORE INTO production_plans 
        (plan_date, status, total_planned, notes, created_by) 
        VALUES (?, 'ACTIVE', 276, '–¢–µ—Å—Ç–æ–≤–∏–π –ø–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ', 'system')`, [today], function(err) {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω—É:', err.message);
        } else if (this.changes > 0) {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –ø–ª–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–æ');
            
            const planId = this.lastID;
            
            // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –ø–ª–∞–Ω—É
            const testItems = [
                [planId, 1, 180, 180, 'CRITICAL', 'ORDER', '–¢–µ—Ä–º—ñ–Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'],
                [planId, 2, 96, 96, 'HIGH', 'MIN_STOCK', '–ù–∏–∑—å–∫—ñ –∑–∞–ª–∏—à–∫–∏']
            ];
            
            testItems.forEach(item => {
                db.run(`INSERT INTO production_plan_items 
                    (plan_id, product_id, quantity_needed, quantity_planned, priority, reason, notes)
                    VALUES (?, ?, ?, ?, ?, ?, ?)`, item, (err) => {
                    if (err) {
                        console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó:', err.message);
                    }
                });
            });
        } else {
            console.log('‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–∏–π –ø–ª–∞–Ω –≤–∂–µ —ñ—Å–Ω—É—î');
        }
        
        db.close((err) => {
            if (err) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –ë–î:', err.message);
            } else {
                console.log('üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
            }
        });
    });
});