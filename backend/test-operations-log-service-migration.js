// test-operations-log-service-migration.js - –¢–µ—Å—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó OperationsLogService

const operationsLogService = require('./services/operationsLogService-v2');

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è OperationsLogService-v2
 * –¢–µ—Å—Ç—É—î —Ä–æ–±–æ—Ç—É –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º –æ–ø–µ—Ä–∞—Ü—ñ–π –≤ –æ–±–æ—Ö –ë–î (SQLite —Ç–∞ Supabase)
 */
class OperationsLogServiceMigrationTest {
    constructor() {
        this.testResults = [];
        this.testLogIds = [];
    }

    log(message, type = 'info') {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
        console.log(logMessage);
        
        if (type === 'error') {
            this.testResults.push({ message, success: false, timestamp });
        } else if (type === 'success') {
            this.testResults.push({ message, success: true, timestamp });
        }
    }

    async runAllTests() {
        this.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è OperationsLogService-v2', 'info');
        this.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${operationsLogService.useSupabase ? 'Supabase' : 'SQLite'}`, 'info');

        try {
            // –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
            await this.testLogOperation();
            await this.testGetLogs();
            await this.testGetOperationsStats();
            await this.testGetEntityOperations();
            
            // –¢–µ—Å—Ç–∏ helper –º–µ—Ç–æ–¥—ñ–≤
            await this.testOrderOperationLogging();
            await this.testProductOperationLogging();
            
            // –¢–µ—Å—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
            await this.testValidation();

            // –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            this.generateTestReport();
            
        } catch (error) {
            this.log(`‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${error.message}`, 'error');
        }
    }

    async testLogOperation() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è logOperation()...', 'info');
            
            const logData = {
                operation_type: 'CREATE_PRODUCT',
                operation_id: 999,
                entity_type: 'product',
                entity_id: 999,
                old_data: null,
                new_data: { id: 999, name: '–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä', code: 'TEST999' },
                description: '–°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è',
                user_name: 'test-user',
                ip_address: '127.0.0.1',
                user_agent: 'Test Agent 1.0'
            };
            
            const logId = await operationsLogService.logOperation(logData);
            
            if (!logId || typeof logId !== 'number') {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –ª–æ–≥—É');
            }
            
            this.testLogIds.push(logId);
            this.log(`‚úÖ logOperation: —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª–æ–≥ –∑ ID ${logId}`, 'success');
            
        } catch (error) {
            this.log(`‚ùå logOperation: ${error.message}`, 'error');
        }
    }

    async testGetLogs() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getLogs()...', 'info');
            
            // –¢–µ—Å—Ç –±–µ–∑ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
            const allLogs = await operationsLogService.getLogs({ limit: 10 });
            
            if (!allLogs.success || !Array.isArray(allLogs.logs)) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
            }
            
            this.log(`‚úÖ getLogs (–≤—Å—ñ): –æ—Ç—Ä–∏–º–∞–Ω–æ ${allLogs.logs.length} –ª–æ–≥—ñ–≤`, 'success');
            
            // –¢–µ—Å—Ç –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
            const filteredLogs = await operationsLogService.getLogs({
                operation_type: 'CREATE_PRODUCT',
                entity_type: 'product',
                user_name: 'test-user',
                limit: 5
            });
            
            if (!filteredLogs.success || !Array.isArray(filteredLogs.logs)) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤');
            }
            
            this.log(`‚úÖ getLogs (—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ): –∑–Ω–∞–π–¥–µ–Ω–æ ${filteredLogs.logs.length} –ª–æ–≥—ñ–≤`, 'success');
            
        } catch (error) {
            this.log(`‚ùå getLogs: ${error.message}`, 'error');
        }
    }

    async testGetOperationsStats() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getOperationsStats()...', 'info');
            
            const stats = await operationsLogService.getOperationsStats(7); // –ó–∞ —Ç–∏–∂–¥–µ–Ω—å
            
            if (!stats.success || !stats.statistics) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            }
            
            const requiredFields = ['period_days', 'daily_stats', 'summary', 'total_operations'];
            for (const field of requiredFields) {
                if (!(field in stats.statistics)) {
                    throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ ${field} –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏—Ü—ñ`);
                }
            }
            
            this.log(`‚úÖ getOperationsStats: ${stats.statistics.total_operations} –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞ 7 –¥–Ω—ñ–≤`, 'success');
            this.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π –æ–ø–µ—Ä–∞—Ü—ñ–π: ${stats.statistics.summary.length}`, 'success');
            
        } catch (error) {
            this.log(`‚ùå getOperationsStats: ${error.message}`, 'error');
        }
    }

    async testGetEntityOperations() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getEntityOperations()...', 'info');
            
            const result = await operationsLogService.getEntityOperations('product', 999, 10);
            
            if (!result.success || !Array.isArray(result.operations)) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π —Å—É—Ç–Ω–æ—Å—Ç—ñ');
            }
            
            const requiredFields = ['entity_type', 'entity_id', 'count'];
            for (const field of requiredFields) {
                if (!(field in result)) {
                    throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ ${field} –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ`);
                }
            }
            
            this.log(`‚úÖ getEntityOperations: –∑–Ω–∞–π–¥–µ–Ω–æ ${result.operations.length} –æ–ø–µ—Ä–∞—Ü—ñ–π –¥–ª—è —Ç–æ–≤–∞—Ä—É 999`, 'success');
            
        } catch (error) {
            this.log(`‚ùå getEntityOperations: ${error.message}`, 'error');
        }
    }

    async testOrderOperationLogging() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è logOrderOperation()...', 'info');
            
            const order = {
                id: 999,
                order_number: 'ORD-999-TEST',
                client_name: '–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç',
                total_quantity: 100,
                status: 'NEW'
            };
            
            const logId = await operationsLogService.logOrderOperation(
                operationsLogService.constructor.OPERATION_TYPES.CREATE_ORDER,
                order,
                'test-user'
            );
            
            if (!logId) {
                throw new Error('–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ ID –ª–æ–≥—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
            }
            
            this.testLogIds.push(logId);
            this.log(`‚úÖ logOrderOperation: —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª–æ–≥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID ${logId}`, 'success');
            
        } catch (error) {
            this.log(`‚ùå logOrderOperation: ${error.message}`, 'error');
        }
    }

    async testProductOperationLogging() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è logProductOperation()...', 'info');
            
            const product = {
                id: 999,
                name: '–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä v2',
                code: 'TEST999',
                stock_pieces: 150
            };
            
            const oldProduct = {
                id: 999,
                name: '–¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä',
                code: 'TEST999',
                stock_pieces: 100
            };
            
            const logId = await operationsLogService.logProductOperation(
                operationsLogService.constructor.OPERATION_TYPES.UPDATE_STOCK,
                product,
                'test-user',
                oldProduct
            );
            
            if (!logId) {
                throw new Error('–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ ID –ª–æ–≥—É —Ç–æ–≤–∞—Ä—É');
            }
            
            this.testLogIds.push(logId);
            this.log(`‚úÖ logProductOperation: —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª–æ–≥ —Ç–æ–≤–∞—Ä—É –∑ ID ${logId}`, 'success');
            
        } catch (error) {
            this.log(`‚ùå logProductOperation: ${error.message}`, 'error');
        }
    }

    async testValidation() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó...', 'info');
            
            // –¢–µ—Å—Ç –∑ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            try {
                await operationsLogService.logOperation({
                    operation_type: '', // –ü–æ—Ä–æ–∂–Ω—ñ–π —Ç–∏–ø
                    entity_type: 'product',
                    description: '–¢–µ—Å—Ç',
                    user_name: 'test-user'
                });
                throw new Error('–í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ operation_type');
            } catch (error) {
                if (error.message.includes('–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è')) {
                    this.log('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω—ñ', 'success');
                } else {
                    throw error;
                }
            }
            
            // –¢–µ—Å—Ç –±–µ–∑ –æ–ø–∏—Å—É
            try {
                await operationsLogService.logOperation({
                    operation_type: 'CREATE_PRODUCT',
                    entity_type: 'product',
                    entity_id: 999,
                    description: '', // –ü–æ—Ä–æ–∂–Ω—ñ–π –æ–ø–∏—Å
                    user_name: 'test-user'
                });
                throw new Error('–í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ description');
            } catch (error) {
                if (error.message.includes('–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è')) {
                    this.log('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–ø–∏—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–π', 'success');
                } else {
                    throw error;
                }
            }
            
        } catch (error) {
            this.log(`‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ${error.message}`, 'error');
        }
    }

    generateTestReport() {
        this.log('\\nüìã –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø OPERATIONSLOGSERVICE-V2', 'info');
        this.log('=' * 60, 'info');
        
        const successCount = this.testResults.filter(r => r.success).length;
        const totalCount = this.testResults.length;
        const successRate = totalCount > 0 ? (successCount / totalCount * 100).toFixed(1) : 0;
        
        this.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: ${successCount}/${totalCount} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${successRate}%)`, 'info');
        this.log(`üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${operationsLogService.useSupabase ? 'Supabase PostgreSQL' : 'SQLite'}`, 'info');
        
        if (this.testLogIds.length > 0) {
            this.log(`üß™ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏—Ö –ª–æ–≥—ñ–≤: ${this.testLogIds.length}`, 'info');
            this.log(`üÜî IDs –ª–æ–≥—ñ–≤: ${this.testLogIds.join(', ')}`, 'info');
        }
        
        // –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        this.log('\\nüìù –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:', 'info');
        this.testResults.forEach((result, index) => {
            const status = result.success ? '‚úÖ' : '‚ùå';
            this.log(`${index + 1}. ${status} ${result.message}`, 'info');
        });
        
        // –ü—ñ–¥—Å—É–º–æ–∫
        if (successRate >= 80) {
            this.log('\\nüéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!', 'success');
            this.log('OperationsLogService-v2 –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–æ—é –ë–î', 'info');
        } else if (successRate >= 60) {
            this.log('\\n‚ö†Ô∏è –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –ó –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø–ú–ò', 'info');
            this.log('–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–∞—Ü—é—î, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏', 'info');
        } else {
            this.log('\\n‚ùå –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–û–í–ê–õ–ï–ù–û!', 'error');
            this.log('–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ OperationsLogService-v2, –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è', 'error');
        }
        
        this.log('\\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:', 'info');
        this.log('1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é USE_SUPABASE –≤ .env', 'info');
        this.log('2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —Ç–∞–±–ª–∏—Ü—è operations_log —ñ—Å–Ω—É—î –≤ –æ–±—Ä–∞–Ω—ñ–π –ë–î', 'info');
        this.log('3. –Ø–∫—â–æ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ connection —Ç–∞ —Å—Ö–µ–º—É –ë–î', 'info');
        this.log('4. –¢–µ—Å—Ç–æ–≤—ñ –ª–æ–≥–∏ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –ë–î –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è', 'info');
        
        return {
            success_rate: successRate,
            total_tests: totalCount,
            successful_tests: successCount,
            database_type: operationsLogService.useSupabase ? 'Supabase' : 'SQLite',
            test_log_ids: this.testLogIds
        };
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
async function runOperationsLogServiceTests() {
    const tester = new OperationsLogServiceMigrationTest();
    const results = await tester.runAllTests();
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ CI/CD
    return results;
}

// –Ø–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
    runOperationsLogServiceTests()
        .then(results => {
            console.log('\\nüèÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            process.exit(results.success_rate >= 80 ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
            process.exit(1);
        });
}

module.exports = { runOperationsLogServiceTests, OperationsLogServiceMigrationTest };