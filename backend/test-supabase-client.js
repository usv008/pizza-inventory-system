#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ Supabase –∫–ª—ñ—î–Ω—Ç–∞
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ –±–∞–∑–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
 */

const { supabase, testConnection } = require('./database-supabase');

async function testSupabaseClient() {
    console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Supabase –∫–ª—ñ—î–Ω—Ç–∞...\n');
    
    try {
        // 1. –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
        console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –∑\'—î–¥–Ω–∞–Ω–Ω—è...');
        const connected = await testConnection();
        
        if (!connected) {
            console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑\'—î–¥–Ω–∞—Ç–∏—Å—è –∑ Supabase');
            process.exit(1);
        }
        
        // 2. –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');
        const { data: users, error: usersError } = await supabase
            .from('users')
            .select('id, username, role, created_at')
            .limit(3);
            
        if (usersError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', usersError.message);
        } else {
            console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${users.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
            users.forEach((user, index) => {
                console.log(`   ${index + 1}. ${user.username} (${user.role}) - ${user.created_at}`);
            });
        }
        
        // 3. –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
        console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤...');
        const { data: products, error: productsError } = await supabase
            .from('products')
            .select('id, name, code, stock_pieces')
            .limit(3);
            
        if (productsError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:', productsError.message);
        } else {
            console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤`);
            products.forEach((product, index) => {
                console.log(`   ${index + 1}. ${product.name} (${product.code}) - ${product.stock_pieces} —à—Ç`);
            });
        }
        
        // 4. –¢–µ—Å—Ç JSONB –ø–æ–ª—ñ–≤
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç JSONB –ø–æ–ª—ñ–≤...');
        const { data: orders, error: ordersError } = await supabase
            .from('orders')
            .select('id, order_number, delivery_info')
            .not('delivery_info', 'is', null)
            .limit(2);
            
        if (ordersError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å:', ordersError.message);
        } else {
            console.log(`‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ ${orders.length} –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ JSONB –¥–∞–Ω–∏–º–∏`);
            orders.forEach((order, index) => {
                console.log(`   ${index + 1}. ${order.order_number}: delivery_info =`, 
                           typeof order.delivery_info === 'object' ? 'JSONB ‚úÖ' : '–Ω–µ JSONB ‚ùå');
            });
        }
        
        // 5. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        const tables = ['users', 'products', 'clients', 'orders', 'stock_movements'];
        
        for (const tableName of tables) {
            const { count, error } = await supabase
                .from(tableName)
                .select('*', { count: 'exact', head: true });
                
            if (error) {
                console.log(`   ${tableName}: –ø–æ–º–∏–ª–∫–∞ - ${error.message}`);
            } else {
                console.log(`   ${tableName}: ${count} –∑–∞–ø–∏—Å—ñ–≤`);
            }
        }
        
        console.log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ Supabase –∫–ª—ñ—î–Ω—Ç–∞ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó —Å–µ—Ä–≤—ñ—Å—ñ–≤');
        
    } catch (error) {
        console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error.message);
        console.error('Stack:', error.stack);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
    testSupabaseClient()
        .then(() => {
            console.log('\nüìã –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { testSupabaseClient };