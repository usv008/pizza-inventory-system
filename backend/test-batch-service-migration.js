// test-batch-service-migration.js - –¢–µ—Å—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó BatchService

const batchService = require('./services/batchService-v2');

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ —Ç–µ—Å—Ç–∏ –¥–ª—è BatchService-v2
 * –¢–µ—Å—Ç—É—î —Ä–æ–±–æ—Ç—É –∑ –ø–∞—Ä—Ç—ñ—è–º–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –≤ –æ–±–æ—Ö –ë–î (SQLite —Ç–∞ Supabase)
 */
class BatchServiceMigrationTest {
    constructor() {
        this.testResults = [];
        this.testProductId = null;
        this.testBatchId = null;
    }

    log(message, type = 'info') {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
        console.log(logMessage);
        
        if (type === 'error') {
            this.testResults.push({ message, success: false, timestamp });
        } else if (type === 'success') {
            this.testResults.push({ message, success: true, timestamp });
        }
    }

    async runAllTests() {
        this.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è BatchService-v2', 'info');
        this.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${batchService.useSupabase ? 'Supabase' : 'SQLite'}`, 'info');

        try {
            // –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
            await this.testGetAllBatchesGrouped();
            await this.testGetExpiringBatches();
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä –∑ –ø–∞—Ä—Ç—ñ—è–º–∏
            await this.findTestProduct();
            
            if (this.testProductId) {
                await this.testGetBatchesByProduct();
                await this.testGetProductAvailability();
                await this.testReservationLogic();
            }

            // –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            this.generateTestReport();
            
        } catch (error) {
            this.log(`‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${error.message}`, 'error');
        }
    }

    async testGetAllBatchesGrouped() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getAllBatchesGrouped()...', 'info');
            
            const result = await batchService.getAllBatchesGrouped();
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if (!result.success) {
                throw new Error('–ù–µ–≤—É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å');
            }
            
            if (!Array.isArray(result.products)) {
                throw new Error('products –Ω–µ —î –º–∞—Å–∏–≤–æ–º');
            }
            
            if (!result.stats || typeof result.stats !== 'object') {
                throw new Error('–í—ñ–¥—Å—É—Ç–Ω—è –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
            }
            
            this.log(`‚úÖ getAllBatchesGrouped: ${result.products.length} —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞—Ä—Ç—ñ—è–º–∏`, 'success');
            
            // –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
            if (result.products.length > 0) {
                const firstProduct = result.products[0];
                const requiredFields = ['product_id', 'product_name', 'total_available', 'batches'];
                
                for (const field of requiredFields) {
                    if (!(field in firstProduct)) {
                        throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ ${field} –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –ø—Ä–æ–¥—É–∫—Ç—É`);
                    }
                }
                
                this.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç—É –∫–æ—Ä–µ–∫—Ç–Ω–∞`, 'success');
            }
            
        } catch (error) {
            this.log(`‚ùå getAllBatchesGrouped: ${error.message}`, 'error');
        }
    }

    async testGetExpiringBatches() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getExpiringBatches()...', 'info');
            
            const result = await batchService.getExpiringBatches(30); // 30 –¥–Ω—ñ–≤
            
            if (!result.success) {
                throw new Error('–ù–µ–≤—É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å');
            }
            
            if (!Array.isArray(result.batches)) {
                throw new Error('batches –Ω–µ —î –º–∞—Å–∏–≤–æ–º');
            }
            
            if (!result.urgency_breakdown || typeof result.urgency_breakdown !== 'object') {
                throw new Error('–í—ñ–¥—Å—É—Ç–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ urgency_breakdown');
            }
            
            this.log(`‚úÖ getExpiringBatches: ${result.count} –ø–∞—Ä—Ç—ñ–π –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è –≤ –Ω–∞–π–±–ª–∏–∂—á—ñ 30 –¥–Ω—ñ–≤`, 'success');
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ urgency breakdown
            const { critical, high, medium } = result.urgency_breakdown;
            if (typeof critical !== 'number' || typeof high !== 'number' || typeof medium !== 'number') {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ urgency_breakdown');
            }
            
            this.log(`‚úÖ –†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ—Å—Ç—é: –∫—Ä–∏—Ç–∏—á–Ω—ñ=${critical}, –≤–∏—Å–æ–∫—ñ=${high}, —Å–µ—Ä–µ–¥–Ω—ñ=${medium}`, 'success');
            
        } catch (error) {
            this.log(`‚ùå getExpiringBatches: ${error.message}`, 'error');
        }
    }

    async findTestProduct() {
        try {
            this.log('üîç –ü–æ—à—É–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∑ –ø–∞—Ä—Ç—ñ—è–º–∏...', 'info');
            
            const groupedResult = await batchService.getAllBatchesGrouped();
            
            if (groupedResult.products.length === 0) {
                this.log('‚ö†Ô∏è –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞—Ä—Ç—ñ—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è', 'info');
                return;
            }
            
            // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä –∑ –Ω–∞–π–±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–∞—Ä—Ç—ñ–π
            const productWithMostBatches = groupedResult.products.reduce((max, product) => 
                (product.batches_count || 0) > (max.batches_count || 0) ? product : max
            );
            
            this.testProductId = productWithMostBatches.product_id;
            this.log(`‚úÖ –û–±—Ä–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä: ${productWithMostBatches.product_name} (ID: ${this.testProductId}, –ø–∞—Ä—Ç—ñ–π: ${productWithMostBatches.batches_count})`, 'success');
            
        } catch (error) {
            this.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É: ${error.message}`, 'error');
        }
    }

    async testGetBatchesByProduct() {
        try {
            this.log(`üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getBatchesByProduct(${this.testProductId})...`, 'info');
            
            const result = await batchService.getBatchesByProduct(this.testProductId, false);
            
            if (!result.success) {
                throw new Error('–ù–µ–≤—É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å');
            }
            
            if (!Array.isArray(result.batches)) {
                throw new Error('batches –Ω–µ —î –º–∞—Å–∏–≤–æ–º');
            }
            
            if (result.product_id !== this.testProductId) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π product_id —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
            }
            
            this.log(`‚úÖ getBatchesByProduct: ${result.count} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–∞—Ä—Ç—ñ–π`, 'success');
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–µ—Ä—à–æ—ó –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö —Ç–µ—Å—Ç—ñ–≤
            if (result.batches.length > 0) {
                this.testBatchId = result.batches[0].id;
                this.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—É –ø–∞—Ä—Ç—ñ—é: ${this.testBatchId}`, 'success');
                
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞—Ä—Ç—ñ—ó
                const batch = result.batches[0];
                const requiredFields = ['id', 'product_id', 'available_quantity', 'batch_date', 'expiry_date'];
                
                for (const field of requiredFields) {
                    if (!(field in batch)) {
                        throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ ${field} –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ –ø–∞—Ä—Ç—ñ—ó`);
                    }
                }
                
                this.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞—Ä—Ç—ñ—ó –∫–æ—Ä–µ–∫—Ç–Ω–∞`, 'success');
            }
            
        } catch (error) {
            this.log(`‚ùå getBatchesByProduct: ${error.message}`, 'error');
        }
    }

    async testGetProductAvailability() {
        try {
            this.log(`üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è getProductAvailability(${this.testProductId})...`, 'info');
            
            const result = await batchService.getProductAvailability(this.testProductId);
            
            if (!result.success) {
                throw new Error('–ù–µ–≤—É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å');
            }
            
            const requiredFields = [
                'product_id', 'product_name', 'total_available', 
                'active_batches', 'stock_status', 'has_sufficient_stock'
            ];
            
            for (const field of requiredFields) {
                if (!(field in result)) {
                    throw new Error(`–í—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ ${field} –≤ availability`);
                }
            }
            
            if (result.product_id !== this.testProductId) {
                throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π product_id —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
            }
            
            this.log(`‚úÖ getProductAvailability: ${result.total_available} —à—Ç –¥–æ—Å—Ç—É–ø–Ω–æ, —Å—Ç–∞—Ç—É—Å: ${result.stock_status}`, 'success');
            
        } catch (error) {
            this.log(`‚ùå getProductAvailability: ${error.message}`, 'error');
        }
    }

    async testReservationLogic() {
        try {
            this.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π...', 'info');
            
            // –¢–µ—Å—Ç 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–æ–≤–∞—Ä—É (FIFO)
            const reserveResult = await batchService.reserveBatchesForProduct(
                this.testProductId, 
                5, // 5 —à—Ç—É–∫
                { user: 'test-user' }
            );
            
            if (!reserveResult.success) {
                throw new Error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è');
            }
            
            this.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: ${reserveResult.quantity_reserved} —à—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ, –¥–µ—Ñ—ñ—Ü–∏—Ç: ${reserveResult.shortage}`, 'success');
            
            // –¢–µ—Å—Ç 2: –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–º–Ω–æ–∂–∏–Ω–∞ —Ç–æ–≤–∞—Ä—ñ–≤)
            const orderItems = [
                { product_id: this.testProductId, quantity: 3 }
            ];
            
            const orderReserveResult = await batchService.reserveBatchesForOrderItems(
                999, // —Ç–µ—Å—Ç–æ–≤–∏–π order_id
                orderItems,
                { user: 'test-user' }
            );
            
            if (!orderReserveResult.success) {
                throw new Error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è');
            }
            
            this.log(`‚úÖ –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderReserveResult.total_reserved} —à—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ`, 'success');
            
            // –¢–µ—Å—Ç 3: –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤
            // –°–∏–º—É–ª—é—î–º–æ allocated_batches –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è
            const mockOrderItems = orderReserveResult.reservations.map(res => ({
                id: 1,
                product_id: res.product_id,
                allocated_batches: JSON.stringify(res.allocated_batches || [])
            }));
            
            const unreserveResult = await batchService.unreserveBatchesForOrder(
                999,
                mockOrderItems,
                { user: 'test-user' }
            );
            
            if (!unreserveResult.success) {
                throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤');
            }
            
            this.log(`‚úÖ –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—ñ–≤: ${unreserveResult.released_quantity} —à—Ç –∑–≤—ñ–ª—å–Ω–µ–Ω–æ`, 'success');
            
        } catch (error) {
            this.log(`‚ùå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è: ${error.message}`, 'error');
        }
    }

    generateTestReport() {
        this.log('\nüìã –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø BATCHSERVICE-V2', 'info');
        this.log('=' * 50, 'info');
        
        const successCount = this.testResults.filter(r => r.success).length;
        const totalCount = this.testResults.length;
        const successRate = totalCount > 0 ? (successCount / totalCount * 100).toFixed(1) : 0;
        
        this.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏: ${successCount}/${totalCount} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${successRate}%)`, 'info');
        this.log(`üóÉÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: ${batchService.useSupabase ? 'Supabase PostgreSQL' : 'SQLite'}`, 'info');
        
        if (this.testProductId) {
            this.log(`üß™ –¢–µ—Å—Ç–æ–≤–∏–π —Ç–æ–≤–∞—Ä: ID ${this.testProductId}`, 'info');
        }
        
        // –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        this.log('\nüìù –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:', 'info');
        this.testResults.forEach((result, index) => {
            const status = result.success ? '‚úÖ' : '‚ùå';
            this.log(`${index + 1}. ${status} ${result.message}`, 'info');
        });
        
        // –ü—ñ–¥—Å—É–º–æ–∫
        if (successRate >= 80) {
            this.log('\nüéâ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!', 'success');
            this.log('BatchService-v2 –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–æ—é –ë–î', 'info');
        } else if (successRate >= 60) {
            this.log('\n‚ö†Ô∏è –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –ó –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø–ú–ò', 'info');
            this.log('–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–∞—Ü—é—î, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏', 'info');
        } else {
            this.log('\n‚ùå –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–û–í–ê–õ–ï–ù–û!', 'error');
            this.log('–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ BatchService-v2, –ø–æ—Ç—Ä–µ–±—É—î –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è', 'error');
        }
        
        this.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:', 'info');
        this.log('1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é USE_SUPABASE –≤ .env', 'info');
        this.log('2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —î —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –≤ –æ–±—Ä–∞–Ω—ñ–π –ë–î', 'info');
        this.log('3. –Ø–∫—â–æ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ connection —Ç–∞ —Å—Ö–µ–º—É –ë–î', 'info');
        
        return {
            success_rate: successRate,
            total_tests: totalCount,
            successful_tests: successCount,
            database_type: batchService.useSupabase ? 'Supabase' : 'SQLite'
        };
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
async function runBatchServiceTests() {
    const tester = new BatchServiceMigrationTest();
    const results = await tester.runAllTests();
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ CI/CD
    return results;
}

// –Ø–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
    runBatchServiceTests()
        .then(results => {
            console.log('\nüèÅ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            process.exit(results.success_rate >= 80 ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
            process.exit(1);
        });
}

module.exports = { runBatchServiceTests, BatchServiceMigrationTest };