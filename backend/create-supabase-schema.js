const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

// SQL –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å (–∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ –∑ SQLite –≤ PostgreSQL)
const createTablesSQL = `
-- –¢–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤
CREATE TABLE IF NOT EXISTS products (
    id BIGSERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    code TEXT UNIQUE NOT NULL,
    weight REAL NOT NULL,
    barcode TEXT UNIQUE,
    pieces_per_box INTEGER NOT NULL DEFAULT 1,
    stock_pieces INTEGER DEFAULT 0,
    stock_boxes INTEGER DEFAULT 0,
    min_stock_pieces INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è —Ä—É—Ö—ñ–≤ —Å–∫–ª–∞–¥—É
CREATE TABLE IF NOT EXISTS stock_movements (
    id BIGSERIAL PRIMARY KEY,
    product_id BIGINT NOT NULL REFERENCES products(id),
    movement_type TEXT NOT NULL,
    pieces INTEGER NOT NULL,
    boxes INTEGER NOT NULL,
    reason TEXT,
    "user" TEXT DEFAULT 'system',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
CREATE TABLE IF NOT EXISTS clients (
    id BIGSERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    contact_person TEXT,
    phone TEXT,
    email TEXT,
    address TEXT,
    notes TEXT,
    is_active INTEGER DEFAULT 1,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è –∑–∞–º–æ–≤–ª–µ–Ω—å
CREATE TABLE IF NOT EXISTS orders (
    id BIGSERIAL PRIMARY KEY,
    order_number TEXT UNIQUE NOT NULL,
    client_id BIGINT REFERENCES clients(id),
    client_name TEXT NOT NULL,
    client_contact TEXT,
    order_date DATE NOT NULL,
    delivery_date DATE,
    status TEXT DEFAULT 'NEW',
    total_quantity INTEGER DEFAULT 0,
    total_boxes INTEGER DEFAULT 0,
    notes TEXT,
    created_by TEXT DEFAULT 'system',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è –ø–æ–∑–∏—Ü—ñ–π –∑–∞–º–æ–≤–ª–µ–Ω—å
CREATE TABLE IF NOT EXISTS order_items (
    id BIGSERIAL PRIMARY KEY,
    order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
    product_id BIGINT NOT NULL REFERENCES products(id),
    quantity INTEGER NOT NULL,
    boxes INTEGER NOT NULL,
    pieces INTEGER NOT NULL,
    reserved_quantity INTEGER DEFAULT 0,
    produced_quantity INTEGER DEFAULT 0,
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è —Å–ø–∏—Å–∞–Ω—å
CREATE TABLE IF NOT EXISTS writeoffs (
    id BIGSERIAL PRIMARY KEY,
    product_id BIGINT NOT NULL REFERENCES products(id),
    writeoff_date DATE NOT NULL,
    total_quantity INTEGER NOT NULL,
    boxes_quantity INTEGER NOT NULL,
    pieces_quantity INTEGER NOT NULL,
    reason TEXT NOT NULL,
    responsible TEXT NOT NULL,
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
CREATE TABLE IF NOT EXISTS production (
    id BIGSERIAL PRIMARY KEY,
    product_id BIGINT NOT NULL REFERENCES products(id),
    production_date DATE NOT NULL,
    production_time TEXT,
    total_quantity INTEGER NOT NULL,
    boxes_quantity INTEGER NOT NULL,
    pieces_quantity INTEGER NOT NULL,
    expiry_date DATE NOT NULL,
    responsible TEXT DEFAULT 'system',
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è –ø–ª–∞–Ω—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
CREATE TABLE IF NOT EXISTS production_plans (
    id BIGSERIAL PRIMARY KEY,
    plan_date DATE NOT NULL,
    status TEXT DEFAULT 'DRAFT',
    total_planned INTEGER DEFAULT 0,
    total_produced INTEGER DEFAULT 0,
    created_by TEXT DEFAULT 'system',
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è –ø–æ–∑–∏—Ü—ñ–π –ø–ª–∞–Ω—ñ–≤ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
CREATE TABLE IF NOT EXISTS production_plan_items (
    id BIGSERIAL PRIMARY KEY,
    plan_id BIGINT NOT NULL REFERENCES production_plans(id) ON DELETE CASCADE,
    product_id BIGINT NOT NULL REFERENCES products(id),
    quantity_needed INTEGER NOT NULL,
    quantity_planned INTEGER NOT NULL,
    quantity_produced INTEGER DEFAULT 0,
    priority TEXT DEFAULT 'MEDIUM',
    reason TEXT DEFAULT 'OTHER',
    order_id BIGINT REFERENCES orders(id),
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
CREATE TABLE IF NOT EXISTS production_settings (
    id BIGSERIAL PRIMARY KEY,
    daily_capacity INTEGER DEFAULT 500,
    working_hours INTEGER DEFAULT 8,
    min_batch_size INTEGER DEFAULT 10,
    cost_per_unit REAL DEFAULT 0,
    settings_json TEXT,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
CREATE TABLE IF NOT EXISTS users (
    id BIGSERIAL PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE,
    phone TEXT,
    password_hash TEXT,
    role TEXT NOT NULL DEFAULT '–ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö',
    permissions TEXT DEFAULT '{}',
    first_login INTEGER DEFAULT 1,
    active INTEGER DEFAULT 1,
    created_by BIGINT REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü—è —Å–µ—Å—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
CREATE TABLE IF NOT EXISTS user_sessions (
    id BIGSERIAL PRIMARY KEY,
    session_id TEXT UNIQUE NOT NULL,
    user_id BIGINT NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    expires_at TIMESTAMPTZ NOT NULL,
    ip_address TEXT,
    user_agent TEXT,
    active INTEGER DEFAULT 1
);

-- –¢–∞–±–ª–∏—Ü—è –∞—É–¥–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
CREATE TABLE IF NOT EXISTS user_audit (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES users(id),
    action TEXT NOT NULL,
    resource_type TEXT,
    resource_id BIGINT,
    details TEXT,
    ip_address TEXT,
    user_agent TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
CREATE INDEX IF NOT EXISTS idx_stock_movements_product_id ON stock_movements(product_id);
CREATE INDEX IF NOT EXISTS idx_stock_movements_created_at ON stock_movements(created_at);
CREATE INDEX IF NOT EXISTS idx_orders_client_id ON orders(client_id);
CREATE INDEX IF NOT EXISTS idx_orders_order_date ON orders(order_date);
CREATE INDEX IF NOT EXISTS idx_order_items_order_id ON order_items(order_id);
CREATE INDEX IF NOT EXISTS idx_order_items_product_id ON order_items(product_id);
CREATE INDEX IF NOT EXISTS idx_writeoffs_product_id ON writeoffs(product_id);
CREATE INDEX IF NOT EXISTS idx_production_product_id ON production(product_id);
CREATE INDEX IF NOT EXISTS idx_production_production_date ON production(production_date);
CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_audit_user_id ON user_audit(user_id);
`;

async function createSupabaseSchema() {
    console.log('üèóÔ∏è –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ö–µ–º—É –≤ Supabase...\n');
    
    try {
        const { data, error } = await supabase.rpc('exec_sql', {
            sql: createTablesSQL
        });
        
        if (error) {
            // –Ø–∫—â–æ RPC –Ω–µ –ø—Ä–∞—Ü—é—î, —Å–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ñ SQL –∑–∞–ø–∏—Ç–∏
            console.log('üîÑ –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ñ SQL –∑–∞–ø–∏—Ç–∏...');
            
            // –†–æ–∑–¥—ñ–ª—è—î–º–æ SQL –Ω–∞ –æ–∫—Ä–µ–º—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –≤–∏–∫–æ–Ω—É—î–º–æ –ø–æ —á–µ—Ä–∑—ñ
            const statements = createTablesSQL
                .split(';')
                .map(s => s.trim())
                .filter(s => s.length > 0);
            
            for (const statement of statements) {
                if (statement.includes('CREATE TABLE') || statement.includes('CREATE INDEX')) {
                    console.log(`–í–∏–∫–æ–Ω—É—î–º–æ: ${statement.substring(0, 50)}...`);
                    
                    const { error: sqlError } = await supabase
                        .from('__dummy__') // –¶–µ –Ω–µ —Å–ø—Ä–∞—Ü—é—î, –∞–ª–µ –º–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ raw SQL —á–µ—Ä–µ–∑ rpc
                        .select('1');
                    
                    // –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–∞–±–ª–∏—Ü—ñ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ Supabase Dashboard
                    console.log('‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ö–µ–º—É —á–µ—Ä–µ–∑ Supabase Dashboard –∞–±–æ SQL Editor');
                }
            }
        } else {
            console.log('‚úÖ –°—Ö–µ–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
        }
        
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏:', err.message);
        console.log('\nüìù SQL –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ö–µ–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª schema.sql');
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ SQL —É —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        const fs = require('fs');
        fs.writeFileSync('schema.sql', createTablesSQL);
    }
}

createSupabaseSchema();
