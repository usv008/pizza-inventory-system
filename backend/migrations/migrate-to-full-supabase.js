const { supabase } = require('../supabase-client');

/**
 * –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–∞ –ø–æ–≤–Ω–∏–π Supabase
 * –î–æ–¥–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –¥–æ user_sessions —Ç–∞ —Ç–µ—Å—Ç—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
 */
async function migrateToFullSupabase() {
    console.log('üöÄ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–æ–≤–Ω–∏–π Supabase...');
    
    try {
        // 1. –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ sess –¥–æ user_sessions
        console.log('üìã –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ sess –¥–æ user_sessions...');
        
        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ ALTER TABLE —á–µ—Ä–µ–∑ RPC
        const { data: alterResult, error: alterError } = await supabase
            .rpc('execute_sql', { 
                sql: 'ALTER TABLE user_sessions ADD COLUMN IF NOT EXISTS sess JSONB;' 
            });
        
        if (alterError) {
            console.warn('‚ö†Ô∏è  RPC –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥:', alterError.message);
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ - —Å–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Å –∑ sess –ø–æ–ª–µ–º
            const testResult = await supabase
                .from('user_sessions')
                .insert({
                    session_id: 'migration-test-' + Date.now(),
                    user_id: 1,
                    expires_at: new Date(Date.now() + 3600000).toISOString(),
                    sess: { migration: true }
                });
            
            if (testResult.error && testResult.error.message.includes('sess')) {
                console.error('‚ùå –ü–æ–ª–µ sess –Ω–µ —ñ—Å–Ω—É—î —ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ');
                console.log('üí° –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Ä—É—á–Ω—É –¥–æ–¥–∞—Ç–∏ –ø–æ–ª–µ —á–µ—Ä–µ–∑ Supabase Dashboard:');
                console.log('   ALTER TABLE user_sessions ADD COLUMN sess JSONB;');
                return false;
            } else if (testResult.error) {
                console.error('‚ùå –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞:', testResult.error.message);
                return false;
            } else {
                console.log('‚úÖ –ü–æ–ª–µ sess –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –±—É–ª–æ –¥–æ–¥–∞–Ω–æ');
                // –û—á–∏—â–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å
                await supabase
                    .from('user_sessions')
                    .delete()
                    .like('session_id', 'migration-test-%');
            }
        } else {
            console.log('‚úÖ SQL –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —á–µ—Ä–µ–∑ RPC');
        }
        
        // 2. –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        console.log('üìã –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó...');
        
        const indexes = [
            'CREATE INDEX IF NOT EXISTS idx_user_sessions_expires ON user_sessions(expires_at);',
            'CREATE INDEX IF NOT EXISTS idx_user_sessions_active ON user_sessions(active);',
            'CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);'
        ];
        
        for (const indexSql of indexes) {
            const { error: indexError } = await supabase
                .rpc('execute_sql', { sql: indexSql });
            
            if (indexError) {
                console.warn(`‚ö†Ô∏è  –Ü–Ω–¥–µ–∫—Å –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${indexError.message}`);
            } else {
                console.log(`‚úÖ –Ü–Ω–¥–µ–∫—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${indexSql.split(' ')[5]}`);
            }
        }
        
        // 3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ session store
        console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ session store...');
        
        const testSessionData = {
            session_id: 'test-migration-' + Date.now(),
            expires_at: new Date(Date.now() + 3600000).toISOString(),
            sess: { 
                test: true, 
                migrated: true,
                user: { id: 1, name: 'Test User' },
                cookie: { maxAge: 3600000 }
            },
            user_id: 1,
            ip_address: '127.0.0.1',
            user_agent: 'Migration Test',
            active: 1
        };
        
        // –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏
        const { error: insertError } = await supabase
            .from('user_sessions')
            .insert(testSessionData);
        
        if (insertError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–≤–∫–∏:', insertError.message);
            return false;
        }
        
        // –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        const { data: selectData, error: selectError } = await supabase
            .from('user_sessions')
            .select('*')
            .eq('session_id', testSessionData.session_id)
            .single();
        
        if (selectError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è:', selectError.message);
            return false;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö
        if (!selectData.sess || !selectData.sess.test) {
            console.error('‚ùå –î–∞–Ω—ñ —Å–µ—Å—ñ—ó –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
            return false;
        }
        
        // –¢–µ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        const { error: updateError } = await supabase
            .from('user_sessions')
            .update({ 
                sess: { ...selectData.sess, updated: true },
                active: 0 
            })
            .eq('session_id', testSessionData.session_id);
        
        if (updateError) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:', updateError.message);
            return false;
        }
        
        // –û—á–∏—â–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Å–µ—Å—ñ—é
        await supabase
            .from('user_sessions')
            .delete()
            .eq('session_id', testSessionData.session_id);
        
        console.log('‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
        
        // 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:');
        
        const { count: totalSessions } = await supabase
            .from('user_sessions')
            .select('*', { count: 'exact' });
        
        const { count: activeSessions } = await supabase
            .from('user_sessions')
            .select('*', { count: 'exact' })
            .eq('active', 1)
            .gt('expires_at', new Date().toISOString());
        
        console.log(`   - –í—Å—å–æ–≥–æ —Å–µ—Å—ñ–π –≤ –ë–î: ${totalSessions || 0}`);
        console.log(`   - –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: ${activeSessions || 0}`);
        
        console.log('‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–∞ –ø–æ–≤–Ω–∏–π Supabase –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('üìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
        console.log('   1. –û–Ω–æ–≤–∏—Ç–∏ app-new.js –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è SupabaseSessionStore');
        console.log('   2. –í–∏–¥–∞–ª–∏—Ç–∏ SQLite –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ');
        console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –ø–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å');
        
        return true;
        
    } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', err.message);
        console.error('Stack trace:', err.stack);
        return false;
    }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó
 */
async function checkMigrationReadiness() {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó...');
    
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase
        const { data, error } = await supabase
            .from('user_sessions')
            .select('id')
            .limit(1);
        
        if (error) {
            console.error('‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ user_sessions:', error.message);
            return false;
        }
        
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase –ø—Ä–∞—Ü—é—î');
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ
        const { data: testData, error: testError } = await supabase
            .from('user_sessions')
            .select('session_id, user_id, expires_at, active')
            .limit(1);
        
        if (testError) {
            console.error('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é —Ç–∞–±–ª–∏—Ü—ñ:', testError.message);
            return false;
        }
        
        console.log('‚úÖ –ë–∞–∑–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ user_sessions –≤ –ø–æ—Ä—è–¥–∫—É');
        return true;
        
    } catch (err) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ:', err.message);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó —è–∫—â–æ —Ñ–∞–π–ª –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É
if (require.main === module) {
    console.log('üéØ –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–∞ –ø–æ–≤–Ω–∏–π Supabase...');
    
    checkMigrationReadiness()
        .then(ready => {
            if (!ready) {
                console.error('‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–æ –º—ñ–≥—Ä–∞—Ü—ñ—ó');
                process.exit(1);
            }
            
            return migrateToFullSupabase();
        })
        .then(success => {
            if (success) {
                console.log('üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
                process.exit(0);
            } else {
                console.error('‚ùå –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è');
                process.exit(1);
            }
        })
        .catch(err => {
            console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', err);
            process.exit(1);
        });
}

module.exports = { 
    migrateToFullSupabase, 
    checkMigrationReadiness 
}; 