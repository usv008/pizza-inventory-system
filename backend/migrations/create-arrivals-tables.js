const { createClient } = require('@supabase/supabase-js');

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if (!supabaseUrl) {
    console.error('‚ùå –ü–û–ú–ò–õ–ö–ê: SUPABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞');
    console.error('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ —Ñ–∞–π–ª .env —ñ—Å–Ω—É—î —ñ –º—ñ—Å—Ç–∏—Ç—å SUPABASE_URL');
    process.exit(1);
}

if (!supabaseKey) {
    console.error('‚ùå –ü–û–ú–ò–õ–ö–ê: SUPABASE_SERVICE_ROLE_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞');
    console.error('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ —Ñ–∞–π–ª .env —ñ—Å–Ω—É—î —ñ –º—ñ—Å—Ç–∏—Ç—å SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: { persistSession: false }
});

async function createArrivalsTables() {
  console.log('üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å arrivals —Ç–∞ arrivals_items –≤ Supabase...');
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î
    const { data: testData, error: testError } = await supabase
      .from('products')
      .select('id')
      .limit(1);
      
    if (testError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase:', testError);
      return;
    }
    
    console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ Supabase –ø—Ä–∞—Ü—é—î');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é arrivals
    console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ arrivals...');
    
    const createArrivalsSQL = `
      CREATE TABLE IF NOT EXISTS arrivals (
        id BIGSERIAL PRIMARY KEY,
        arrival_number TEXT UNIQUE NOT NULL,
        arrival_date DATE NOT NULL,
        reason TEXT NOT NULL,
        created_by TEXT DEFAULT 'system',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;
    
    const { data: arrivalData, error: arrivalError } = await supabase.rpc('exec_sql', {
      sql: createArrivalsSQL
    });
    
    if (arrivalError) {
      console.log('‚ÑπÔ∏è –ú–æ–∂–ª–∏–≤–æ —Ç–∞–±–ª–∏—Ü—è arrivals –≤–∂–µ —ñ—Å–Ω—É—î:', arrivalError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è arrivals —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é arrivals_items
    console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ arrivals_items...');
    
    const createItemsSQL = `
      CREATE TABLE IF NOT EXISTS arrivals_items (
        id BIGSERIAL PRIMARY KEY,
        arrival_id BIGINT NOT NULL REFERENCES arrivals(id) ON DELETE CASCADE,
        product_id BIGINT NOT NULL REFERENCES products(id),
        quantity INTEGER NOT NULL,
        batch_date DATE NOT NULL,
        notes TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
    `;
    
    const { data: itemsData, error: itemsError } = await supabase.rpc('exec_sql', {
      sql: createItemsSQL
    });
    
    if (itemsError) {
      console.log('‚ÑπÔ∏è –ú–æ–∂–ª–∏–≤–æ —Ç–∞–±–ª–∏—Ü—è arrivals_items –≤–∂–µ —ñ—Å–Ω—É—î:', itemsError.message);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è arrivals_items —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å...');
    
    try {
      const { data: arrivalCheck, error: arrivalCheckError } = await supabase
        .from('arrivals')
        .select('id')
        .limit(1);
        
      if (arrivalCheckError) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü—è arrivals –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', arrivalCheckError.message);
      } else {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è arrivals –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤');
      }
    } catch (err) {
      console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ arrivals:', err.message);
    }
    
    try {
      const { data: itemsCheck, error: itemsCheckError } = await supabase
        .from('arrivals_items')
        .select('id')
        .limit(1);
        
      if (itemsCheckError) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü—è arrivals_items –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', itemsCheckError.message);
      } else {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è arrivals_items –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤');
      }
    } catch (err) {
      console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ arrivals_items:', err.message);
    }
    
    console.log('‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó
if (require.main === module) {
  createArrivalsTables()
    .then(() => {
      console.log('üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      process.exit(0);
    })
    .catch(error => {
      console.error('üí• –ú—ñ–≥—Ä–∞—Ü—ñ—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—è:', error);
      process.exit(1);
    });
}

module.exports = { createArrivalsTables }; 