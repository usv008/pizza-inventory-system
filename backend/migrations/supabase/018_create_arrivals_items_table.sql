-- üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ arrivals_items –≤ Supabase
-- –ï—Ç–∞–ø 7, –ö—Ä–æ–∫ 2: –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è - –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å —Ç–æ–≤–∞—Ä—ñ–≤
-- –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: arrivals, products, users (—Å—Ç–≤–æ—Ä–µ–Ω—ñ)

-- –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É)
DROP TABLE IF EXISTS public.arrivals_items CASCADE;

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ arrivals_items
CREATE TABLE public.arrivals_items (
    id BIGSERIAL PRIMARY KEY,
    arrival_id BIGINT NOT NULL REFERENCES public.arrivals(id) ON DELETE CASCADE,
    product_id BIGINT NOT NULL REFERENCES public.products(id) ON DELETE RESTRICT,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    batch_date DATE NOT NULL,
    expiry_date DATE,
    quality_grade TEXT DEFAULT 'A' CHECK (quality_grade IN ('A', 'B', 'C', 'REJECT')),
    storage_location TEXT,
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    created_by_user_id BIGINT REFERENCES public.users(id)
);

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
CREATE INDEX idx_arrivals_items_arrival_id ON public.arrivals_items(arrival_id);
CREATE INDEX idx_arrivals_items_product_id ON public.arrivals_items(product_id);
CREATE INDEX idx_arrivals_items_batch_date ON public.arrivals_items(batch_date);
CREATE INDEX idx_arrivals_items_expiry_date ON public.arrivals_items(expiry_date);
CREATE INDEX idx_arrivals_items_quality_grade ON public.arrivals_items(quality_grade);
CREATE INDEX idx_arrivals_items_storage_location ON public.arrivals_items(storage_location);
CREATE INDEX idx_arrivals_items_created_at ON public.arrivals_items(created_at);
CREATE INDEX idx_arrivals_items_created_by ON public.arrivals_items(created_by_user_id);

-- –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É –ø–æ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—é —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç—É
CREATE INDEX idx_arrivals_items_arrival_product ON public.arrivals_items(arrival_id, product_id);

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at
CREATE OR REPLACE FUNCTION update_arrivals_items_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_arrivals_items_updated_at
    BEFORE UPDATE ON public.arrivals_items
    FOR EACH ROW
    EXECUTE FUNCTION update_arrivals_items_updated_at();

-- –¢—Ä–∏–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É total_price
CREATE OR REPLACE FUNCTION calculate_arrivals_items_total_price()
RETURNS TRIGGER AS $$
BEGIN
    -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–∞—Ö—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Ü—ñ–Ω—É —è–∫—â–æ —î unit_price
    IF NEW.unit_price IS NOT NULL AND NEW.quantity IS NOT NULL THEN
        NEW.total_price = NEW.unit_price * NEW.quantity;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_arrivals_items_calculate_total
    BEFORE INSERT OR UPDATE ON public.arrivals_items
    FOR EACH ROW
    EXECUTE FUNCTION calculate_arrivals_items_total_price();

-- –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –∫–æ–ª–æ–Ω–æ–∫
COMMENT ON TABLE public.arrivals_items IS '–ü–æ–∑–∏—Ü—ñ—ó –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–ª–∞–¥';
COMMENT ON COLUMN public.arrivals_items.id IS '–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è';
COMMENT ON COLUMN public.arrivals_items.arrival_id IS '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è';
COMMENT ON COLUMN public.arrivals_items.product_id IS '–ü—Ä–æ–¥—É–∫—Ç —è–∫–∏–π –Ω–∞–¥—ñ–π—à–æ–≤';
COMMENT ON COLUMN public.arrivals_items.quantity IS '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—É';
COMMENT ON COLUMN public.arrivals_items.unit_price IS '–¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é';
COMMENT ON COLUMN public.arrivals_items.total_price IS '–ó–∞–≥–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è)';
COMMENT ON COLUMN public.arrivals_items.batch_date IS '–î–∞—Ç–∞ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –ø–∞—Ä—Ç—ñ—ó';
COMMENT ON COLUMN public.arrivals_items.expiry_date IS '–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω—É –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ';
COMMENT ON COLUMN public.arrivals_items.quality_grade IS '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è —è–∫–æ—Å—Ç—ñ (A, B, C, REJECT)';
COMMENT ON COLUMN public.arrivals_items.storage_location IS '–ú—ñ—Å—Ü–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞ —Å–∫–ª–∞–¥—ñ';
COMMENT ON COLUMN public.arrivals_items.notes IS '–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏';
COMMENT ON COLUMN public.arrivals_items.created_at IS '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó';
COMMENT ON COLUMN public.arrivals_items.updated_at IS '–ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è';
COMMENT ON COLUMN public.arrivals_items.created_by_user_id IS '–•—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ –ø–æ–∑–∏—Ü—ñ—é';

-- –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
INSERT INTO public.arrivals_items (
    arrival_id,
    product_id,
    quantity,
    unit_price,
    batch_date,
    expiry_date,
    quality_grade,
    storage_location,
    notes,
    created_by_user_id
) VALUES 
    (
        1, -- ARR000001 (–¢–û–í "–ë–æ—Ä–æ—à–Ω–æ —ñ –ö–æ")
        1, -- –ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞
        50,
        12.50,
        CURRENT_DATE,
        CURRENT_DATE + INTERVAL '7 days',
        'A',
        '–°—Ç–µ–ª–∞–∂-–ê1',
        '–°–≤—ñ–∂–∞ –ø–∞—Ä—Ç—ñ—è, –≤—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å',
        1
    ),
    (
        1, -- —Ç–æ–π –∂–µ arrival
        2, -- –ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ
        30,
        15.00,
        CURRENT_DATE,
        CURRENT_DATE + INTERVAL '7 days',
        'A',
        '–°—Ç–µ–ª–∞–∂-–ê2',
        '–ü—Ä–µ–º—ñ—É–º —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏',
        1
    ),
    (
        1, -- —Ç–æ–π –∂–µ arrival
        3, -- –ü—ñ—Ü–∞ –ì–∞–≤–∞–π—Å—å–∫–∞
        20,
        13.75,
        CURRENT_DATE,
        CURRENT_DATE + INTERVAL '7 days',
        'B',
        '–°—Ç–µ–ª–∞–∂-–ê3',
        '–¢—Ä–æ—Ö–∏ –ø–µ—Ä–µ—Å—Ç–∏–≥–ª–∏–π –∞–Ω–∞–Ω–∞—Å, –∞–ª–µ –ø—Ä–∏–π–Ω—è—Ç–Ω–æ',
        1
    ),
    (
        2, -- ARR000002 (–í–ª–∞—Å–Ω–µ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ)
        1, -- –ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞
        100,
        NULL, -- –≤–ª–∞—Å–Ω–µ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ - –±–µ–∑ —Ü—ñ–Ω–∏
        CURRENT_DATE,
        CURRENT_DATE + INTERVAL '3 days',
        'A',
        '–°—Ç–µ–ª–∞–∂-–ë1',
        '–í–∏—Ä–æ–±–ª–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—Ä–∞–Ω—Ü—ñ',
        1
    ),
    (
        2, -- —Ç–æ–π –∂–µ arrival
        4, -- –ü—ñ—Ü–∞ –ß–æ—Ç–∏—Ä–∏ –°–∏—Ä–∏
        75,
        NULL,
        CURRENT_DATE,
        CURRENT_DATE + INTERVAL '3 days',
        'A',
        '–°—Ç–µ–ª–∞–∂-–ë2',
        '–ù–æ–≤–∏–π —Ä–µ—Ü–µ–ø—Ç - –ø—Ä–æ–±–Ω–∞ –ø–∞—Ä—Ç—ñ—è',
        1
    ),
    (
        3, -- ARR000003 (–ú–æ–ª–æ—á–Ω–∏–π –∫–æ–º–±—ñ–Ω–∞—Ç) - PENDING
        2, -- –ü—ñ—Ü–∞ –ü–µ–ø–µ—Ä–æ–Ω—ñ
        60,
        14.20,
        CURRENT_DATE + INTERVAL '1 day',
        CURRENT_DATE + INTERVAL '8 days',
        'A',
        '–°—Ç–µ–ª–∞–∂-–í1',
        '–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è',
        1
    ),
    (
        4, -- ARR000004 (–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è)
        3, -- –ü—ñ—Ü–∞ –ì–∞–≤–∞–π—Å—å–∫–∞
        5,
        NULL, -- –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è - –±–µ–∑ —Ü—ñ–Ω–∏
        CURRENT_DATE - INTERVAL '2 days',
        CURRENT_DATE + INTERVAL '1 day',
        'C',
        '–ö–∞—Ä–∞–Ω—Ç–∏–Ω-1',
        '–ü–æ–≤–µ—Ä–Ω–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–æ–º - —Ç–µ—Ä–º—ñ–Ω –º–∞–π–∂–µ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è',
        1
    );

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
SELECT 
    COUNT(*) as total_items,
    COUNT(DISTINCT arrival_id) as unique_arrivals,
    COUNT(DISTINCT product_id) as unique_products,
    SUM(quantity) as total_quantity,
    ROUND(AVG(unit_price), 2) as avg_unit_price,
    ROUND(SUM(total_price), 2) as total_value
FROM public.arrivals_items;

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
SELECT 
    ai.id,
    a.arrival_number,
    p.name as product_name,
    ai.quantity,
    ai.unit_price,
    ai.total_price,
    ai.batch_date,
    ai.expiry_date,
    ai.quality_grade,
    ai.storage_location,
    ai.notes
FROM public.arrivals_items ai
JOIN public.arrivals a ON ai.arrival_id = a.id
JOIN public.products p ON ai.product_id = p.id
ORDER BY a.arrival_number, p.name;

-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è—Ö
SELECT 
    a.arrival_number,
    a.reason,
    a.status,
    COUNT(ai.id) as items_count,
    SUM(ai.quantity) as total_quantity,
    ROUND(COALESCE(SUM(ai.total_price), 0), 2) as total_value
FROM public.arrivals a
LEFT JOIN public.arrivals_items ai ON a.id = ai.arrival_id
GROUP BY a.id, a.arrival_number, a.reason, a.status
ORDER BY a.arrival_number;

-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
SELECT 
    p.name as product_name,
    COUNT(ai.id) as arrivals_count,
    SUM(ai.quantity) as total_quantity,
    ROUND(AVG(ai.unit_price), 2) as avg_unit_price,
    ROUND(COALESCE(SUM(ai.total_price), 0), 2) as total_value
FROM public.products p
LEFT JOIN public.arrivals_items ai ON p.id = ai.product_id
GROUP BY p.id, p.name
HAVING COUNT(ai.id) > 0
ORDER BY total_quantity DESC;

-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —è–∫–æ—Å—Ç—ñ
SELECT 
    quality_grade,
    COUNT(*) as items_count,
    SUM(quantity) as total_quantity,
    ROUND(AVG(unit_price), 2) as avg_unit_price,
    COUNT(DISTINCT arrival_id) as unique_arrivals
FROM public.arrivals_items
GROUP BY quality_grade
ORDER BY 
    CASE quality_grade 
        WHEN 'A' THEN 1
        WHEN 'B' THEN 2 
        WHEN 'C' THEN 3
        WHEN 'REJECT' THEN 4
    END;

-- –ê–Ω–∞–ª—ñ–∑ —Ç–µ—Ä–º—ñ–Ω—ñ–≤ –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ
SELECT 
    CASE 
        WHEN expiry_date < CURRENT_DATE THEN '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ'
        WHEN expiry_date <= CURRENT_DATE + INTERVAL '2 days' THEN '–ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (‚â§2 –¥–Ω—ñ)'
        WHEN expiry_date <= CURRENT_DATE + INTERVAL '7 days' THEN '–°–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (‚â§7 –¥–Ω—ñ–≤)'
        ELSE '–°–≤—ñ–∂–∏–π (>7 –¥–Ω—ñ–≤)'
    END as expiry_status,
    COUNT(*) as items_count,
    SUM(quantity) as total_quantity
FROM public.arrivals_items
WHERE expiry_date IS NOT NULL
GROUP BY 
    CASE 
        WHEN expiry_date < CURRENT_DATE THEN '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ'
        WHEN expiry_date <= CURRENT_DATE + INTERVAL '2 days' THEN '–ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (‚â§2 –¥–Ω—ñ)'
        WHEN expiry_date <= CURRENT_DATE + INTERVAL '7 days' THEN '–°–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (‚â§7 –¥–Ω—ñ–≤)'
        ELSE '–°–≤—ñ–∂–∏–π (>7 –¥–Ω—ñ–≤)'
    END
ORDER BY 
    CASE expiry_status
        WHEN '–ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ' THEN 1
        WHEN '–ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (‚â§2 –¥–Ω—ñ)' THEN 2
        WHEN '–°–∫–æ—Ä–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è (‚â§7 –¥–Ω—ñ–≤)' THEN 3
        ELSE 4
    END;

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –∑–≤'—è–∑–∫—ñ–≤
SELECT 
    ai.id,
    a.arrival_number,
    a.reason as arrival_reason,
    p.name as product_name,
    p.code as product_code,
    u.username as created_by,
    ai.quantity,
    ai.quality_grade,
    ai.storage_location
FROM public.arrivals_items ai
JOIN public.arrivals a ON ai.arrival_id = a.id
JOIN public.products p ON ai.product_id = p.id
LEFT JOIN public.users u ON ai.created_by_user_id = u.id
ORDER BY a.arrival_number, p.name;

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É total_price
SELECT 
    id,
    quantity,
    unit_price,
    total_price,
    CASE 
        WHEN unit_price IS NOT NULL AND total_price = (unit_price * quantity) THEN '–ü—Ä–∞–≤–∏–ª—å–Ω–æ'
        WHEN unit_price IS NULL AND total_price IS NULL THEN 'OK (–Ω–µ–º–∞—î —Ü—ñ–Ω–∏)'
        ELSE '–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É'
    END as price_calculation_check
FROM public.arrivals_items
ORDER BY id;

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω–¥–µ–∫—Å—ñ–≤
SELECT 
    indexname,
    indexdef
FROM pg_indexes 
WHERE tablename = 'arrivals_items' 
    AND schemaname = 'public'
ORDER BY indexname;