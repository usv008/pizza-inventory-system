-- üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_plans –≤ Supabase
-- –ï—Ç–∞–ø 6, –ö—Ä–æ–∫ 1: –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ - –ø–ª–∞–Ω–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
-- –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: users (—Å—Ç–≤–æ—Ä–µ–Ω–∞)

-- –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é, —è–∫—â–æ –≤–æ–Ω–∞ —ñ—Å–Ω—É—î (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É)
DROP TABLE IF EXISTS public.production_plans CASCADE;

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ production_plans
CREATE TABLE public.production_plans (
    id BIGSERIAL PRIMARY KEY,
    plan_date DATE NOT NULL,
    status TEXT DEFAULT 'DRAFT' CHECK (status IN ('DRAFT', 'APPROVED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED')),
    total_planned INTEGER DEFAULT 0,
    total_produced INTEGER DEFAULT 0,
    created_by_user_id BIGINT REFERENCES public.users(id) ON DELETE SET NULL,
    approved_by_user_id BIGINT REFERENCES public.users(id) ON DELETE SET NULL,
    approved_at TIMESTAMPTZ,
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
CREATE INDEX idx_production_plans_plan_date ON public.production_plans(plan_date);
CREATE INDEX idx_production_plans_status ON public.production_plans(status);
CREATE INDEX idx_production_plans_created_by ON public.production_plans(created_by_user_id);
CREATE INDEX idx_production_plans_approved_by ON public.production_plans(approved_by_user_id);
CREATE INDEX idx_production_plans_created_at ON public.production_plans(created_at);
CREATE INDEX idx_production_plans_updated_at ON public.production_plans(updated_at);

-- –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—é –ø–ª–∞–Ω—ñ–≤ –Ω–∞ –æ–¥–Ω—É –¥–∞—Ç—É
CREATE UNIQUE INDEX idx_production_plans_unique_date ON public.production_plans(plan_date) 
WHERE status != 'CANCELLED';

-- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è updated_at
CREATE OR REPLACE FUNCTION update_production_plans_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_production_plans_updated_at
    BEFORE UPDATE ON public.production_plans
    FOR EACH ROW
    EXECUTE FUNCTION update_production_plans_updated_at();

-- –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ –∫–æ–ª–æ–Ω–æ–∫
COMMENT ON TABLE public.production_plans IS '–ü–ª–∞–Ω–∏ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ –ø–æ –¥–∞—Ç–∞—Ö';
COMMENT ON COLUMN public.production_plans.id IS '–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω—É';
COMMENT ON COLUMN public.production_plans.plan_date IS '–î–∞—Ç–∞ –¥–ª—è —è–∫–æ—ó —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ø–ª–∞–Ω';
COMMENT ON COLUMN public.production_plans.status IS '–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É (DRAFT, APPROVED, IN_PROGRESS, COMPLETED, CANCELLED)';
COMMENT ON COLUMN public.production_plans.total_planned IS '–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó';
COMMENT ON COLUMN public.production_plans.total_produced IS '–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó';
COMMENT ON COLUMN public.production_plans.created_by_user_id IS '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ –ø–ª–∞–Ω';
COMMENT ON COLUMN public.production_plans.approved_by_user_id IS '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —è–∫–∏–π –∑–∞—Ç–≤–µ—Ä–¥–∏–≤ –ø–ª–∞–Ω';
COMMENT ON COLUMN public.production_plans.approved_at IS '–ß–∞—Å –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É';
COMMENT ON COLUMN public.production_plans.notes IS '–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏ –¥–æ –ø–ª–∞–Ω—É';
COMMENT ON COLUMN public.production_plans.created_at IS '–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É';
COMMENT ON COLUMN public.production_plans.updated_at IS '–ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è';

-- –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
INSERT INTO public.production_plans (
    plan_date,
    status,
    total_planned,
    total_produced,
    created_by_user_id,
    approved_by_user_id,
    approved_at,
    notes
) VALUES 
    (
        CURRENT_DATE,
        'APPROVED',
        150,
        120,
        1, -- admin user
        1, -- admin user
        NOW() - INTERVAL '2 hours',
        '–ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ - –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é'
    ),
    (
        CURRENT_DATE + INTERVAL '1 day',
        'DRAFT',
        200,
        0,
        1, -- admin user
        NULL,
        NULL,
        '–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –º–µ–Ω—é'
    ),
    (
        CURRENT_DATE + INTERVAL '2 days',
        'DRAFT',
        180,
        0,
        1, -- admin user
        NULL,
        NULL,
        '–ü–ª–∞–Ω—É—î–º–æ –Ω–∞ –≤–∏—Ö—ñ–¥–Ω—ñ - –º–µ–Ω—à–∏–π –æ–±—Å—è–≥'
    ),
    (
        CURRENT_DATE - INTERVAL '1 day',
        'COMPLETED',
        100,
        98,
        1, -- admin user
        1, -- admin user
        NOW() - INTERVAL '1 day 3 hours',
        '–í—á–æ—Ä–∞—à–Ω—ñ–π –ø–ª–∞–Ω - –≤–∏–∫–æ–Ω–∞–Ω–æ –º–∞–π–∂–µ –ø–æ–≤–Ω—ñ—Å—Ç—é'
    ),
    (
        CURRENT_DATE - INTERVAL '2 days',
        'CANCELLED',
        120,
        0,
        1, -- admin user
        NULL,
        NULL,
        '–°–∫–∞—Å–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–∏—Ä–æ–≤–∏–Ω–∏'
    );

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
SELECT 
    COUNT(*) as total_plans,
    COUNT(*) FILTER (WHERE status = 'DRAFT') as draft_plans,
    COUNT(*) FILTER (WHERE status = 'APPROVED') as approved_plans,
    COUNT(*) FILTER (WHERE status = 'COMPLETED') as completed_plans,
    COUNT(*) FILTER (WHERE status = 'CANCELLED') as cancelled_plans,
    SUM(total_planned) as total_planned_items,
    SUM(total_produced) as total_produced_items
FROM public.production_plans;

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
SELECT 
    id,
    plan_date,
    status,
    total_planned,
    total_produced,
    CASE 
        WHEN total_planned > 0 THEN ROUND((total_produced::NUMERIC / total_planned) * 100, 1)
        ELSE 0
    END as completion_percentage,
    notes,
    created_at
FROM public.production_plans
ORDER BY plan_date DESC;

-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω—ñ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
SELECT 
    status,
    COUNT(*) as count,
    SUM(total_planned) as total_planned,
    SUM(total_produced) as total_produced,
    CASE 
        WHEN SUM(total_planned) > 0 THEN ROUND((SUM(total_produced)::NUMERIC / SUM(total_planned)) * 100, 1)
        ELSE 0
    END as avg_completion_rate
FROM public.production_plans
GROUP BY status
ORDER BY count DESC;

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ foreign key –∑–≤'—è–∑–∫—ñ–≤
SELECT 
    pp.id,
    pp.plan_date,
    pp.status,
    creator.username as created_by,
    creator.role as creator_role,
    approver.username as approved_by,
    approver.role as approver_role,
    pp.approved_at
FROM public.production_plans pp
LEFT JOIN public.users creator ON pp.created_by_user_id = creator.id
LEFT JOIN public.users approver ON pp.approved_by_user_id = approver.id
ORDER BY pp.plan_date DESC;

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É
SELECT 
    plan_date,
    COUNT(*) as plans_count,
    STRING_AGG(status, ', ') as statuses
FROM public.production_plans
WHERE status != 'CANCELLED'
GROUP BY plan_date
HAVING COUNT(*) > 1;

-- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω–¥–µ–∫—Å—ñ–≤
SELECT 
    indexname,
    indexdef
FROM pg_indexes 
WHERE tablename = 'production_plans' 
    AND schemaname = 'public'
ORDER BY indexname;