const { createClient } = require('@supabase/supabase-js');

console.log('[SUPABASE] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Supabase –∫–ª—ñ—î–Ω—Ç–∞...');

// –°—Ç–≤–æ—Ä—é—î–º–æ Supabase –∫–ª—ñ—î–Ω—Ç
const supabaseUrl = process.env.SUPABASE_URL || 'https://wncukuajzygzyasofyoe.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InduY3VrdWFqenlnenlhc29meW9lIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODUxNDE5MSwiZXhwIjoyMDY0MDkwMTkxfQ.arten1xRuJicEJEY7mHuet7eQqjuTb24VLwTtcB91yM';

console.log('üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é Supabase URL:', supabaseUrl);
console.log('üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é Supabase KEY:', supabaseKey ? supabaseKey.substring(0, 20) + '...' : '–í–Ü–î–°–£–¢–ù–Ü–ô');

const supabase = createClient(
    supabaseUrl,
    supabaseKey,
    {
        auth: {
            autoRefreshToken: false,
            persistSession: false
        }
    }
);

console.log('[SUPABASE] ‚úÖ Supabase –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–ª—ñ—î–Ω—Ç —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
module.exports = {
    supabase,
    
    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Supabase
    async testConnection() {
        try {
            const { data, error } = await supabase
                .from('products')
                .select('id')
                .limit(1);
                
            if (error) throw error;
            
            console.log('[SUPABASE] ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î');
            return true;
        } catch (err) {
            console.error('[SUPABASE] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', err.message);
            return false;
        }
    },
    
    // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è SELECT –∑–∞–ø–∏—Ç—ñ–≤
    async select(tableName, columns = '*', filters = {}) {
        try {
            let query = supabase.from(tableName).select(columns);
            
            // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
            Object.entries(filters).forEach(([key, value]) => {
                if (value !== null && value !== undefined) {
                    query = query.eq(key, value);
                }
            });
            
            const { data, error } = await query;
            
            if (error) throw error;
            return data;
        } catch (err) {
            console.error(`[SUPABASE] –ü–æ–º–∏–ª–∫–∞ SELECT –∑ ${tableName}:`, err.message);
            throw err;
        }
    },
    
    // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è INSERT
    async insert(tableName, data) {
        try {
            const { data: result, error } = await supabase
                .from(tableName)
                .insert(data)
                .select();
                
            if (error) throw error;
            return result;
        } catch (err) {
            console.error(`[SUPABASE] –ü–æ–º–∏–ª–∫–∞ INSERT –≤ ${tableName}:`, err.message);
            throw err;
        }
    },
    
    // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è UPDATE
    async update(tableName, id, data) {
        try {
            const { data: result, error } = await supabase
                .from(tableName)
                .update(data)
                .eq('id', id)
                .select();
                
            if (error) throw error;
            return result[0];
        } catch (err) {
            console.error(`[SUPABASE] –ü–æ–º–∏–ª–∫–∞ UPDATE –≤ ${tableName}:`, err.message);
            throw err;
        }
    },
    
    // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è DELETE
    async delete(tableName, id) {
        try {
            const { error } = await supabase
                .from(tableName)
                .delete()
                .eq('id', id);
                
            if (error) throw error;
            return true;
        } catch (err) {
            console.error(`[SUPABASE] –ü–æ–º–∏–ª–∫–∞ DELETE –∑ ${tableName}:`, err.message);
            throw err;
        }
    }
};
