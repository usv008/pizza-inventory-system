// run-operations-log-migration.js - –ó–∞–ø—É—Å–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'pizza_inventory.db');
const db = new sqlite3.Database(dbPath);

console.log('üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π...');

db.serialize(() => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
    db.run(`CREATE TABLE IF NOT EXISTS operations_log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        operation_type TEXT NOT NULL,  -- 'CREATE_ORDER', 'UPDATE_ORDER', 'PRODUCTION', 'WRITEOFF', 'ARRIVAL', etc.
        operation_id INTEGER,          -- ID –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó (order_id, production_id, etc.)
        entity_type TEXT NOT NULL,     -- 'order', 'product', 'production', 'writeoff', 'arrival'
        entity_id INTEGER,             -- ID —Å—É—Ç–Ω–æ—Å—Ç—ñ –Ω–∞ —è–∫—É –≤–ø–ª–∏–≤–∞—î –æ–ø–µ—Ä–∞—Ü—ñ—è
        old_data TEXT,                 -- JSON –∑ —Å—Ç–∞—Ä–∏–º–∏ –¥–∞–Ω–∏–º–∏ (–¥–ª—è UPDATE –æ–ø–µ—Ä–∞—Ü—ñ–π)
        new_data TEXT,                 -- JSON –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
        description TEXT NOT NULL,     -- –û–ø–∏—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        user_name TEXT NOT NULL,       -- –•—Ç–æ –≤–∏–∫–æ–Ω–∞–≤ –æ–ø–µ—Ä–∞—Ü—ñ—é
        ip_address TEXT,               -- IP –∞–¥—Ä–µ—Å–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_agent TEXT,               -- Browser info
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ operations_log:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è operations_log —Å—Ç–≤–æ—Ä–µ–Ω–∞');
        }
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–æ—à—É–∫—É
    const indexes = [
        { name: 'idx_operations_log_type', sql: 'CREATE INDEX IF NOT EXISTS idx_operations_log_type ON operations_log(operation_type)' },
        { name: 'idx_operations_log_entity', sql: 'CREATE INDEX IF NOT EXISTS idx_operations_log_entity ON operations_log(entity_type, entity_id)' },
        { name: 'idx_operations_log_date', sql: 'CREATE INDEX IF NOT EXISTS idx_operations_log_date ON operations_log(created_at)' },
        { name: 'idx_operations_log_user', sql: 'CREATE INDEX IF NOT EXISTS idx_operations_log_user ON operations_log(user_name)' }
    ];

    let indexesCreated = 0;
    indexes.forEach(({ name, sql }) => {
        db.run(sql, (err) => {
            if (err) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É ${name}:`, err.message);
            } else {
                console.log(`‚úÖ –Ü–Ω–¥–µ–∫—Å ${name} —Å—Ç–≤–æ—Ä–µ–Ω–æ`);
            }
            
            indexesCreated++;
            if (indexesCreated === indexes.length) {
                // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∑–∞–ø–∏—Å–∏
                addTestOperations();
            }
        });
    });

    function addTestOperations() {
        const testOperations = [
            {
                operation_type: 'CREATE_ORDER',
                operation_id: 1,
                entity_type: 'order',
                entity_id: 1,
                new_data: JSON.stringify({order_number: '20250626-001', client_name: '–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç', total_quantity: 100}),
                description: '–°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ20250626-001 –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ "–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç"',
                user_name: '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä'
            },
            {
                operation_type: 'PRODUCTION',
                operation_id: 1,
                entity_type: 'production',
                entity_id: 1,
                new_data: JSON.stringify({product_name: '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', quantity: 144, batch_date: '2025-06-26'}),
                description: '–í–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ: –ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ - 144 —à—Ç (–ø–∞—Ä—Ç—ñ—è 2025-06-26)',
                user_name: '–ù–∞—á–∞–ª—å–Ω–∏–∫ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞'
            }
        ];

        let completed = 0;
        testOperations.forEach((op, index) => {
            db.run(`INSERT INTO operations_log 
                   (operation_type, operation_id, entity_type, entity_id, new_data, description, user_name, created_at)
                   VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now', '-${index} minutes'))`,
                   [op.operation_type, op.operation_id, op.entity_type, op.entity_id, 
                    op.new_data, op.description, op.user_name],
                   function(err) {
                if (err) {
                    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É ${index + 1}:`, err.message);
                } else {
                    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å ${index + 1} —Å—Ç–≤–æ—Ä–µ–Ω–æ`);
                }
                
                completed++;
                if (completed === testOperations.length) {
                    console.log('üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
                    console.log('üìã –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é operations_log –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏ —Ç–∞ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏');
                    db.close();
                }
            });
        });
    }
});