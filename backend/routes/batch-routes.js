// routes/batch-routes.js - –†–æ—É—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞—Ä—Ç—ñ—è–º–∏ (–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è Supabase)

console.log('üöÄ Loading batch-routes.js...');

const express = require('express');
const batchService = require('../services/batchService-v2');
const { handleAsync } = require('../middleware/responseFormatter');

const router = express.Router();

console.log('‚úÖ Batch router created successfully');

// Logging middleware
router.use((req, res, next) => {
    console.log('üîç Batch route hit:', req.method, req.url);
    next();
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø–∞—Ä—Ç—ñ—ó –∑ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è–º –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö (–¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏)
router.get('/batches/grouped', async (req, res) => {
    try {
        const result = await batchService.getAllBatchesGrouped();
        res.json(result);
    } catch (error) {
        console.error('Error in /batches/grouped:', error);
        res.status(500).json({ 
            success: false, 
            error: '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π',
            details: error.message 
        });
    }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—ó —Ç–æ–≤–∞—Ä—É
router.get('/products/:productId/batches', handleAsync(async (req, res) => {
    const { productId } = req.params;
    const { includeExpired = false } = req.query;
    
    const result = await batchService.getBatchesByProduct(
        productId, 
        includeExpired === 'true'
    );
    
    res.json(result);
}));

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—ó —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è —Ç–µ—Ä–º—ñ–Ω–æ–º
router.get('/batches/expiring', handleAsync(async (req, res) => {
    const { days = 7 } = req.query;
    
    const result = await batchService.getExpiringBatches(days);
    
    res.json(result);
}));

// –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π –ø—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∑–≤–∏—á–∞–π–Ω–∏–π —Å–ø–æ—Å—ñ–±)
router.post('/orders/:orderId/reserve-batches', handleAsync(async (req, res) => {
    const { orderId } = req.params;
    const { allocations } = req.body;
    
    const context = {
        user: req.body.user || 'system',
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    const result = await batchService.reserveBatches(allocations, context);
    
    res.json({
        ...result,
        order_id: parseInt(orderId)
    });
}));

// –°–ø–∏—Å–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó
router.post('/batches/:batchId/writeoff', handleAsync(async (req, res) => {
    const { batchId } = req.params;
    const { quantity, reason, responsible, notes } = req.body;
    
    if (!quantity || !reason || !responsible) {
        return res.status(400).json({
            success: false,
            error: '–û–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: quantity, reason, responsible'
        });
    }
    
    const context = {
        user: responsible,
        ip_address: req.ip,
        user_agent: req.get('User-Agent'),
        log_operation: true
    };
    
    const result = await batchService.writeoffBatch(
        batchId, 
        quantity, 
        reason, 
        responsible, 
        notes || '',
        context
    );
    
    res.json(result);
}));

// –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É
router.get('/products/:productId/availability', handleAsync(async (req, res) => {
    const { productId } = req.params;
    
    const result = await batchService.getProductAvailability(productId);
    
    res.json(result);
}));

// –ù–û–í–Ü —Ä–æ—É—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ –ø–∞—Ä—Ç—ñ—è–º–∏

// –ó–≤—ñ–ª—å–Ω–∏—Ç–∏ –≤—Å—ñ —Ä–µ–∑–µ—Ä–≤–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.post('/orders/:orderId/unreserve-batches', handleAsync(async (req, res) => {
    const { orderId } = req.params;
    const { orderItems } = req.body; // –ú–∞—Å–∏–≤ –ø–æ–∑–∏—Ü—ñ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ allocated_batches
    
    const context = {
        user: req.body.user || 'system',
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    const result = await batchService.unreserveBatchesForOrder(orderId, orderItems, context);
    
    res.json(result);
}));

// –ó–∞—Ä–µ–∑–µ—Ä–≤—É–≤–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—ó –¥–ª—è –ø–æ–∑–∏—Ü—ñ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ FIFO)
router.post('/orders/:orderId/reserve-batches-items', handleAsync(async (req, res) => {
    const { orderId } = req.params;
    const { items } = req.body; // [{ product_id, quantity, notes }]
    
    if (!items || !Array.isArray(items)) {
        return res.status(400).json({
            success: false,
            error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'
        });
    }
    
    const context = {
        user: req.body.user || 'system',
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    const result = await batchService.reserveBatchesForOrderItems(orderId, items, context);
    
    res.json(result);
}));

module.exports = router;