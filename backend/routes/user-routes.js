const express = require('express');
const router = express.Router();

const userService = require('../services/userService');
const permissionService = require('../services/permissionService');
const { requireAuth, requireAdmin } = require('../middleware/authMiddleware');
const { formatResponse } = require('../middleware/responseFormatter');

// Middleware –¥–ª—è –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
router.use((req, res, next) => {
    const fs = require('fs');
    fs.appendFileSync('/tmp/middleware_debug.log', `${new Date().toISOString()} - ${req.method} ${req.url} - User: ${req.session?.user?.username || 'None'}\n`);
    next();
});

router.use((req, res, next) => {
    const fs = require('fs');
    fs.appendFileSync('/tmp/middleware_debug.log', `Before requireAuth\n`);
    next();
});

router.use(requireAuth);

router.use((req, res, next) => {
    const fs = require('fs');
    fs.appendFileSync('/tmp/middleware_debug.log', `After requireAuth\n`);
    next();
});

/**
 * @route GET /api/users
 * @desc –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * @access Admin only
 */
router.get('/', requireAdmin, async (req, res, next) => {
    try {
        const { include_inactive } = req.query;
        
        const users = await userService.getAllUsers({
            includeInactive: include_inactive === 'true'
        });
        
        res.json(formatResponse(users, '–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        next(error);
    }
});

/**
 * @route GET /api/users/roles
 * @desc –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–æ–ª–µ–π
 * @access Admin only
 */
router.get('/roles', requireAdmin, async (req, res, next) => {
    const fs = require('fs');
    
    try {
        fs.appendFileSync('/tmp/roles_debug.log', `${new Date().toISOString()} - START /api/users/roles\n`);
        fs.appendFileSync('/tmp/roles_debug.log', `User: ${JSON.stringify(req.user)}\n`);
        fs.appendFileSync('/tmp/roles_debug.log', `UserService type: ${typeof userService}\n`);
        
        const roles = [
            { value: '–î–ò–†–ï–ö–¢–û–†', label: '–î–∏—Ä–µ–∫—Ç–æ—Ä' },
            { value: '–ó–ê–í–Ü–î–£–Æ–ß–ò–ô_–í–ò–†–û–ë–ù–ò–¶–¢–í–û–ú', label: '–ó–∞–≤—ñ–¥—É—é—á–∏–π –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ–º' },
            { value: '–ë–£–•–ì–ê–õ–¢–ï–†', label: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä' },
            { value: '–ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö', label: '–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫' },
            { value: '–ö–û–ú–Ü–†–ù–ò–ö', label: '–ö–æ–º—ñ—Ä–Ω–∏–∫' },
            { value: '–ú–ï–ù–ï–î–ñ–ï–†_–ó_–ü–†–û–î–ê–ñ–Ü–í', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑ –ø—Ä–æ–¥–∞–∂—ñ–≤' }
        ];
        
        fs.appendFileSync('/tmp/roles_debug.log', `Roles: ${JSON.stringify(roles)}\n`);
        fs.appendFileSync('/tmp/roles_debug.log', `About to send response\n`);
        
        res.json(formatResponse(roles, '–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'));
        
        fs.appendFileSync('/tmp/roles_debug.log', `Response sent successfully\n`);
    } catch (error) {
        fs.appendFileSync('/tmp/roles_debug.log', `ERROR: ${error.message}\n`);
        fs.appendFileSync('/tmp/roles_debug.log', `STACK: ${error.stack}\n`);
        next(error);
    }
});

/**
 * @route GET /api/users/permissions
 * @desc –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∞–≤ –¥–ª—è UI
 * @access Admin only
 */
router.get('/permissions', requireAdmin, async (req, res, next) => {
    try {
        console.log('üîç [DEBUG] /api/users/permissions - –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏');
        const permissions = permissionService.getPermissionsForUI();
        console.log('‚úÖ [DEBUG] /api/users/permissions - –ü—Ä–∞–≤–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ:', permissions);
        
        res.json(formatResponse(permissions, '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∞–≤ –æ—Ç—Ä–∏–º–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        console.error('‚ùå [ERROR] /api/users/permissions - –ü–æ–º–∏–ª–∫–∞:', error);
        next(error);
    }
});

/**
 * @route GET /api/users/stats
 * @desc –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * @access Admin only
 */
router.get('/stats', requireAdmin, async (req, res, next) => {
    try {
        console.log('üîç [DEBUG] /api/users/stats - –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏');
        const stats = await userService.getUserStats();
        console.log('‚úÖ [DEBUG] /api/users/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞:', stats);
        
        res.json(formatResponse(stats, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        console.error('‚ùå [ERROR] /api/users/stats - –ü–æ–º–∏–ª–∫–∞:', error);
        next(error);
    }
});

/**
 * @route GET /api/users/:id
 * @desc –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @access Admin only
 */
router.get('/:id', requireAdmin, async (req, res, next) => {
    try {
        const userId = parseInt(req.params.id);
        
        if (isNaN(userId)) {
            return res.status(400).json(formatResponse(null, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', false));
        }
        
        const user = await userService.getUserById(userId);
        
        res.json(formatResponse(user, '–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        next(error);
    }
});

/**
 * @route POST /api/users
 * @desc –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @access Admin only
 */
router.post('/', requireAdmin, async (req, res, next) => {
    try {
        const { username, email, phone, role, permissions, password } = req.body;
        
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if (!username || !role || !password) {
            return res.status(400).json(formatResponse(null, '–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ä–æ–ª—å —Ç–∞ –ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏', false));
        }
        
        const userData = {
            username,
            email,
            phone,
            role,
            permissions: permissions || {},
            password
        };
        
        const newUser = await userService.createUser(userData, req.user.id);
        
        res.status(201).json(formatResponse(newUser, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        next(error);
    }
});

/**
 * @route PUT /api/users/:id
 * @desc –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @access Admin only
 */
router.put('/:id', requireAdmin, async (req, res, next) => {
    try {
        const userId = parseInt(req.params.id);
        
        if (isNaN(userId)) {
            return res.status(400).json(formatResponse(null, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', false));
        }
        
        const { username, email, phone, role, permissions, active } = req.body;
        
        const updateData = {};
        
        // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞–¥–∞–Ω—ñ –ø–æ–ª—è
        if (username !== undefined) updateData.username = username;
        if (email !== undefined) updateData.email = email;
        if (phone !== undefined) updateData.phone = phone;
        if (role !== undefined) updateData.role = role;
        if (permissions !== undefined) updateData.permissions = permissions;
        if (active !== undefined) updateData.active = active;
        
        const updatedUser = await userService.updateUser(userId, updateData, req.user.id);
        
        res.json(formatResponse(updatedUser, '–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        next(error);
    }
});

/**
 * @route DELETE /api/users/:id
 * @desc –í–∏–¥–∞–ª–∏—Ç–∏ (–¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏) –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @access Admin only
 */
router.delete('/:id', requireAdmin, async (req, res, next) => {
    try {
        const userId = parseInt(req.params.id);
        
        if (isNaN(userId)) {
            return res.status(400).json(formatResponse(null, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', false));
        }
        
        await userService.deleteUser(userId, req.user.id);
        
        res.json(formatResponse(null, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        next(error);
    }
});

/**
 * @route POST /api/users/:id/change-password
 * @desc –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)
 * @access Admin only
 */
router.post('/:id/change-password', requireAdmin, async (req, res, next) => {
    try {
        const userId = parseInt(req.params.id);
        const { password } = req.body;
        
        if (isNaN(userId)) {
            return res.status(400).json(formatResponse(null, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', false));
        }
        
        if (!password) {
            return res.status(400).json(formatResponse(null, '–ü–∞—Ä–æ–ª—å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º', false));
        }
        
        await userService.changeUserPassword(userId, password, req.user.id);
        
        res.json(formatResponse(null, '–ü–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        next(error);
    }
});

/**
 * @route GET /api/users/:id/permissions
 * @desc –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∞–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @access Admin only
 */
router.get('/:id/permissions', requireAdmin, async (req, res, next) => {
    try {
        const userId = parseInt(req.params.id);
        
        if (isNaN(userId)) {
            return res.status(400).json(formatResponse(null, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', false));
        }
        
        const permissions = await permissionService.getUserPermissions(userId);
        
        res.json(formatResponse(permissions, '–ü—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        next(error);
    }
});

/**
 * @route POST /api/users/:id/permissions/check
 * @desc –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø—Ä–∞–≤–æ
 * @access Admin only
 */
router.post('/:id/permissions/check', requireAdmin, async (req, res, next) => {
    try {
        const userId = parseInt(req.params.id);
        const { permission } = req.body;
        
        if (isNaN(userId)) {
            return res.status(400).json(formatResponse(null, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', false));
        }
        
        if (!permission) {
            return res.status(400).json(formatResponse(null, '–ü—Ä–∞–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º', false));
        }
        
        const hasPermission = await permissionService.hasPermission(userId, permission);
        
        res.json(formatResponse({ 
            user_id: userId, 
            permission, 
            has_permission: hasPermission 
        }, '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        next(error);
    }
});

/**
 * @route POST /api/users/:id/permissions/clear-cache
 * @desc –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à –ø—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @access Admin only
 */
router.post('/:id/permissions/clear-cache', requireAdmin, async (req, res, next) => {
    try {
        const userId = parseInt(req.params.id);
        
        if (isNaN(userId)) {
            return res.status(400).json(formatResponse(null, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', false));
        }
        
        permissionService.clearUserCache(userId);
        
        res.json(formatResponse(null, '–ö–µ—à –ø—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—á–∏—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'));
    } catch (error) {
        next(error);
    }
});

module.exports = router; 