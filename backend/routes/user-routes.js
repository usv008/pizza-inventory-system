const express = require('express');
const router = express.Router();

console.log('üîÑ [USER-ROUTES] Creating simple user router');

// Simple middleware for debug
router.use((req, res, next) => {
    console.log('üîç [USER-ROUTES] Request intercepted:', req.method, req.url);
    next();
});

/**
 * @route GET /api/users
 * @desc –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ Supabase DIRECT
 * @access Admin only  
 */
router.get('/', async (req, res, next) => {
    try {
        console.log('üîç [USER-ROUTES] GET /api/users - DIRECT Supabase call');
        
        // DIRECT Supabase call without service layer
        const { createClient } = require('@supabase/supabase-js');
        const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
        );
        
        const { data: users, error } = await supabase
            .from('users')
            .select('*')
            .eq('is_active', true);
            
        if (error) {
            console.error('‚ùå [USER-ROUTES] Supabase error:', error);
            return res.status(500).json({ error: 'Database error' });
        }
        
        // –ê–¥–∞–ø—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç
        const adaptedUsers = users.map(user => ({
            id: user.id,
            username: user.username,
            last_name: user.last_name,
            email: user.email,
            phone: user.phone,
            role: user.role,
            permissions: user.permissions || {},
            active: user.is_active ? 1 : 0,
            created_at: user.created_at,
            updated_at: user.updated_at,
            first_login: user.first_login ? 1 : 0
        }));
        
        console.log('‚úÖ [USER-ROUTES] Retrieved users from Supabase DIRECT:', adaptedUsers?.length);
        
        res.json({
            success: true,
            data: adaptedUsers,
            meta: {
                timestamp: new Date().toISOString()
            },
            message: '–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        });
    } catch (error) {
        console.error('‚ùå [USER-ROUTES] Error getting users:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

/**
 * @route GET /api/users/roles
 * @desc –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–æ–ª–µ–π
 */
router.get('/roles', (req, res) => {
    console.log('üîç [USER-ROUTES] GET /api/users/roles');
    
    const roles = [
        { value: '–î–ò–†–ï–ö–¢–û–†', label: '–î–∏—Ä–µ–∫—Ç–æ—Ä' },
        { value: '–ó–ê–í–Ü–î–£–Æ–ß–ò–ô_–í–ò–†–û–ë–ù–ò–¶–¢–í–û–ú', label: '–ó–∞–≤—ñ–¥—É—é—á–∏–π –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ–º' },
        { value: '–ë–£–•–ì–ê–õ–¢–ï–†', label: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä' },
        { value: '–ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö', label: '–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫' },
        { value: '–ö–û–ú–Ü–†–ù–ò–ö', label: '–ö–æ–º—ñ—Ä–Ω–∏–∫' },
        { value: '–ú–ï–ù–ï–î–ñ–ï–†_–ó_–ü–†–û–î–ê–ñ–Ü–í', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑ –ø—Ä–æ–¥–∞–∂—ñ–≤' }
    ];
    
    res.json({
        success: true,
        data: roles,
        message: '–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
    });
});

/**
 * @route GET /api/users/stats
 * @desc –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
router.get('/stats', async (req, res) => {
    try {
        console.log('üîç [USER-ROUTES] GET /api/users/stats - DIRECT Supabase');
        
        const { createClient } = require('@supabase/supabase-js');
        const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
        );
        
        const { data: users, error } = await supabase
            .from('users')
            .select('is_active, role');
            
        if (error) {
            console.error('‚ùå [USER-ROUTES] Stats error:', error);
            return res.status(500).json({ error: 'Database error' });
        }
        
        const stats = {
            total: users.length,
            active: users.filter(u => u.is_active).length,
            inactive: users.filter(u => !u.is_active).length,
            by_role: {}
        };
        
        // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ —Ä–æ–ª—è—Ö
        users.forEach(user => {
            if (user.is_active) {
                stats.by_role[user.role] = (stats.by_role[user.role] || 0) + 1;
            }
        });
        
        console.log('‚úÖ [USER-ROUTES] Stats calculated:', stats);
        
        res.json({
            success: true,
            data: stats,
            message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ'
        });
    } catch (error) {
        console.error('‚ùå [USER-ROUTES] Stats error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

console.log('‚úÖ [USER-ROUTES] Simple user router created successfully');

module.exports = router; 