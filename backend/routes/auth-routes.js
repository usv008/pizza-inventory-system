const express = require('express');
const router = express.Router();

// Middleware and error handling
const { handleAsync } = require('../middleware/responseFormatter');
const { ValidationError, NotFoundError } = require('../middleware/errors/AppError');

// Service
const authService = require('../services/authService');

/**
 * @api {get} /api/auth/users Get all users
 * @apiDescription –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–¥–ª—è dropdown –≤—Ö–æ–¥—É —Ç–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ)
 */
router.get('/users', handleAsync(async (req, res) => {
    const { include_inactive } = req.query;
    
    if (include_inactive === 'true') {
        // –î–ª—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ - –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        const allUsers = await authService.getAllUsers();
        console.log(`üîç Route: –æ—Ç—Ä–∏–º–∞–Ω–æ ${allUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤–∫–ª—é—á–Ω–æ –∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º–∏)`);
        res.json(allUsers);
    } else {
        // –î–ª—è dropdown –≤—Ö–æ–¥—É - —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ
        const activeUsers = await authService.getActiveUsers();
        const filteredUsers = activeUsers.filter(user => user.active === 1);
        console.log(`üîç Route: –æ—Ç—Ä–∏–º–∞–Ω–æ ${activeUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: ${filteredUsers.length}`);
        res.json(filteredUsers);
    }
}));

/**
 * @api {get} /api/auth/users/roles Get available roles
 * @apiDescription –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–æ–ª–µ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
router.get('/users/roles', handleAsync(async (req, res) => {
    const roles = [
        { value: '–î–ò–†–ï–ö–¢–û–†', label: '–î–∏—Ä–µ–∫—Ç–æ—Ä' },
        { value: '–ó–ê–í–Ü–î–£–Æ–ß–ò–ô_–í–ò–†–û–ë–ù–ò–¶–¢–í–û–ú', label: '–ó–∞–≤—ñ–¥—É—é—á–∏–π –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ–º' },
        { value: '–ë–£–•–ì–ê–õ–¢–ï–†', label: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä' },
        { value: '–ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö', label: '–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫' },
        { value: '–ö–û–ú–Ü–†–ù–ò–ö', label: '–ö–æ–º—ñ—Ä–Ω–∏–∫' },
        { value: '–ú–ï–ù–ï–î–ñ–ï–†_–ó_–ü–†–û–î–ê–ñ–Ü–í', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑ –ø—Ä–æ–¥–∞–∂—ñ–≤' }
    ];
    
    res.json(roles);
}));

/**
 * @api {get} /api/auth/users/stats Get user statistics
 * @apiDescription –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 */
router.get('/users/stats', handleAsync(async (req, res) => {
    const allUsers = await authService.getAllUsers();
    
    const stats = {
        total_users: allUsers.length,
        active_users: allUsers.filter(u => u.active === 1).length,
        admin_users: allUsers.filter(u => u.role === '–î–ò–†–ï–ö–¢–û–†').length
    };
    
    res.json(stats);
}));

/**
 * @api {post} /api/auth/users Create new user
 * @apiDescription –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
 */
router.post('/users', handleAsync(async (req, res) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    if (!req.session.user) {
        throw new ValidationError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.session.user.role !== '–î–ò–†–ï–ö–¢–û–†') {
        throw new ValidationError('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
    }
    
    const { username, email, phone, role, password, active } = req.body;
    
    if (!username || !role || !password) {
        throw new ValidationError('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ä–æ–ª—å —Ç–∞ –ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏');
    }
    
    const userData = {
        username,
        email,
        phone,
        role,
        password,
        active: active !== false // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º true
    };
    
    const newUser = await authService.createUser(userData, req.session.user.id);
    res.json({ success: true, data: newUser });
}));

/**
 * @api {put} /api/auth/users/:id Update user
 * @apiDescription –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
 */
router.put('/users/:id', handleAsync(async (req, res) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    if (!req.session.user) {
        throw new ValidationError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.session.user.role !== '–î–ò–†–ï–ö–¢–û–†') {
        throw new ValidationError('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
    }
    
    const userId = parseInt(req.params.id);
    if (isNaN(userId)) {
        throw new ValidationError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }
    
    const { username, email, phone, role, active } = req.body;
    
    const updateData = {};
    if (username !== undefined) updateData.username = username;
    if (email !== undefined) updateData.email = email;
    if (phone !== undefined) updateData.phone = phone;
    if (role !== undefined) updateData.role = role;
    if (active !== undefined) updateData.active = active;
    
    const updatedUser = await authService.updateUser(userId, updateData, req.session.user.id);
    res.json({ success: true, data: updatedUser });
}));

/**
 * @api {delete} /api/auth/users/:id Delete user
 * @apiDescription –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
 */
router.delete('/users/:id', handleAsync(async (req, res) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
    if (!req.session.user) {
        throw new ValidationError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (req.session.user.role !== '–î–ò–†–ï–ö–¢–û–†') {
        throw new ValidationError('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
    }
    
    const userId = parseInt(req.params.id);
    if (isNaN(userId)) {
        throw new ValidationError('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }
    
    // –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–¥–∞–ª—è—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (userId === 1) {
        throw new ValidationError('–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
    
    await authService.deleteUser(userId, req.session.user.id);
    res.json({ success: true, data: { message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ' } });
}));

/**
 * @api {post} /api/auth/login User login
 * @apiDescription –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
router.post('/login', handleAsync(async (req, res) => {
    const { username, password } = req.body;
    
    if (!username) {
        throw new ValidationError('Username —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (!password) {
        throw new ValidationError('Password —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    const user = await authService.login(username, password, sessionInfo);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –≤ Express
    req.session.user = {
        id: user.id,
        username: user.username,
        role: user.role,
        permissions: user.permissions
    };
    
    res.json({
        success: true,
        data: {
            user: {
                id: user.id,
                username: user.username,
                role: user.role,
                permissions: user.permissions,
                first_login: user.first_login,
                email: user.email,
                phone: user.phone
            },
            session_id: req.session.id
        },
        meta: {
            operation: 'login',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/set-password Set password for first login
 * @apiDescription –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É
 */
router.post('/set-password', handleAsync(async (req, res) => {
    const { user_id, password } = req.body;
    
    if (!user_id) {
        throw new ValidationError('User ID —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (!password) {
        throw new ValidationError('Password —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (password.length < 6) {
        throw new ValidationError('–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
    }
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    await authService.setFirstTimePassword(user_id, password, sessionInfo);
    
    res.json({
        success: true,
        data: {
            message: '–ü–∞—Ä–æ–ª—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        },
        meta: {
            operation: 'set_password',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/change-password Change own password
 * @apiDescription –ó–º—ñ–Ω–∞ –≤–ª–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
 */
router.post('/change-password', handleAsync(async (req, res) => {
    const { currentPassword, newPassword } = req.body;
    
    if (!currentPassword) {
        throw new ValidationError('–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (!newPassword) {
        throw new ValidationError('–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (newPassword.length < 6) {
        throw new ValidationError('–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (!req.session.user) {
        throw new ValidationError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è');
    }
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    await authService.changeOwnPassword(req.session.user.id, currentPassword, newPassword, sessionInfo);
    
    res.json({
        success: true,
        data: {
            message: '–ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        },
        meta: {
            operation: 'change_own_password',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/admin/change-password Change password by admin
 * @apiDescription –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
router.post('/admin/change-password', handleAsync(async (req, res) => {
    const { user_id, new_password } = req.body;
    
    if (!user_id) {
        throw new ValidationError('User ID —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (!new_password) {
        throw new ValidationError('New password —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (new_password.length < 6) {
        throw new ValidationError('–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (!req.session.user) {
        throw new ValidationError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è');
    }
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    await authService.changePasswordByAdmin(user_id, new_password, req.session.user.id, sessionInfo);
    
    res.json({
        success: true,
        data: {
            message: '–ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        },
        meta: {
            operation: 'admin_change_password',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {get} /api/auth/validate Validate session
 * @apiDescription –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥—ñ–π—Å–Ω—ñ—Å—Ç—å –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó
 */
router.get('/validate', handleAsync(async (req, res) => {
    if (!req.session.user) {
        return res.json({
            success: false,
            data: {
                authenticated: false,
                message: '–°–µ—Å—ñ—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'
            },
            meta: {
                timestamp: new Date().toISOString()
            }
        });
    }
    
    const sessionId = req.session.id;
    const user = await authService.validateSession(sessionId);
    
    if (!user) {
        // –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ –¥—ñ–π—Å–Ω–∞
        req.session.destroy();
        return res.json({
            success: false,
            data: {
                authenticated: false,
                message: '–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å'
            },
            meta: {
                timestamp: new Date().toISOString()
            }
        });
    }
    
    res.json({
        success: true,
        data: {
            authenticated: true,
            user: {
                id: user.id,
                username: user.username,
                role: user.role,
                permissions: user.permissions
            }
        },
        meta: {
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/logout User logout
 * @apiDescription –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–∏—Å—Ç–µ–º–∏
 */
router.post('/logout', handleAsync(async (req, res) => {
    const sessionId = req.session.id;
    const userId = req.session.user ? req.session.user.id : null;
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    await authService.logout(sessionId, userId, sessionInfo);
    
    // –ó–Ω–∏—â—É—î–º–æ —Å–µ—Å—ñ—é –≤ Express
    req.session.destroy((err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó:', err);
        }
    });
    
    res.json({
        success: true,
        data: {
            message: '–í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        },
        meta: {
            operation: 'logout',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {get} /api/auth/me Get current user info
 * @apiDescription –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
router.get('/me', handleAsync(async (req, res) => {
    if (!req.session.user) {
        throw new ValidationError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π');
    }
    
    res.json({
        success: true,
        data: {
            user: req.session.user,
            session_id: req.session.id
        },
        meta: {
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/cleanup-sessions Cleanup expired sessions
 * @apiDescription –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π (admin only)
 */
router.post('/cleanup-sessions', handleAsync(async (req, res) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!req.session.user) {
        throw new ValidationError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π');
    }
    
    const userPermissions = req.session.user.permissions || {};
    if (!userPermissions.admin?.all_rights) {
        throw new ValidationError('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π');
    }
    
    const cleanedCount = await authService.cleanupExpiredSessions();
    
    res.json({
        success: true,
        data: {
            message: `–û—á–∏—â–µ–Ω–æ ${cleanedCount} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π`,
            cleaned_sessions: cleanedCount
        },
        meta: {
            operation: 'cleanup_sessions',
            timestamp: new Date().toISOString()
        }
    });
}));

module.exports = router; 