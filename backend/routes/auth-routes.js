const express = require('express');
const router = express.Router();

// Middleware and error handling
const { handleAsync } = require('../middleware/responseFormatter');
const { ValidationError, NotFoundError } = require('../middleware/errors/AppError');

// Service - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Supabase
const authService = require('../services/authService-v2');

// –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç
router.get('/test', (req, res) => {
    console.log('üîç AUTH ROUTE TEST: –ó–∞–ø–∏—Ç –Ω–∞ /api/auth/test');
    res.json({ message: 'Auth route works!' });
});

/**
 * @api {get} /api/auth/users Get all users for dropdown
 * @apiDescription –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è dropdown –≤—Ö–æ–¥—É
 */
router.get('/users', handleAsync(async (req, res) => {
    console.log('üîç AUTH ROUTE: –ó–∞–ø–∏—Ç –Ω–∞ /api/auth/users');
    
    try {
        const activeUsers = await authService.getActiveUsers();
        console.log(`üîç AUTH ROUTE: authService.getActiveUsers() –ø–æ–≤–µ—Ä–Ω—É–≤:`, activeUsers);
        
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –Ω–∞ —Ä—ñ–≤–Ω—ñ route —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        const filteredUsers = activeUsers.filter(user => {
            console.log(`üîç AUTH ROUTE: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.username}, active: ${user.active} (type: ${typeof user.active})`);
            return user.active === 1 || user.active === true;
        });
        
        console.log(`üîç AUTH ROUTE: –æ—Ç—Ä–∏–º–∞–Ω–æ ${activeUsers.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: ${filteredUsers.length}`);
        
        res.json({
            success: true,
            data: filteredUsers,
            meta: {
                total: filteredUsers.length,
                timestamp: new Date().toISOString()
            }
        });
    } catch (error) {
        console.error('‚ùå AUTH ROUTE ERROR:', error);
        throw error;
    }
}));

/**
 * @api {post} /api/auth/login User login
 * @apiDescription –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
router.post('/login', handleAsync(async (req, res) => {
    const { username, password } = req.body;
    
    if (!username) {
        throw new ValidationError('Username —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (!password) {
        throw new ValidationError('Password —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    const user = await authService.login(username, password, sessionInfo);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –≤ Express
    req.session.user = {
        id: user.id,
        username: user.username,
        role: user.role,
        permissions: user.permissions
    };
    
    res.json({
        success: true,
        data: {
            user: {
                id: user.id,
                username: user.username,
                role: user.role,
                permissions: user.permissions,
                first_login: user.first_login,
                email: user.email,
                phone: user.phone
            },
            session_id: req.session.id
        },
        meta: {
            operation: 'login',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/set-password Set password for first login
 * @apiDescription –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É
 */
router.post('/set-password', handleAsync(async (req, res) => {
    const { user_id, password } = req.body;
    
    if (!user_id) {
        throw new ValidationError('User ID —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (!password) {
        throw new ValidationError('Password —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (password.length < 6) {
        throw new ValidationError('–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
    }
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    await authService.setFirstTimePassword(user_id, password, sessionInfo);
    
    res.json({
        success: true,
        data: {
            message: '–ü–∞—Ä–æ–ª—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        },
        meta: {
            operation: 'set_password',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/change-password Change own password
 * @apiDescription –ó–º—ñ–Ω–∞ –≤–ª–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
 */
router.post('/change-password', handleAsync(async (req, res) => {
    const { currentPassword, newPassword } = req.body;
    
    if (!currentPassword) {
        throw new ValidationError('–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (!newPassword) {
        throw new ValidationError('–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (newPassword.length < 6) {
        throw new ValidationError('–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (!req.session.user) {
        throw new ValidationError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è');
    }
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    await authService.changeOwnPassword(req.session.user.id, currentPassword, newPassword, sessionInfo);
    
    res.json({
        success: true,
        data: {
            message: '–ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        },
        meta: {
            operation: 'change_own_password',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/admin/change-password Change password by admin
 * @apiDescription –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 */
router.post('/admin/change-password', handleAsync(async (req, res) => {
    const { user_id, new_password } = req.body;
    
    if (!user_id) {
        throw new ValidationError('User ID —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (!new_password) {
        throw new ValidationError('New password —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º');
    }
    
    if (new_password.length < 6) {
        throw new ValidationError('–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (!req.session.user) {
        throw new ValidationError('–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è');
    }
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    await authService.changePasswordByAdmin(user_id, new_password, req.session.user.id, sessionInfo);
    
    res.json({
        success: true,
        data: {
            message: '–ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        },
        meta: {
            operation: 'admin_change_password',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {get} /api/auth/validate Validate session
 * @apiDescription –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥—ñ–π—Å–Ω—ñ—Å—Ç—å –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó
 */
router.get('/validate', handleAsync(async (req, res) => {
    if (!req.session.user) {
        return res.json({
            success: false,
            data: {
                authenticated: false,
                message: '–°–µ—Å—ñ—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'
            },
            meta: {
                timestamp: new Date().toISOString()
            }
        });
    }
    
    const sessionId = req.session.id;
    const user = await authService.validateSession(sessionId);
    
    if (!user) {
        // –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ –¥—ñ–π—Å–Ω–∞
        req.session.destroy();
        return res.json({
            success: false,
            data: {
                authenticated: false,
                message: '–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å'
            },
            meta: {
                timestamp: new Date().toISOString()
            }
        });
    }
    
    res.json({
        success: true,
        data: {
            authenticated: true,
            user: {
                id: user.id,
                username: user.username,
                role: user.role,
                permissions: user.permissions
            }
        },
        meta: {
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/logout User logout
 * @apiDescription –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–∏—Å—Ç–µ–º–∏
 */
router.post('/logout', handleAsync(async (req, res) => {
    const sessionId = req.session.id;
    const userId = req.session.user ? req.session.user.id : null;
    
    const sessionInfo = {
        ip_address: req.ip,
        user_agent: req.get('User-Agent')
    };
    
    await authService.logout(sessionId, userId, sessionInfo);
    
    // –ó–Ω–∏—â—É—î–º–æ —Å–µ—Å—ñ—é –≤ Express
    req.session.destroy((err) => {
        if (err) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó:', err);
        }
    });
    
    res.json({
        success: true,
        data: {
            message: '–í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        },
        meta: {
            operation: 'logout',
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {get} /api/auth/me Get current user info
 * @apiDescription –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 */
router.get('/me', handleAsync(async (req, res) => {
    if (!req.session.user) {
        throw new ValidationError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π');
    }
    
    res.json({
        success: true,
        data: {
            user: req.session.user,
            session_id: req.session.id
        },
        meta: {
            timestamp: new Date().toISOString()
        }
    });
}));

/**
 * @api {post} /api/auth/cleanup-sessions Cleanup expired sessions
 * @apiDescription –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π (admin only)
 */
router.post('/cleanup-sessions', handleAsync(async (req, res) => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!req.session.user) {
        throw new ValidationError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π');
    }
    
    const userPermissions = req.session.user.permissions || {};
    if (!userPermissions.admin?.all_rights) {
        throw new ValidationError('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π');
    }
    
    const cleanedCount = await authService.cleanupExpiredSessions();
    
    res.json({
        success: true,
        data: {
            message: `–û—á–∏—â–µ–Ω–æ ${cleanedCount} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å–µ—Å—ñ–π`,
            cleaned_sessions: cleanedCount
        },
        meta: {
            operation: 'cleanup_sessions',
            timestamp: new Date().toISOString()
        }
    });
}));

module.exports = router; 