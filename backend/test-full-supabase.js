const { supabase } = require('./supabase-client');
const SupabaseSessionStoreDev = require('./middleware/supabase-session-store-dev');

/**
 * –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–∞ Supabase
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–µ—Å—ñ—ó —Ç–∞ –ø–∞—Ä—Ç—ñ—ó
 */
async function testFullSupabaseMigration() {
    console.log('üß™ –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–∞ Supabase...\n');
    
    try {
        // ================================
        // –¢–ï–°–¢ 1: –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û SUPABASE
        // ================================
        console.log('üìã –¢–µ—Å—Ç 1: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase');
        const { data: connectionTest, error: connectionError } = await supabase
            .from('products')
            .select('id')
            .limit(1);
        
        if (connectionError) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: ${connectionError.message}`);
        }
        
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase –ø—Ä–∞—Ü—é—î\n');
        
        // ================================
        // –¢–ï–°–¢ 2: –°–ï–°–Ü–á (SUPABASE SESSION STORE)
        // ================================
        console.log('üìã –¢–µ—Å—Ç 2: Supabase Session Store');
        
        const sessionStore = new SupabaseSessionStoreDev({
            supabase: supabase,
            cleanupInterval: 60000
        });
        
        const testSid = 'migration-test-' + Date.now();
        const testSession = {
            cookie: { maxAge: 3600000, httpOnly: true },
            user: { id: 43, username: 'test-user' },
            migrationTest: true
        };
        
        // –¢–µ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
        await new Promise((resolve, reject) => {
            sessionStore.set(testSid, testSession, (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        
        // –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
        const retrievedSession = await new Promise((resolve, reject) => {
            sessionStore.get(testSid, (err, session) => {
                if (err) reject(err);
                else resolve(session);
            });
        });
        
        if (!retrievedSession || !retrievedSession.migrationTest) {
            throw new Error('–°–µ—Å—ñ—è –Ω–µ –±—É–ª–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        }
        
        // –û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó —Å–µ—Å—ñ—ó
        await new Promise((resolve, reject) => {
            sessionStore.destroy(testSid, (err) => {
                if (err) reject(err);
                else resolve();
            });
        });
        
        console.log('‚úÖ Supabase Session Store –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n');
        
        // ================================
        // –¢–ï–°–¢ 3: –ü–ê–†–¢–Ü–á (BATCH QUERIES)
        // ================================
        console.log('üìã –¢–µ—Å—Ç 3: Batch Queries –≤ Supabase');
        
        const { batchQueries } = require('./supabase-database');
        
        if (!batchQueries) {
            throw new Error('batchQueries –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ supabase-database');
        }
        
        // –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–∞—Ä—Ç—ñ–π
        const allBatches = await batchQueries.getAll();
        console.log(`   - –í—Å—å–æ–≥–æ –ø–∞—Ä—Ç—ñ–π: ${allBatches.length}`);
        
        // –¢–µ—Å—Ç –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö
        const groupedBatches = await batchQueries.getAllGroupedByProduct();
        console.log(`   - –¢–æ–≤–∞—Ä—ñ–≤ –∑ –ø–∞—Ä—Ç—ñ—è–º–∏: ${groupedBatches.length}`);
        
        // –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä—Ç—ñ–π —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è
        const expiringBatches = await batchQueries.getExpiring(30);
        console.log(`   - –ü–∞—Ä—Ç—ñ–π —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è (30 –¥–Ω—ñ–≤): ${expiringBatches.length}`);
        
        console.log('‚úÖ Batch Queries –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n');
        
        // ================================
        // –¢–ï–°–¢ 4: –ü–ï–†–ï–í–Ü–†–ö–ê –í–Ü–î–°–£–¢–ù–û–°–¢–Ü SQLITE
        // ================================
        console.log('üìã –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ SQLite –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π');
        
        let sqliteFound = false;
        
        try {
            require('sqlite3');
            sqliteFound = true;
        } catch (err) {
            // SQLite –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Ü–µ –¥–æ–±—Ä–µ
        }
        
        try {
            require('connect-sqlite3');
            sqliteFound = true;
        } catch (err) {
            // connect-sqlite3 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Ü–µ –¥–æ–±—Ä–µ
        }
        
        if (sqliteFound) {
            console.log('‚ö†Ô∏è  SQLite –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å–µ —â–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)');
        } else {
            console.log('‚úÖ SQLite –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ');
        }
        
        console.log('');
        
        // ================================
        // –¢–ï–°–¢ 5: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–Ü–ì–†–ê–¶–Ü–á
        // ================================
        console.log('üìã –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó');
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ–π
        const sessionStats = await sessionStore.getStats();
        console.log(`   - –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: ${sessionStats.active}`);
        console.log(`   - –í—Å—å–æ–≥–æ —Å–µ—Å—ñ–π: ${sessionStats.total}`);
        console.log(`   - –í –∫–µ—à—ñ: ${sessionStats.cached}`);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—å
        const { data: productsCount } = await supabase
            .from('products')
            .select('*', { count: 'exact' });
        
        const { data: ordersCount } = await supabase
            .from('orders')
            .select('*', { count: 'exact' });
        
        const { data: batchesCount } = await supabase
            .from('production_batches')
            .select('*', { count: 'exact' });
        
        console.log(`   - –¢–æ–≤–∞—Ä—ñ–≤ –≤ Supabase: ${productsCount?.length || 0}`);
        console.log(`   - –ó–∞–º–æ–≤–ª–µ–Ω—å –≤ Supabase: ${ordersCount?.length || 0}`);
        console.log(`   - –ü–∞—Ä—Ç—ñ–π –≤ Supabase: ${batchesCount?.length || 0}`);
        
        console.log('\nüéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–∞ –ø–æ–≤–Ω–∏–π Supabase –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
        console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó:');
        console.log('   ‚úÖ –°–µ—Å—ñ—ó: Supabase user_sessions (–∑ –∫–µ—à–µ–º)');
        console.log('   ‚úÖ –ü–∞—Ä—Ç—ñ—ó: Supabase production_batches');
        console.log('   ‚úÖ –¢–æ–≤–∞—Ä–∏: Supabase products');
        console.log('   ‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: Supabase orders');
        console.log('   ‚úÖ –ö–ª—ñ—î–Ω—Ç–∏: Supabase clients');
        console.log('   ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: Supabase users');
        console.log('   ‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—ó: Supabase operations_log');
        console.log('   ‚úÖ –ü—Ä–∏—Ö–æ–¥–∏: Supabase arrivals');
        
        console.log('\nüìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
        console.log('   1. –í production –¥–æ–¥–∞–π—Ç–µ –ø–æ–ª–µ sess –¥–æ user_sessions');
        console.log('   2. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∏');
        console.log('   3. –í–∏–¥–∞–ª—ñ—Ç—å .backup —Ñ–∞–π–ª–∏ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è');
        
        return true;
        
    } catch (err) {
        console.error('\n‚ùå –¢–µ—Å—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ:', err.message);
        console.error('Stack trace:', err.stack);
        return false;
    }
}

if (require.main === module) {
    testFullSupabaseMigration()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(err => {
            console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', err);
            process.exit(1);
        });
}

module.exports = { testFullSupabaseMigration }; 