// frontend/js/auth.js - –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é

class AuthManager {
    constructor() {
        this.apiUrl = '/api';
        this.currentUser = null;
        this.checkInterval = null;
        this.sessionCheckInterval = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó
    async checkSession() {
        try {
            const response = await fetch(`${this.apiUrl}/auth/me`, {
                method: 'GET',
                credentials: 'include'
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success && data.data && data.data.user) {
                    this.currentUser = data.data.user;
                    return true;
                }
            }
            
            this.currentUser = null;
            return false;
            
        } catch (error) {
            if (typeof logError === 'function') {
                logError('Session check failed', 'SESSION_CHECK_ERROR', error);
            }
            this.currentUser = null;
            return false;
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
    async isAuthenticated() {
        return await this.checkSession();
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    getCurrentUser() {
        return this.currentUser;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    hasPermission(permission) {
        if (!this.currentUser || !this.currentUser.permissions) {
            return false;
        }

        // –†–æ–∑–±–∏—Ä–∞—î–º–æ –¥–æ–∑–≤—ñ–ª –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "admin.all_rights")
        const parts = permission.split('.');
        let current = this.currentUser.permissions;

        for (const part of parts) {
            if (current && typeof current === 'object' && current[part] !== undefined) {
                current = current[part];
            } else {
                return false;
            }
        }

        return Boolean(current);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    hasRole(role) {
        return this.currentUser && this.currentUser.role === role;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
    isAdmin() {
        // –ë—É–¥—å-—è–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ä–æ–ª–ª—é –î–ò–†–ï–ö–¢–û–† –º–∞—î –≤—Å—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return this.hasRole('–î–ò–†–ï–ö–¢–û–†') || this.hasPermission('admin.all_rights');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –¥–∏—Ä–µ–∫—Ç–æ—Ä (–Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —è—Å–Ω–æ—Å—Ç—ñ)
    isDirector() {
        return this.hasRole('–î–ò–†–ï–ö–¢–û–†');
    }

    // –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏
    async logout() {
        try {
            const response = await fetch(`${this.apiUrl}/auth/logout`, {
                method: 'POST',
                credentials: 'include'
            });

            // –û—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            this.currentUser = null;
            this.stopSessionCheck();

            if (response.ok) {
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É
                window.location.href = '/login.html';
            } else {
                // –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ
                window.location.href = '/login.html';
            }

        } catch (error) {
            if (typeof logError === 'function') {
                logError('Logout failed', 'LOGOUT_ERROR', error);
            }
            
            // –§–æ—Ä—Å–æ–≤–∞–Ω–∏–π –≤–∏—Ö—ñ–¥
            this.currentUser = null;
            this.stopSessionCheck();
            window.location.href = '/login.html';
        }
    }

    // –ó–∞—Ö–∏—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –ª–æ–≥—ñ–Ω —è–∫—â–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
    async requireAuth() {
        const isAuth = await this.isAuthenticated();
        if (!isAuth) {
            window.location.href = '/login.html';
            return false;
        }
        return true;
    }

    // –ó–∞—Ö–∏—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–æ–∑–≤–æ–ª—ñ–≤
    async requirePermission(permission) {
        const isAuth = await this.requireAuth();
        if (!isAuth) return false;

        if (!this.hasPermission(permission)) {
            this.showAccessDenied();
            return false;
        }
        return true;
    }

    // –ó–∞—Ö–∏—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ä–æ–ª—ñ
    async requireRole(role) {
        const isAuth = await this.requireAuth();
        if (!isAuth) return false;

        if (!this.hasRole(role)) {
            this.showAccessDenied();
            return false;
        }
        return true;
    }

    // –ó–∞—Ö–∏—Å—Ç –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    async requireAdmin() {
        const isAuth = await this.requireAuth();
        if (!isAuth) return false;

        if (!this.isAdmin()) {
            this.showAccessDenied();
            return false;
        }
        return true;
    }

    // –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–º–æ–≤—É –≤ –¥–æ—Å—Ç—É–ø—ñ
    showAccessDenied() {
        const message = '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏';
        
        if (typeof showUserError === 'function') {
            showUserError(message);
        } else {
            alert(message);
        }
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        setTimeout(() => {
            window.location.href = '/';
        }, 2000);
    }

    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó
    startSessionCheck() {
        this.stopSessionCheck(); // –°–ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
        
        this.checkInterval = setInterval(async () => {
            const isAuth = await this.checkSession();
            if (!isAuth) {
                // –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ª–æ–≥—ñ–Ω
                if (typeof showUserError === 'function') {
                    showUserError('–°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É...');
                }
                
                setTimeout(() => {
                    window.location.href = '/login.html';
                }, 2000);
            }
        }, this.sessionCheckInterval);
    }

    // –ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó
    stopSessionCheck() {
        if (this.checkInterval) {
            clearInterval(this.checkInterval);
            this.checkInterval = null;
        }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    async init() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é
        await this.checkSession();
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–µ—Å—ñ—ó
        this.startSessionCheck();
        
        return this.currentUser !== null;
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è UI
    getUserInfo() {
        if (!this.currentUser) {
            return null;
        }

        return {
            id: this.currentUser.id,
            username: this.currentUser.username,
            email: this.currentUser.email,
            role: this.currentUser.role,
            roleLabel: this.getRoleLabel(this.currentUser.role),
            permissions: this.currentUser.permissions,
            isAdmin: this.isAdmin()
        };
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Ä–æ–ª—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
    getRoleLabel(role) {
        const roleLabels = {
            '–î–ò–†–ï–ö–¢–û–†': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
            '–ó–ê–í–Ü–î–£–Æ–ß–ò–ô_–í–ò–†–û–ë–ù–ò–¶–¢–í–û–ú': '–ó–∞–≤—ñ–¥—É—é—á–∏–π –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ–º',
            '–ë–£–•–ì–ê–õ–¢–ï–†': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä',
            '–ü–ê–ö–£–í–ê–õ–¨–ù–ò–ö': '–ü–∞–∫—É–≤–∞–ª—å–Ω–∏–∫',
            '–ö–û–ú–Ü–†–ù–ò–ö': '–ö–æ–º—ñ—Ä–Ω–∏–∫',
            '–ú–ï–ù–ï–î–ñ–ï–†_–ó_–ü–†–û–î–ê–ñ–Ü–í': '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑ –ø—Ä–æ–¥–∞–∂—ñ–≤'
        };
        
        return roleLabels[role] || role;
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    createUserElement() {
        const userInfo = this.getUserInfo();
        if (!userInfo) return null;

        const userElement = document.createElement('div');
        userElement.className = 'user-info';
        userElement.innerHTML = `
            <div class="user-menu">
                <button class="user-button" onclick="toggleUserMenu()">
                    üë§ ${userInfo.username} (${userInfo.roleLabel})
                </button>
                <div class="user-dropdown" id="user-dropdown">
                    <a href="#" onclick="showUserProfile()">üë§ –ü—Ä–æ—Ñ—ñ–ª—å</a>
                    <a href="#" onclick="changePassword()">üîë –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å</a>
                    ${userInfo.isAdmin ? '<a href="/admin/users.html">üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</a>' : ''}
                    <a href="#" onclick="authManager.logout()">üö™ –í–∏–π—Ç–∏</a>
                </div>
            </div>
        `;

        return userElement;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function toggleUserMenu() {
    const dropdown = document.getElementById('user-dropdown');
    if (dropdown) {
        dropdown.classList.toggle('show');
    }
}

function showUserProfile() {
    const userInfo = authManager.getUserInfo();
    if (userInfo) {
        alert(`–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n–Ü–º'—è: ${userInfo.username}\nEmail: ${userInfo.email || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n–†–æ–ª—å: ${userInfo.roleLabel}`);
    }
    toggleUserMenu();
}

function changePassword() {
    showChangePasswordModal();
    toggleUserMenu();
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
function showChangePasswordModal() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ —ñ—Å–Ω—É—î
    let modal = document.getElementById('change-password-modal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'change-password-modal';
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h2>üîë –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è</h2>
                    <span class="close" onclick="closeChangePasswordModal()">&times;</span>
                </div>
                
                <form id="change-password-form">
                    <div id="change-password-error" class="error-message" style="display: none;"></div>
                    <div id="change-password-success" class="success-message" style="display: none;"></div>
                    
                    <div class="form-group">
                        <label for="current-password">–ü–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å *</label>
                        <input type="password" id="current-password" name="currentPassword" required autocomplete="current-password">
                    </div>
                    
                    <div class="form-group">
                        <label for="new-password">–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å *</label>
                        <input type="password" id="new-password" name="newPassword" required autocomplete="new-password" minlength="6">
                        <small>–ú—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤</small>
                    </div>
                    
                    <div class="form-group">
                        <label for="confirm-password">–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å *</label>
                        <input type="password" id="confirm-password" name="confirmPassword" required autocomplete="new-password">
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn btn-secondary" onclick="closeChangePasswordModal()">‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏</button>
                        <button type="submit" class="btn btn-success" id="change-password-btn">üîë –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å</button>
                    </div>
                </form>
            </div>
        `;
        document.body.appendChild(modal);
        
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ä–º–∏
        document.getElementById('change-password-form').addEventListener('submit', handleChangePassword);
    }
    
    // –û—á–∏—â—É—î–º–æ —Ñ–æ—Ä–º—É —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
    document.getElementById('change-password-form').reset();
    hideChangePasswordMessages();
    modal.style.display = 'block';
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
function closeChangePasswordModal() {
    const modal = document.getElementById('change-password-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
async function handleChangePassword(event) {
    event.preventDefault();
    
    const currentPassword = document.getElementById('current-password').value;
    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (newPassword !== confirmPassword) {
        showChangePasswordError('–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å');
        return;
    }
    
    if (newPassword.length < 6) {
        showChangePasswordError('–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤');
        return;
    }
    
    if (currentPassword === newPassword) {
        showChangePasswordError('–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ');
        return;
    }
    
    try {
        setChangePasswordLoading(true);
        hideChangePasswordMessages();
        
        const response = await fetch(`${authManager.apiUrl}/auth/change-password`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify({
                currentPassword: currentPassword,
                newPassword: newPassword
            })
        });
        
        const data = await response.json();
        
        if (response.ok && data.success) {
            showChangePasswordSuccess('–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => {
                closeChangePasswordModal();
            }, 2000);
            
        } else {
            let errorMessage = '–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è';
            
            if (data.error) {
                switch (data.error.code) {
                    case 'INVALID_CURRENT_PASSWORD':
                        errorMessage = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π –ø–∞—Ä–æ–ª—å';
                        break;
                    case 'WEAK_PASSWORD':
                        errorMessage = '–ü–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ —Å–ª–∞–±–∫–∏–π';
                        break;
                    case 'VALIDATION_ERROR':
                        errorMessage = data.error.message || '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó';
                        break;
                    default:
                        errorMessage = data.error.message || '–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è';
                }
            }
            
            showChangePasswordError(errorMessage);
        }
        
    } catch (error) {
        showChangePasswordError('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');
        
        if (typeof logError === 'function') {
            logError('Change password request failed', 'CHANGE_PASSWORD_ERROR', error);
        }
    } finally {
        setChangePasswordLoading(false);
    }
}

// –ü–æ–∫–∞–∑ –ø–æ–º–∏–ª–∫–∏ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
function showChangePasswordError(message) {
    const errorDiv = document.getElementById('change-password-error');
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }
}

// –ü–æ–∫–∞–∑ —É—Å–ø—ñ—Ö—É –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è
function showChangePasswordSuccess(message) {
    const successDiv = document.getElementById('change-password-success');
    if (successDiv) {
        successDiv.textContent = message;
        successDiv.style.display = 'block';
    }
}

// –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function hideChangePasswordMessages() {
    const errorDiv = document.getElementById('change-password-error');
    const successDiv = document.getElementById('change-password-success');
    
    if (errorDiv) errorDiv.style.display = 'none';
    if (successDiv) successDiv.style.display = 'none';
}

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
function setChangePasswordLoading(isLoading) {
    const btn = document.getElementById('change-password-btn');
    const form = document.getElementById('change-password-form');
    
    if (btn && form) {
        if (isLoading) {
            btn.disabled = true;
            btn.textContent = '–ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è...';
            form.style.opacity = '0.7';
        } else {
            btn.disabled = false;
            btn.innerHTML = 'üîë –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å';
            form.style.opacity = '1';
        }
    }
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
document.addEventListener('click', function(event) {
    const userMenu = document.querySelector('.user-menu');
    const dropdown = document.getElementById('user-dropdown');
    
    if (userMenu && dropdown && !userMenu.contains(event.target)) {
        dropdown.classList.remove('show');
    }
});

// –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
const authManager = new AuthManager();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
window.AuthManager = AuthManager;
window.authManager = authManager; 