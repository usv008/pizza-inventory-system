// frontend/js/navigation.js - –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó

class PizzaNavigation {
    constructor() {
        this.navItems = [
            { 
                href: '/', 
                icon: 'üè†', 
                text: '–ì–æ–ª–æ–≤–Ω–∞',
                id: 'home'
            },
            { 
                href: '/admin.html', 
                icon: '‚öôÔ∏è', 
                text: '–¢–æ–≤–∞—Ä–∏',
                id: 'admin'
            },
            { 
                href: '/inventory.html', 
                icon: 'üì¶', 
                text: '–ó–∞–ø–∞—Å–∏',
                id: 'inventory'
            },
            { 
                href: '/orders.html', 
                icon: 'üìã', 
                text: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è',
                id: 'orders'
            },
            { 
                href: '/operations.html', 
                icon: 'üìä', 
                text: '–û–ø–µ—Ä–∞—Ü—ñ—ó',
                id: 'operations'
            }
            // –í–∏–¥–∞–ª–µ–Ω–æ production-planning
        ];
        this.initialized = false;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    createNavHTML(currentPage = '') {
        const navItemsHTML = this.navItems.map(item => {
            const isActive = this.isCurrentPage(item.href, currentPage) ? 'active' : '';
            return `<a href="${item.href}" class="${isActive}">${item.icon} ${item.text}</a>`;
        }).join('');

        return `
            <div class="header">
                <nav class="nav">
                    <h1>üçï Pizza Inventory System</h1>
                    <div class="nav-links">
                        ${navItemsHTML}
                        <a href="#" onclick="refreshPage()">üîÑ –û–Ω–æ–≤–∏—Ç–∏</a>
                    </div>
                </nav>
            </div>
        `;
    }

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    isCurrentPage(href, currentPage) {
        if (currentPage) {
            return currentPage === href;
        }
        
        const currentPath = window.location.pathname;
        
        if (href === '/' && (currentPath === '/' || currentPath === '/index.html')) {
            return true;
        }
        
        return currentPath === href;
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    init(currentPage = '') {
        if (this.initialized) {
            return; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        }

        try {
            // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å—Ç–∏–ª—ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
            this.loadNavigationStyles();
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
            const navHTML = this.createNavHTML(currentPage);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î
            if (safeQuerySelector('.header')) {
                logError('Navigation already exists', 'NAVIGATION_DUPLICATE');
                return;
            }
            
            // –í—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ body
            document.body.insertAdjacentHTML('afterbegin', navHTML);
            
            // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            this.adjustContentMargin();
            
            this.initialized = true;
            
        } catch (error) {
            logError('Failed to initialize navigation', 'NAVIGATION_INIT_ERROR', error);
            showUserError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó');
        }
    }

    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ CSS —Ñ–∞–π–ª–∏
    loadNavigationStyles() {
        const stylesheets = [
            'main.css',
            'navigation.css', 
            'buttons.css',
            'forms.css',
            'tables.css',
            'modals-tabs.css',
            'batches.css',
            'arrivals.css'
        ];
        
        stylesheets.forEach(filename => {
            const id = filename.replace('.css', '') + '-styles';
            
            if (!document.getElementById(id)) {
                const link = document.createElement('link');
                link.id = id;
                link.rel = 'stylesheet';
                link.href = `/styles/${filename}`;
                
                // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSS
                link.onerror = () => {
                    logError(`Failed to load CSS: ${filename}`, 'CSS_LOAD_ERROR');
                };
                
                document.head.appendChild(link);
            }
        });
    }

    // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    adjustContentMargin() {
        const firstElement = safeQuerySelector('.header + *');
        if (firstElement && !firstElement.style.marginTop) {
            firstElement.style.marginTop = '0';
        }
    }

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –ø—É–Ω–∫—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    addNavItem(href, icon, text, id, position = -1) {
        const newItem = { href, icon, text, id };
        
        if (position === -1 || position >= this.navItems.length) {
            this.navItems.push(newItem);
        } else {
            this.navItems.splice(position, 0, newItem);
        }
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –ø—É–Ω–∫—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    removeNavItem(id) {
        this.navItems = this.navItems.filter(item => item.id !== id);
    }
}

// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
function refreshPage() {
    try {
        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        if (typeof window.refreshPageContent === 'function') {
            window.refreshPageContent();
        } else {
            // Fallback –¥–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            window.location.reload();
        }
    } catch (error) {
        logError('Failed to refresh page', 'REFRESH_ERROR', error);
        // –§–æ—Ä—Å–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        window.location.reload();
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
window.PizzaNavigation = PizzaNavigation;

// –ë–µ–∑–ø–µ—á–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener('DOMContentLoaded', function() {
    try {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ –∞–≤—Ç–æ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        if (window.skipAutoNavigation) {
            return;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î
        if (document.querySelector('.header')) {
          return; // –¢–∏—Ö–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è
        }
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
        const nav = new PizzaNavigation();
        nav.init();
        
    } catch (error) {
        logError('Auto navigation initialization failed', 'AUTO_NAV_ERROR', error);
    }
});